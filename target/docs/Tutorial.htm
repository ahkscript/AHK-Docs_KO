<!DOCTYPE html>
<html lang="en">
	<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
		<meta charset="UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<!--Tutorial by tidbit, from http://ahkscript.github.io/AHK_Tutorial/
				Modified to fit with the AutoHotkey documentation.-->
		<meta name="author" content="tidbit" />
		<meta name="description" content="An AutoHotKey tutorial written by tidbit"/>
		<meta name="keywords" content="ahk, autohotkey, tutorial, beginners guide"/>
		<title>AutoHotkey Beginner Tutorial</title>
		<link href="static/theme.css" rel="stylesheet" type="text/css" />
		<script src="static/content.js" type="text/javascript"></script>
		<style type="text/css">
		.key
		{
			background-color: #f7f7f7;
			border: 1px solid #ccc;
			border-radius: 3px;
			box-shadow: 0 1px 0 rgba(0, 0, 0, 0.2), 0 0 0 2px #fff inset;
			color: #333;
			display: inline-block;
			font-size: 90%;
			line-height: 1.4;
			margin: 0 0.1em;
			padding: 0.1em 0.5em;
			text-shadow: 0 1px 0 #fff;
			white-space: nowrap;
		}
		.indented {
			text-indent: 1.5em;
			margin-bottom: 1em;
		}
		</style>
	</head>
	<body>
		<div class="page">
			<h1>오토핫키 초보자 자습서, 작성 <span style="opacity:0.4">티드비트(tidbit)</span></h1>
			<div id="toc" class="section">
				<h3>목차</h3>
				<ol>
					<li><a href="#s1" class="toci">기본</a>
						<ol>
							<li><a href="#s11" class="toci">오토핫키 내려받기</a></li>
							<li><a href="#s12" class="toci">스크립트 만드는 법</a></li>
							<li><a href="#s13" class="toci">명령어는 병합할 수 없다</a></li>
							<li><a href="#s14" class="toci">기타 기본 정보</a></li>
						</ol>
					</li>
					<li><a href="#s2" class="toci">핫키 &amp; 핫스트링</a>
						<ol>
							<li><a href="#s21" class="toci">키 그리고 심볼</a></li>
							<li><a href="#s22" class="toci">창 전용</a></li>
							<li><a href="#s23" class="toci">파일당 여러 핫키</a></li>
							<li><a href="#s24" class="toci">예제</a></li>
						</ol>
					</li>
					<li><a href="#s3" class="toci">키 눌림 전송하기</a>
						<ol>
							<li><a href="#s31" class="toci">게임</a></li>
						</ol>
					</li>
					<li><a href="#s4" class="toci">프로그램 실행하기 &amp; 웹사이트 열기</a></li>
					<li><a href="#s5" class="toci">명령어 vs. 함수</a>
						<ol>
							<li><a href="#s51" class="toci">코드 블록</a></li>
						</ol>
					</li>
					<li><a href="#s6" class="toci">변수</a>
						<ol>
							<li><a href="#s61" class="toci">퍼센트를 사용할 때</a></li>
							<li><a href="#s62" class="toci">사용자 입력 얻기</a></li>
							<li><a href="#s63" class="toci">다른 예제들?</a></li>
						</ol>
					</li>
					<li><a href="#s7" class="toci">객체</a>
						<ol>
							<li><a href="#s71" class="toci">객체 만들기</a></li>
							<li><a href="#s72" class="toci">객체 사용하기</a></li>
						</ol>
					</li>
					<li><a href="#s8" class="toci">기타 도움이 되는 것들</a>
						<ol>
							<li><a href="#s81" class="toci">신비한 []</a></li>
							<li><a href="#s82" class="toci">AHK 버전 알아내기</a></li>
							<li><a href="#s83" class="toci">시행 착오</a></li>
							<li><a href="#s84" class="toci">들여쓰기</a></li>
							<li><a href="#s85" class="toci">도움 요청하기</a></li>
							<li><a href="#s86" class="toci">기타 링크</a></li>
						</ol>
					</li>
				</ol>
			</div>
			<div id="bodyContent">
				<div id="basics" class="section">
					<h2 id="s1">1 - 기본 지식</h2>
					<p class="note">
						여행을 시작하기 전에, 조언을 한 마디 할까 합니다. 이 자습서에서 여러분은 꽤 많은 텍스트와 코드를 보시게 됩니다. 배우는 힘을 키우려면, 텍스트를 읽고 코드를 <b>시험해</b> 봅니다. 다음 그 코드를 연구해 보시기 바랍니다.
						<br />이 페이지에서 대부분의 예제를 복사해 붙여 넣을 수 있습니다.
						<br />잘 모르겠다면, 다시 읽어 보십시오.
					</p>

					<h3 id="s11">a. 오토핫키를 내려받아 설치하기</h3>

					<script type="text/javascript">
					if ('file:mk:ms-its:'.indexOf(location.protocol) != -1)
						document.write('<p class="note">' + translate.tutLocalMessage + '</p>');
					</script>
					<p>
						AutoHotkey (AHK)의 사용법을 배우기에 앞서, 내려 받아야 하겠습니다. 내려 받았으면, 설치해야 겠지요. 그러나 그것은 원하는 버전이 무엇인가에 따라 달라집니다. 이 지침서에서는 설치기를 사용하겠습니다. 가장 쉽게 설치할 수 있으니까요.
					</p>


					<h3>텍스트 지시:</h3>
					<ol>
						<li>AutoHotkey 홈페이지로 갑니다. <a href="http://ahkscript.org/">http://ahkscript.org/</a>
						</li>
						<li>내려받습니다. <a href="http://ahkscript.org/download/ahk-install.exe">http://ahkscript.org/download/ahk-install.exe</a>
						</li>
						<li>
							AutoHotkey를 설치하는 동안 UNICODE 또는 ANSI 중 하나를 골라야 합니다. 짧게 말해, 아마도 UNICODE를 선택하는 편이 좋습니다. 영문자-아닌 문자와 숫자들을 지원하거든요. 설치 버튼이 나올 때까지 계속 진행합니다.
						</li>
						<li>일단 끝났으면, 성공입니다! 섹션 b에서 계속합니다.</li>
					</ol>
					<p class="note">동영상 지시:<br />
						Frankie's "Install and Hello World"<br />
						<a href="http://www.autohotkey.com/forum/viewtopic.php?t=77674">http://www.autohotkey.com/forum/viewtopic.php?t=77674</a>
					</p>

					<h3 id="s12">b. 스크립트 만드는 법</h3>
					<p>
						오토핫키를 설치했으면, 뭔가 일을 시키고 싶겠지요. 오토핫키가 마법은 아닙니다. 우리 모두가 그렇기를 바라지만, 실제로는 아닙니다. 그래서 무슨 일을 하라고 지시할 필요가 있습니다. 이런 절차를 "스크립팅(Scripting)"이라고 부릅니다.
					</p>

					<h3>텍스트 지시:</h3>
					<ul>
						<li>1. 데스크탑에 우클릭합니다.</li>
						<li>2. 메뉴에서 "New"를 찾습니다.</li>
						<li>3. "New" 메뉴 안에 "AutoHotkey Script"를 클릭합니다.</li>
						<li>4. 스크립트에 새 이름을 줍니다. 주의: 확장자는 .ahk로 끝나야 합니다. 예. MyScript.ahk</li>
						<li>5. 데스크탑에 새로 만들어진 파일을 찾아 우클릭합니다.</li>
						<li>6. "Edit Script"를 클릭합니다.</li>
						<li>7. 창이 열릴 겁니다. 아마도 노트패드이겠지요. 그렇다면, 성공입니다!
						<hr />
						<p>
							이제 스크립트를 만들었으므로, 파일 안에 내용을 채워 넣어야 하겠습니다. 모든 내장 명령어와 함수 그리고 변수 목록은 <a href="#s5">section 5</a>에서 보실 수 있습니다.<br />
						</p>
						<p>
							다음은 핫키를 담고 있는 아주 간단한 스크립트입니다. 그 핫키가 눌리면 <a href="commands/Send.htm">Send</a> 명령어를 사용하여 텍스트를 타자합니다.
						</p>

<pre>
^j::
   Send, 나의 첫 번째 스크립트
Return
</pre>
						<p>
							나중에 더 깊이 들어가 보겠습니다. 그 때까지, 여기에서는 위의 코드를 설명합니다.<br />

							- 첫 줄. <code>^j::</code>가 바로 핫키입니다. <code>^</code>는 <span class="key">CTRL</span>을 의미하고, <code>j</code>는 기호문자 <span class="key">j</span>입니다. <code>::</code>의 <b>왼쪽</b>에 있는 것은 모두 누를 필요가 있는 키들입니다.<br />

							- 둘째 줄. <code>Send, My First Script</code>는 키들을 전송하는(SEND) 법을 보여줍니다. <code>SEND</code>는 명령어이고, 쉼표(,) 다음에 오는 것들이 모두 타자됩니다.<br />

							- 셋째 줄. <code>Return</code>. Return은 앞으로 가장 많이 접하게 되실 겁니다. 문자 그대로 코드를 멈춥니다. 아래로 더 이상 진행하지 않습니다. 이렇게 하면 스크립트에 많은 내용이 있을 때 문제를 피할 수 있습니다.
						</p>
						<hr />
						</li><li>8. 파일을 저장합니다.</li>
						<li>9. 데스크탑의 그 파일을 더블클릭하여 실행합니다. 노트패드를 엽니다 (무엇이든 타자해 넣을 수 있습니다). 그리고 <span class="key">Ctrl</span> and <span class="key">J</span>를 누릅니다.</li>
						<li>10. 멋지지요, 성공입니다! 첫 스크립트가 실행되었습니다. 가서 잠시 쉬고 돌아와 이 자습서를 계속 읽어보십시오..</li>
					</ul>

					<p class="note">
						동영상 지시:<br />
						Frankie's "Install and Hello World"<br /><a href="http://www.autohotkey.com/forum/viewtopic.php?t=77674">http://www.autohotkey.com/forum/viewtopic.php?t=77674</a>

					</p>
					<h3 id="s13">c. 명령어는 병합할 수 없다</h3>
					<p>
						코드를 만들 때, 여러 명령어들을 한 줄에 또는 한 명령어 안에 다른 명령어를 배치하고 싶은 유혹에 빠질 경우가 많을 것입니다. 절대 그렇게 하지 마십시오. <a href="#s5">섹션 5</a>에서 왜 예상한대로 작동하지 않는지 그리고 대신에 어떻게 하면 좋은지 말씀드리겠습니다.
					</p>

					<h3 id="s14">d. 기타 기본 정보</h3>
					<div>
						도움말 파일 찾는 법:<br />
						몇 가지 방법이 있습니다. 도움말이 기본 위치에 설치되어 있다고 가정하겠습니다..<br /><br />
						방법 1:
						<ol>
							<li>시작 메뉴를 찾거나 화면에서 Start Orb를 엽니다. 보통 좌하에 있습니다.</li>
							<li><b>프로그램</b> 또는 <b>모든 프로그램</b>을 선택합니다.</li>
							<li>목록에서 <b>AutoHotkey</b>를 찾습니다.</li>
							<li>찾았으면 <b>AutoHotkey 도움말 파일</b>이 보일 겁니다. 그것을 클릭합니다.</li>
							<li>끝입니다!</li>
						</ol>
						방법 2:
						<ol>
							<li>데스크탑으로 갑니다.</li>
							<li><b>내 컴퓨터</b> 또는 <b>컴퓨터</b>를 찾습니다. 그것을 엽니다.</li>
							<li><b>AutoHotkey</b>가 들어있는 하드 드라이브로 갑니다. 아마도 <b>C:\</b> 드라이브이겠지요.</li>
							<li><b>Program Files</b> 폴더 안에서 <b>AutoHotkey</b>를 검색합니다.</li>
							<li><b>AutoHotkey.chm</b>를 찾거나 이름이 AutoHotkey인 파일을 찾습니다. 그 위에 노란색 물음표가 있습니다.</li>
							<li>끝입니다!</li>
						</ol>
					</div>
					<p class="note">
						온라인 링크:<br />
						<a href="http://ahkscript.org/docs/">문서</a><br />
						<a href="http://ahkscript.org/docs/commands/">명령어 리스트</a><br />
						<a href="http://ahkscript.org/docs/Functions.htm#BuiltIn">함수</a><br />
						<a href="http://ahkscript.org/docs/Variables.htm">변수</a>
					</p>
				</div>
				<div id="hotkeys_and_hotstrings" class="section">
					<h2 id="s2">2 - 핫키 &amp; 핫스트링</h2>

					<p>
						핫키란 무엇인가? 핫키는 손길에 반응하는 키입니다. ... 농담입니다. 핫키는 사용자가 키보드를 눌러 어떤 행위를 촉발시키는 키 또는 키의 조합입니다.<br />
						핫스트링이란 무엇인가? 핫스트링은 주로 타자하는 동안 약자를 확대하는 데 사용됩니다 (자동-치환). 또 스크립트 행위를 촉발시키는 데에도 사용할 수 있습니다.
					</p>

					<p>다음은 핫키입니다:</p>

<pre>
^j::
   Send, 나의 첫 번째 스크립트
Return
</pre>

					<p>다음은 핫스트링입니다:</p>

<pre>
::ftw::Free the whales
</pre>

					<p>두 예제 사이의 차이는 핫키가 <span class="key">CTRL &amp; J</span>를 누를 때 촉발되지만 핫스트링은 "ftw"를 타자하면 바로 "Free the whales"로 치환합니다.</p>
					<p>
						<i>"그래서, 정확하게 어떻게 핫키를 만드는가?"</i> 좋은 질문입니다. 핫키는 한 쌍의 ::로 만들 수 있습니다. 키나 키 조합의 <b>오른쪽에</b> <code>::</code>이 있어야 합니다. 그리고 내용은 아래에 있어야 하고, 바로 따라서 아래에 <code>Return</code>이 있어야 합니다.<br />
					</p>
					<p class="note">주의: 예외가 있지만, 그런 것들은 혼란만 가중 시킬 뿐입니다. 그래서 그런 것들은 이 자습서에서 다루지 않습니다. 적어도 지금은 아닙니다.</p>
<pre>
esc::
   MsgBox Escape!!!!
Return
</pre>
					<p>핫 스트링은 한 쌍의 ::로 만듭니다. 그 사이에 텍스트 교체를 촉발하고 싶은 텍스트를 넣습니다. 반면에 타자된 텍스트를 대신할 텍스트는 두 번째 :: 쌍의 <b>오른쪽에</b> 배치합니다.</p>
					<p>핫스트링은 위에 언급한 바와 같이 스크립트된 행위를 촉발할 수 있습니다. 핫키와 똑 같이 <i>"멋지게 일을 하거라"</i>와 같은 마법의 주문입니다. </p>
<pre>
::btw::
   MsgBox "btw"를 타자했습니다.
Return
</pre>

					<p>
						알아야 할 멋진 일은 각 핫키, 핫 스트링, 라벨 그리고 아직 언급하지 않은 많은 것들마다 많은 줄의 코드를 가질 수 있다는 것입니다.
					</p>

<pre>
^j::
   MsgBox Wow!
   MsgBox this is
   Run, Notepad.exe
   winactivate, Untitled - Notepad
   WinWaitActive, Untitled - Notepad
   send, 7 lines{!}{enter}
   sendinput, inside the ctrl{+}j hotkey
Return
</pre>

					<h3 id="s21">a. 키와 그의 신비한 심볼</h3>

					<div>
						궁금하실 겁니다. <i>"도데체 어떻게 ^이 CTRL을 뜻한다는 걸 알 수 있지?!"</i>. 음, 좋은 질문입니다. ^와 기타 심볼이 무엇을 뜻하는지 돕기 위해, 다음 표에 모아 보았습니다:<br />
						<table class="info">
							<tr><th>심볼</th><th>설명</th></tr>
							<tr><td><strong>#</strong></td><td>Win (윈도우즈 로고 키)</td></tr>
							<tr><td><strong>!</strong></td><td>Alt</td></tr>
							<tr><td><strong>^</strong></td><td>Control</td></tr>
							<tr><td><strong>+</strong></td><td>Shift</td></tr>
							<tr>
								<td>
									<strong>&amp;</strong>
								</td>
								<td>
									앰퍼센트를 두 개의 키 사이 또는 마우스 버튼에 사용하면 그들을 조합해 맞춤 핫키를 만들 수 있습니다.
								</td>
							</tr>
						</table>
						<p>
							<strong>
								(완전한 심볼 목록은 <a href="Hotkeys.htm">핫키</a> 페이지를 참조합니다)
							</strong>
						</p>
					</div>
					<p>
						추가로, 다음은 핫키의 <b>왼쪽에 </b>사용할 수 있는 모든/거의 대부분의 핫키 이름 목록입니다:<br /><a href="KeyList.htm">KeyList.htm</a>
					</p>
					<p>
						두 개의 키를 (오직 두 개까지만) 조합해 정의할 수 있습니다 (조이스틱 버튼 제외). 그 사이에 <b>&amp;</b>를 사용하면 됩니다. 아래의 예제에서, <span class="key">Numpad0</span>를 누른 다음 두 번째 키를 눌러서 핫키를 촉발시켜 보겠습니다:
					</p>

<pre>
Numpad0 &amp; Numpad1::
   MsgBox Numpad0을 누르고 있는 동안 Numpad1를 눌렀습니다.
Return

Numpad0 &amp; Numpad2::
	Run Notepad
Return
</pre>

					<p>
						그러나 이제 핫스트링은 핫키가 그런 것처럼 멋진 수식키들이 있을까 궁금하실 겁니다. 물론 있습니다!<br />
						핫스트링 수식키는 첫 번째 :: 쌍 사이에 들어갑니다. 다음과 같이:
					</p>

<pre>
:*:ftw::Free the whales
</pre>

					<p class="note">
						핫키와 핫스트링 수식키에 관한 더 자세한 정보와 예제는 다음을 참조합니다:<br />
						<a href="Hotkeys.htm">핫키</a><br />
						<a href="Hotstrings.htm">핫스트링</a>
					</p>
					<h3 id="s22">b. 창 전용 핫키/핫스트링</h3>

					<p>종종 핫키나 핫스트링이 특정 창에서만 작동했으면 (또는 작동하지 말았으면) 하고 바랄 경우가 있습니다. 앞에 #를 두고 다음의 환상적인 명령어를 사용하면 됩니다.</p>
					<p>#IfWinActive<br />
					#IfWinExist</p>
					<p>
						(기술적으로 "지시어"라고 불리우는) 이 특별한 명령어들은 문맥을-감지하는 핫키와 핫스트링을 만듭니다. 그냥 창 제목을 지정하면 됩니다. 그러나 어떤 경우는 HWND나 그룹 또는 클래스를 지정하고 싶을 경우도 있습니다. 그런 것들은 좀 고급 주제이므로 다음에서 더 깊게 다룹니다: <a href="commands/_IfWinActive.htm">#IfWinActive</a>.
					</p>
<pre>
#IfWinActive Untitled - Notepad
#space::
   MsgBox 노트패드에서 Win+Spacebar를 눌렀습니다.
Return
#IfWinActive
</pre>
					<p>문맥 감지를 끄려면, #IfWin 명령어는 지정하되 그의 모든 매개변수를 빈 채로 두면 됩니다. 예를 들어:</p>
<pre>
<em>; Notepad</em>
#IfWinActive untitled - Notepad
!q::
   MsgBox, 노트패드에서  Alt 와 Q를 눌렀습니다.
Return
#IfWinActive

<em>; Untitled - Notepad가 아닌 모든 창</em>
!q::
   MsgBox, 어떤 창인지는 모르지만 Alt와 Q를 눌렀습니다.
Return
</pre>
					<p>#IfWin 명령어가 꺼져 있으면 (또는 스크립트 안에서 전혀 사용되지 않으면), 모든 핫키와 핫스트링은 모든 창에 반응합니다.</p><br />
					<p>#IfWin 명령어는 위치에 영향을 미칩니다: 스크립트에서 물리적으로 아래에 있는 모든 핫키와 핫스트링에 영향을 미칩니다.</p>

<pre>
<em>; Notepad</em>
#IfWinActive ahk_class Notepad
#space::
   MsgBox, 노트패드에서 Win+Spacebar를 눌렀습니다.
Return
::msg::You typed msg in Notepad
#IfWinActive

<em>; MSPaint</em>
#IfWinActive untitled - Paint
#space::
   MsgBox, MSPaint에서 Win+Spacebar를 눌렀습니다!
Return
::msg::You typed msg in MSPaint!
#IfWinActive
</pre>
					<p class="note">더 깊은 정보과 비슷한 명령어들을 보려면, 다음을 참조합니다:<br />
					<a href="commands/_IfWinActive.htm">#IfWinActive</a></p>
					<h3 id="s23">c. 파일당 다중 핫키/핫스트링</h3>			   
					<p>어떤 이유로 이런 생각이 드실지 모르겠습니다. 그래서, 명확하게 밝혀 둡니다: 오토핫키는 파일 하나당 <i>얼마든지 많은</i> 핫키와 핫스트링을 가질 수 있습니다. 1이든 3253이든 (그 이상이든) 상관없습니다.</p>
<pre>
#i::
   run, http://www.google.com/
Return

^p::
   run, notepad.exe
Return

~j::
   send, ack
Return

:*:acheiv::achiev
::achievment::achievement
::acquaintence::acquaintance
:*:adquir::acquir
::aquisition::acquisition
:*:agravat::aggravat
:*:allign::align
::ameria::America
</pre>

					<p>The above code is perfectly acceptable. Multiple hotkeys, multiple hotstrings. 모두가 하나로 뭉뚱그려진 행복한 스크립트 파일이네요.</p>


					<h3 id="s24">d. 예제</h3>
<pre>::btw::By the way                          <em>; <a href="commands/_Hotstring.htm">EndChar</a>를 누르면 바로 "btw"를 "By the way"로 교체합니다.</em>
:*:btw::By the way                         <em>; "btw"를 "By the way"로 바꿉니다.  EndChar가 필요 없습니다.</em>

^n::                                       <em>; Ctrl &amp; n Hotkey</em>
   run, notepad.exe                        <em>; Ctrl &amp; n을 누려면 바로 notepad.exe를 실행합니다</em>
Return                                     <em>; 핫키가 끝납니다. 이 아래의 코드는 실행되지 않습니다.</em>

^b::                                       <em>; Ctrl &amp; b Hotkey</em>
   send, {ctrl down}c{ctrl up}             <em>; 선택된 텍스트를 복사합니다. ^c도 사용할 수 있지만, 이 방법이 더 안전합니다.</em>
   SendInput, [b]{ctrl down}v{ctrl up}[/b] <em>; 선택된 텍스트를 bbcode (forum) Bold 태그 안에 싸 넣습니다.</em>
Return                                     <em>; 핫키가 끝납니다. 이 아래의 코드는 실행되지 않습니다.</em>
</pre>

					<!-- PAGE 2 -->
					<!-- PAGE 2 -->
					<!-- PAGE 2 -->
				</div>
				<div id="sending_keystrokes" class="section">
					<h2 id="s3">3 - 키 눌림 전송하기</h2>
					<p>
						그래서 이제 키들을 프로그램으로 전송(타자)하기로 결정합니다.  <a href="commands/Send.htm">Send</a> 명령어를 사용하면 됩니다. 문자 그대로 키들을 전송합니다. 마치 키를 타자하거나 누른 것처럼 흉내 냅니다.<br /><br />
						더 깊게 들어가기 전에, 먼저 약간의 일반적인 문제들을 다룹니다:<br />
						핫키처럼, Send에도 특수한 키가 있습니다. <a href="commands/Send.htm">아주 많습니다.</a><br />
						다음은 가장 많이 사용하는 심볼 네 가지입니다:
					</p>
					<div>
						<hr />
						<p><span class="red">!</span>: ALT 키를 전송합니다. 예를 들어, <em>Send This is text!a</em>는 "This is text" 키들을 누른 다음 ALT+a를 누른 것과 같습니다. <strong>주의</strong>: !A는 어떤 프로그램에서는 !a와 전혀 다른 효과를 냅니다. 이것은 !A가 ALT+SHIFT+A를 누르는 반면 !a는 ALT+a를 누르기 때문입니다. 잘 모르겠으면, 소문자를 사용하십시오.</p><p><span class="red">+</span>: SHIFT 키를 전송합니다. 예를 들어, <em>Send +abC </em>는 텍스트 "AbC"를 전송하고, <em>Send !+a</em>는 ALT+SHIFT+a를 누릅니다.</p><p><span class="red">^</span>: CONTROL (Ctrl) 키를 전송합니다. 예를 들어, <em>Send ^!a</em>는 CTRL+ALT+a를 누른 것과 같고, <em>Send ^{Home}</em>은 CONTROL+HOME을 전송합니다. <strong>주의</strong>: ^A는 어떤 프로그램에서 ^a와 전혀 다른 효과를 냅니다. 왜냐하면 ^A는 CONTROL+SHIFT+A를 누르는 반면 ^a는 CONTROL+a를 누르기 때문입니다. 잘 모르겠으면, 소문자를 사용하십시오.</p><p><span class="red">#</span>: WIN 키를 전송합니다 (윈도우즈 로고가 그려진 키) 그러므로 <em>Send #e</em>는 윈도우즈 키를 누른 다음 기호 "e"를 전송합니다.</p>
					</div>
					<p><i><strong>다음 두 문단에서 <a href="commands/Send.htm">전송 페이지에 관한 테이블에 관하여</a> 언급합니다.</strong><br /></i></p>
					<p class="note">
						주의:<br />이 테이블은 <a href="Hotkeys.htm">핫키</a>에 <b>적용되지 않습니다</b>. 핫키를 만들 때 <span class="key">CTRL</span> 또는 <span class="key">ENTER</span> (또는 기타 어떤 키이든) {} 안에 싸 넣지 못한다는 뜻입니다.
					</p><br />

					<div>
						다음 예제에서 핫키에 해서는 안되는 것들을 보여줍니다:
<pre>
<em>; 핫키를 만들 때...
; 잘못됨</em>
{LCtrl}::
   send, AutoHotkey
Return

<em>; 올바름</em>
LCtrl::
   send, AutoHotkey
Return
</pre>
					</div>
					<hr />
					<div>
						<p>위의 거대한 테이블에 아주 많은 특수 키들이 AHK에 내장되어 있는 것을 볼 수 있습니다. 다음과 같이: <code>{enter}</code> 그리고 <code>{space}</code>.<br />
						많은 사람들이 활괄호가 그냥 재미로 배치되어 있다고 생각합니다. 그러나 사실 <b>꼭 필요합니다</b>. 그렇게 해야 AHK가 <code>{!}</code>이 "느낌표"일 뿐 "<span class="key">Alt</span> 키를 누르라"는 뜻이 아님을 이해합니다. 그래서 <a href="commands/Send.htm">send</a> 페이지에 있는 테이블을 꼭 암기하시고 괄호를 제 자리에 배치하십시오.</p>
<pre>
<em>;  !가 {} 안에 있는 것에 주목하십시오. 그렇지 않으면  AHK가
;  ALT 키를 눌러 버리기 때문입니다.</em>
send, This text has been typed{!}
</pre>

<pre>
<em>; 위와 같지만,  이 번에는 ENTER 키입니다. AHK는 "enter"를 타자해 버립니다...
; ... {} 안에 싸여 있지 않다면 말입니다.</em>
send, Multiple enter lines have enter been sent. <em>; 잘못됨</em>
send, Multiple{enter}lines have{enter}been sent. <em>; 올바름</em>
</pre>
						<div>
							또다른 문제는 사람들이 send 명령어에서 <b>모든 것들은</b> 괄호에 싸 넣어야 한다고 생각한다는 것입니다. 그렇지 않습니다. 표에 없으면 괄호가 필요하지 않습니다. 일반적인 기호와 숫자 심지어 어떤 심볼들은 <b>괄호에 싸 넣을 필요가 없습니다</b> (예를 들어 "{}'s."에서 점)<br /> 
							또한, Send 명령어로 1 개 이상의 기호나 숫자 또는 심볼을 단 번에 보낼 수 있습니다. 그래서 1 개의 기호마다 따로따로 수 많은 Send 명령어를 사용할 필요가 없습니다.

<pre>
<em>; 위에 언급한 테이블에 없는 기호나 단어들을 따로 괄호에 싸 넣지 마십시오.</em>
send, {a}       <em>; 잘못됨</em>
send, {b}       <em>; 잘못됨</em>
send, {c}       <em>; 잘못됨</em>
send, {a}{b}{c} <em>; 잘못됨</em>
send, {abc}     <em>; 잘못됨</em>
send, abc       <em>; 올바름</em>
</pre>
						</div>
						<div>
							키를 누르거나 떼려면, 키 이름을 괄호로 둘러 싸고 UP이나 DOWN을 사용합니다.

<pre>
<em>; 다음은 키 하나를 누름과 동시에 또다른 키 (또는 키들)을 누르는 방법입니다.
; 한가지 방법이 작동하지 않으면, 다른 방법을 시도해 보십시오.</em>
send, ^s                     <em>; 둘 다 CTRL+s를 전송합니다.</em>
send, {ctrl down}s{ctrl up}  <em>; 둘 다 CTRL+s를 전송합니다.</em>
Send, {ctrl down}c{ctrl up}
Send, {b down}{b up}
Send, {TAB down}{TAB up}
Send, {Up down}  <em>; 위 화살표 키를 누릅니다.</em>
Sleep, 1000      <em>; 1초 동안 누르고 있습니다.</em>
Send, {Up up}    <em>; 위 화살표 키를 뗍니다.</em>
</pre>
						</div>
					</div>
					<div>
							그러나 이제 궁금하실 겁니다. <i>"정말 긴 send 명령어들을 어떻게 잘 읽을 수 있지?"</i>. 쉽습니다. 계속 섹션을 사용하면 됩니다. 그냥 새 줄에 반괄호를 열고, 내용을 넣고, 마지막으로 반괄호로 줄을 닫습니다. 더 자세한 정보는 <a href="Scripts.htm#continuation">계속 섹션</a>을 참조합니다.
<pre>
send,
(
첫 번째 줄
두 번째 줄
원하는 만큼 줄을 배치할 수 있습니다.
)
</pre>

					</div>
					<p class="note">
						주의: 다양한 형태의 전송 방법이 있습니다. 각자 따로 특별한 특징이 있습니다. 이 중에 하나로 여러분의 필요를 충족하지 못하면, 또다른 종류의 전송 형태를 시도해 봅니다. 그냥 명령어 이름을 "send"에서 "sendPlay" 또는 원하는 아무것이나 시도해 봅니다.<br />
						다음은 텍스트를 전송하는 가장 흔한 방법입니다:<br />
						Send<br />
						SendRaw<br />
						SendInput<br />
						SendPlay<br />
						SendEvent<br />
						각자 어떤 일을 하는지에 관한 더 자세한 정보는 <a href="commands/Send.htm">여기를 읽어 보십시오</a>.
					</p>
					<h3 id="s31">a. 게임 </h3>
					<p>
						<b><span style="color:red;">중요합니다!</span></b><br />
						많은 게임은, 특히 현대의 게임은, 속이는 것을 방지하는 기능이 있습니다. 예를 들어, 이런 종류의 게임으로는 GameGuard, Hackshield, PunkBuster, 등등이 있습니다. 게임이 속임 방지 시스템이 있고 핫키와 핫스트링 그리고 send 명령어가 작동하지 않는다면, 안타까운 일입니다.<br />
						이런 시스템을 우회하는 일은 게임사의 정책을 위반하는 것이며 그러면 여러분은 제명 당할 수 있습니다. 해결책은 대단히 복잡합니다. 어떤 게임에서는 작동의 기회를 높일 수 있는 방법이 있지만, 마법의 <i>"당장 게임에서 작동하라"</i> 버튼은 없습니다. 그래서 포기하기 전에 이 <b>모든 것들을</b> 시도해 보십시오.<br />
					</p>

					<p>
						DirectX와 관련된 문제도 있습니다. 문제가 있고 게임이 DirectX를 사용한다면, 아래의 방법을 시도해 보십시오. 가능하면 창(Windowed 역주: 입력 방식을 전적으로 운영체제에 맡김) 모드에서 시험해 보십시오. 그러면 DirectX 문제가 해결될 지도 모릅니다.<br />
						픽셀이나 이미지 명령어를 사용할 때, DirectX 문제가 더 많이 일어날 수도 있습니다. 어떤 색을 얻으려고 시도하는지에 상관없이 색깔이 검정색으로 바뀔 수 있습니다 (0x000000). 그것은 해결하기 어려운 또다른 문제입니다. 되도록이면 Windowed 모드에서 실행해 보십시오.
					</p>
					<p>
						AutoHotkey를 모든 프로그램에서 작동하시키는 단 한가지 해결책은 없습니다. 시도한 모든 것이 실패한다면, 안타깝게도 AutoHotkey로는 여러분의 요구를 만족시킬 수 없는 것입니다.
					</p>
					<div>
						<hr />
						<a href="FAQ.htm#games">FAQ</a> 페이지에서 인용합니다:<br />
						어떤 게임은 DirectInput를 단독으로 사용합니다. 그 부작용으로, 모든 시뮬레이션 키눌림과 마우스 클릭을 무시해 버립니다. 이를 해결하려면, 다음 중 하나를 (또는 조합해서) 시도해 보십시오:
						<ul>
							<li>다음을 통하여 <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>를 사용합니다: 1) SendPlay 명령어를 사용합니다; 2) <a href="commands/SendMode.htm">SendMode</a>를 사용합니다; 그리고/또는 3) <a href="Hotstrings.htm#SendMode">핫스트링</a> 옵션인 SP를 사용합니다.</li>
							<li><a href="commands/SetKeyDelay.htm">SetKeyDelay</a>를 증가시켜 봅니다. 예를 들어:</li>
							<li><code>SetKeyDelay, 0, 50</code></li>
							<li><code>SetKeyDelay, 150, 150, Play</code></li>
							<li><a href="commands/ControlSend.htm">ControlSend</a>를 시도해 봅니다. 다른 Send 모드가 모두 실패하더라도 이 방법은 작동할 가능성이 있습니다.</li>
						</ul>
					</div>
					<!-- PAGE 3 -->
					<!-- PAGE 3 -->
					<!-- PAGE 3 -->
				</div>
				<div id="running_programs_and_websites" class="section">
					<h2 id="s4">4 - 프로그램 &amp; 웹사이트 실행하기</h2>
					<div>
						<i>Mspaint.exe, Calc.exe, script.ahk</i> 심지어 폴더 같은 프로그램을 실행하려면, <a href="commands/Run.htm">Run</a> 명령어를 사용할 수 있습니다. 심지어 <a href="http://ahkscript.org/">http://ahkscript.org/</a>과 같이 URL에도 사용할 수 있습니다. 원하는 프로그램의 유형을 실행하도록 컴퓨터가 환경이 설정되어 있다면, 아주 간단합니다:

<pre>
<em>; 프로그램을 실행합니다. 주의: 대부분의 프로그램은 전체 파일 경로를 요구합니다.</em>
Run, %A_ProgramFiles%\Some_Program\Program.exe

<em>; 웹 사이트를 실행합니다</em>
Run, http://ahkscript.org
</pre>
					</div>
					<div>
						명령어-줄 매개변수와 CLSID와 같은 다른 고급 특징들도 역시 있습니다.<br />
						더 알고 싶다면 <a href="commands/Run.htm">이 페이지</a>를 참조합니다.
						<br />
						다음에 몇 가지 예를 더 보여줍니다:
<pre>
<em>;  윈도우즈의 표준 프로그램들과 같이 전체 경로가 필요하지 않은 프로그램이 있습니다.</em>
Run, Notepad.exe
Run, MsPaint.exe

<em>; 내장 <a href="Variables.htm#BuiltIn">AHK 변수</a>를 사용하여 "My Documents" 폴더를 엽니다.</em>
Run, %A_MyDocuments%

<em>; 웹 사이트를 실행합니다</em>
Run, http://ahkscript.org
Run, http://www.google.com
</pre>
						<br />
						<p class="note">더 깊은 정보와 더 많은 예제는 다음을 참조합니다:<br /><a href="commands/Run.htm">commands/Run.htm</a>.</p>
					</div>


					<!-- PAGE 4 -->
					<!-- PAGE 4 -->
					<!-- PAGE 4 -->
				</div>
				<div id="commands_vs_functions" class="section">
					<h2 id="s5">5 - 명령어 vs. 함수</h2>
					<div>
						오토핫키는 코드를 만드는데 사용되는 크게 두 가지 유형이 있습니다:<br />
						명령어와 함수가 그것입니다<br />
						<p class="note">도움이 되는 링크:<br />
							모든 명령어 목록: <a href="commands/index.htm">commands/index.htm</a><br />
							모든 내장 함수 목록: <a href="Functions.htm#BuiltIn">Functions.htm#BuiltIn</a></p>
					</div>
					<h3>명령어</h3>
					<p>
						그의 구문을 보면 (그의 겉 모습으로) 명령어인지 아닌지 구분할 수 있습니다. 명령어는 매개변수에 반괄호"()"를 사용하지 않지만 함수는 사용합니다. 그래서 명령어는 다음과 같이 보입니다:<br />
						<code>Command, parameter1, parameter2, parameter3</code><br />

						<br />명령어를 사용할 때, 다른 명령어를 같은 줄에 놓을 수 없습니다 (예외: <a href="commands/IfEqual.htm">ifEqual</a>).<br />
						명령어를 다른 명령어의 매개변수 안에 놓을 수 없습니다.
					</p>

<pre>
Msgbox, Hello Run, Notepad.exe   <em>; 잘못됨</em>
Msgbox, Hello, Run, Notepad.exe  <em>; 잘못됨</em>

Msgbox, Hello      <em>; 올바름</em>
Run, Notepad.exe
</pre>

					명령어는 또 "전통적인 구문"을 사용한다는 점에서 함수와 다릅니다. 그 의미는: <code>변수</code>를 사용할 때, 그 둘레에 %를 사용할 필요가 있다는 뜻입니다. <code>%variable%</code>. 텍스트와 숫자는 "인용 부호" 안에 있을 필요가 없습니다: 예, <code>This is some text</code>. 게다가, 함수와는 다르게 매개변수 안에서 수학식을 사용할 수 없습니다.
					<p class="note">
						매개변수에 수학식을 사용할 수는 있습니다. 강제로 <code>%</code> 기호로 표현식을 만들면 되지만, 이에 관해서는 다루지 않겠습니다.
					</p>
					<h3>함수</h3>
					<div>
						위에 언급한 바와 같이, 함수는 반괄호를 사용하기 때문에 다릅니다. 전형적인 함수의 모습은 다음과 같습니다:<br />
						<code>Function(parameter1, parameter2, parameter3)</code><br /><br />
						함수는 몇 가지 큰 차이점이 있습니다:
						<ol>
							<li>
								그 안에 수학식을 사용할 수 있습니다.<br />
								-- <code>SubStr(37*12, 1, 2)</code><br />
								-- <code>SubStr(A_Hour-12, 2)</code>
							</li>
							<li>
								변수는 퍼센트 기호로 둘러쌀 필요가 없습니다.<br />
								-- <code>SubStr(A_Now, 7, 2)</code>
							</li>
							<li>
								함수는 함수 안에 들어갈 수 있습니다.<br />
								-- <code>SubStr(A_AHKPath, inStr(A_AHKPath, "AutoHotkey"))</code>
							</li>
							<li>
								텍스트는 인용부호로 둘러싸야 합니다.<br />
								-- <code>SubStr("I'm scripting, awesome!", 16)</code>
							</li>
						</ol>

						함수는 명령어와 다르게 보통 값을 돌려줍니다. 명령어는 <i>OutputVar</i> 매개변수가 필요하지만, 함수는 그렇지 않습니다. 변수를 함수의 값에 할당하는 가장 일반적인 방식은 다음과 같습니다:<br />
						<code><span style="color:#ff4400"><b>MyVariable</b></span>:=Function(Parameters)</code>

<pre>
<span style="color:#ff4400"><b>MyVariable</b></span>:=SubStr("I'm scripting, awesome!", 16)
</pre>
					<p class="note">이것만이 유일한 방법은 아닙니다. 그러나 가장 많이 사용되는 방법입니다. <code>MyVariable</code> 변수를 :=의 오른쪽에 있는 함수의 값으로 할당하고 있습니다 (이 경우, <code>SubStr(...)</code>).<br />
					<a href="Functions.htm">More about Functions</a></p>
					</div>
					<div>
						짧게 말해:

<pre>
<em>; 다음은 명령어입니다</em>
Msgbox, 이것은 텍스트입니다.
StringReplace, Output, Input, AutoHotKey, AutoHotkey, ALL
SendInput, 이거 정말 굉장하네요{!}{!}{!}

<em>; 다음은 함수입니다</em>
SubStr("스크립팅을 하고 있어요, 정말 죽여주네요!", 16)
FileExist(VariableContainingPath)
Output:=SubStr("스크립팅을 하고 있어요, 정말 죽여주네요!", 16)
</pre>

					</div>
					<h3 id="s51">a. 코드 블록</h3>
					<p>
						<a href="commands/Block.htm">코드 블록</a>은 활괄호 안에 있는 것들입니다 (<b>{</b> 그리고 <b>}</b>). 한 그룹의 단위로 묶어 주므로 AutoHotkey는 그것을 함께 있어야 하는 하나의 커다란 가족으로 인식합니다. <i>If</i> 그리고 <i>Loop</i>와 함께 가장 많이 사용됩니다. 이것이 없다면, 블록에서 첫 줄만 호출됩니다.<br /><br />
					</p>
					<div>
						다음 코드에서, 두 줄 모두 var가 5와 같은 경우에만 실행됩니다.
<pre>
if (var=5)
{
   MsgBox, var는 %var%와 같습니다!!
   Exitapp
}
</pre><br />

						다음 코드에서, msgbox는 var가 5일 경우에만 보입니다. 코드는 var가 5가 <b>아닐지라도</b> 언제나 스크립트는 종료합니다.

<pre>
if (var=5)
   MsgBox, var는 %var%와 같습니다!!
   Exitapp
</pre><br />

						이것은 첫 번째 줄의 코드와 연관되어 있을 경우에만 완벽하게 좋습니다. 정확하게 위와 똑같지만, 두 번째 줄은 내어 썼으므로 if와 분할되어 있음을 알 수 있습니다.

<pre>
if (var=5)
   MsgBox, var는 %var%와 같습니다!!
MsgBox, 이제 if 서술문 '밖에' 있습니다. 아래에 한 줄만 있기 때문에 {}이 필요하지 않습니다.
</pre>
					</div>
					<!-- PAGE 5 -->
					<!-- PAGE 5 -->
					<!-- PAGE 5 -->
				</div>
				<div id="variables" class="section">
					<h2 id="s6">6 - 변수</h2>
					<p>
						<a href="Variables.htm">변수</a>는 작은 포스트잇 메모지처럼 그 안에 정보를 담습니다. 텍스트나, 숫자, 그리고 함수나 명령어 심지어 수학 방정식으로부터 얻은 데이터를 저장하는 데 사용합니다. 변수가 없다면 프로그래밍 &amp; 스크립팅은 정말 짜증나는 일이 될 것입니다.
					</p>
					<hr />
					<div>
						변수는 몇 가지 방법으로 할당할 수 있습니다. 여기에서는 가장 흔한 방법을 다루겠습니다. 등호 기호(=)에 주목해 주십시오.
						<ol>
							<li><code>variable=text</code><br />
								<div class="indented">가장 간단한 형태로, 전통적인 할당 방식입니다. 그냥 텍스트를 타자해 넣으면 그걸로 끝입니다.</div>
							</li>
							<li><code>variable=%variable2%</code><br />
								<div class="indented">위와 같지만, 변수를 다른 변수 값에 할당하고 있습니다.</div>
							</li>
							<li><code>variable:="text"</code><br />
								<div class="indented">= 앞에 있는 : 때문에 표현식 할당이라고 부릅니다. 텍스트는 "인용부호" 처리해 주어야 합니다.</div>
							</li>
							<li><code>variable:=variable2</code><br />
								<div class="indented">표현식 모드에서 변수는 %가 필요하지 않습니다.</div>
							</li>
							<li><code>variable:=6+8/3*2-sqrt(9)</code><br />
								<div class="indented">표현식 덕분에, 수학 계산을 할 수 있습니다!</div>
							</li>
						</ol>
						숫자 1 &amp; 2 를 결합해 사용할 수 있습니다. <code>var=%var2% some text %var3%.</code><br />
						3, 4 &amp; 5 도 역시 결합할 수 있습니다. <code>var:="The value of 5+ " Variable " is: " 5+Variable</code>
					</div>
					<hr />

					<p class="note">
						앞에 심볼이 있는 모든 등호 기호(<b>=</b>)는 <b>할당 연산자</b>라고 부릅니다. 언제나 표현식입니다. ] 그래서 <code>:=</code> <code>+=</code> <code>-=</code> <code>.=</code> 등등은 언제나 표현식을 사용합니다.
					</p>
					<h3 id="s61">a. 퍼센트를 사용할 때</h3>
					<p>
						변수와 관련하여 오토핫키에서 가장 많이 제기되는 문제중 하나는 언제 퍼센트 기호 (<b>%</b>)를 사용하는가 하는 것입니다. 다음 설명으로 깔끔하게 혼란이 제거되기를 바랍니다.
					</p>
					<div>
						%를 사용해야 할 때:
						<ol>
							<li>명령어를 사용할 때 (위 참조) 퍼센트 기호를 사용합니다.<br />
							-- 매개변수가 OutputVar이거나 InputVar일 경우는 제외합니다.</li>
							<li>전통적인 모드를 사용하는 변수에 변수를 할당할 때 (앞에 심볼이 없는 등호 기호).</li>
						</ol>

						%를 사용하면 <b>안될 때</b>:
						<ol>
							<li>매개변수가 입력변수이거나 출력 변수일 경우, 예를 들어: <code>StringLen, <span style="color:red">OutputVar</span>, <span style="color:red">InputVar</span></code></li>
							<li>할당의 왼쪽에: <code><span style="color:red">Var</span> = 123abc</code></li>
							<li>전통적 (비-표현식) if-서술문의 왼쪽에: <code>If <span style="color:red">Var1</span> &lt; %Var2%</code></li>
							<li>표현식 안에. 예를 들어:
<pre>
If (<span style="color:red">Var1</span> != <span style="color:red">Var2</span>)
   <span style="color:red">Var1</span> := <span style="color:red">Var2</span> + 100
</pre>
							</li>
						</ol>
					</div>



					<h3 id="s62">b. 사용자 입력 얻기</h3>
					<div>
						종종 사용자가 값을 채워 넣어주기를 바랄 경우가 있습니다. 여러 가지 방법이 있지만, 가장 간단한 방법은 <a href="commands/InputBox.htm">Inputbox</a>입니다. 다음은 간단한 예입니다. 사용자에게 두 가지 질문을 하고 그 답을 가지고 무슨 일을 합니다.

<pre>
InputBox, OutputVar, Question 1, 이름이 무엇입니까?
if (OutputVar="Bill")
   MsgBox, 멋진 이름이군요, %OutputVar%.

InputBox, OutputVar2, Question 2, 오토핫키를 좋아합니까?
if (OutputVar2="yes")
   MsgBox, %OutputVar2%`라고 답해 주셔서 고맙습니다. %OutputVar%! 여러분의 훌륭한 친구가 되어 드리겠습니다.
else
   MsgBox, %OutputVar%`, 정말 슬프군요.
</pre>
					</div>

					<h3 id="s63">c. 다른 예제들?</h3>
					<div>
<pre>
<a href="commands/MsgBox.htm">MsgBox</a>, 4, , 계속하시겠습니까?
<a href="commands/IfMsgBox.htm">IfMsgBox</a>, No
   Return                <em>; No이면, 코드를 멈춥니다.</em>
MsgBox 당신은 YES를 눌렀습니다.  <em>; 그렇지 않으면, 사용자는 yes를 고른 것입니다.</em>
</pre>
<pre>
<em>; 퍼센트 기호를 사용해야 할 때와 하지 말아야 할 때는 보여주는 몇 가지 예들</em>
Variable=text                      <em>; 변수에 텍스트를 할당합니다. '전통적인' 할당방식입니다.</em>
VariableNumber:=6                  <em>; 변수에 숫자를 할당합니다. '표현식' 할당입니다.</em>
Variable2=%Variable%               <em>; 변수를 또다른 변수에 할당합니다. 전통적인 할당을 사용합니다.</em>
Variable3:=Variable                <em>; 변수를 또다른 변수에 할당합니다. 표현식 할당입니다.</em>
Variable4.=Variable                <em>; 변수를 또다른 변수의 끝에 추가합니다. 표현식 할당입니다.</em>
Variable5+=VariableNumber          <em>; 변수의 값을 또다른 변수에 추가합니다. 표현식 할당입니다.</em>
Variable5-=VariableNumber          <em>; 변수의 값을 또다른 변수로부터 뺍니다. 표현식 할당입니다.</em>
Variable6:=SubStr(Variable, 2, 2)  <em>; 함수 안의 변수입니다. 이것은 언제나 표현식 할당입니다.</em>
Variable7=%Variable% Text          <em>; 변수를 또다른 변수에 약간의 텍스트오 함께 할당합니다. 전통적인 할당을 사용합니다.</em>
Variable8:=Variable " Text"        <em>; 변수를 또다른 변수에 약간의 텍스트와 함께 할당합니다. 표현식 할당을 사용합니다.</em>
MsgBox, %Variable%                 <em>; 명령어 안의 변수입니다. </em>
StringSplit, Variable, Variable, x <em>; InputVar와 OutputVar를 사용하는 명령어 안의 변수입니다.</em>
if (VariableNumber=6)              <em>; IF에 괄호가 있을 때마다, 그것은 표현식입니다. 그래서  %를 사용하지 않습니다.</em>
If (Variable != VariableNumber)    <em>; IF에 괄호가 있을 때마다, 그것은 표현식입니다. 그래서  %를 사용하지 않습니다.</em>
if VariableNumber=6                <em>; 괄호가 없으면, 그 if는 전통적입니다. 그렇지만, '오른쪽에 있는' 변수만 %가 필요합니다. </em>
If Var1 &lt; %Var2%                   <em>; 괄호가 없으면, 그 if는 전통적입니다. 그렇지만, '오른쪽에 있는' 변수만 %가 필요합니다. </em>
</pre>
					</div>
				<!-- PAGE 6 -->
				<!-- PAGE 6 -->
				<!-- PAGE 6 -->
				</div>
				<div id="objects" class="section">
					<h2 id="s7">7 - 객체</h2>
					<p>
						<a href="Objects.htm">객체</a>는 좀 더 효율적으로 사용하기 위해 데이터를 조직하는 방법입니다. 종종 객체는 배열이라고 지칭되기도 합니다. 그러나 모든 배열은 그냥 객체일 뿐이라는 사실을 인식하는 것이 중요합니다. 객체를 어디에 사용하려고 하는가에 따라 다르게 부르기도 하지만, 그 모든 객체는 같은 것입니다.
					</p>
					<hr />
					객체는 기본적으로 변수 집합입니다. 변수 이름은 "키"라고 알려져 있고, 그 변수의 내용은 "값"이라고 합니다.<br />
					<br />
					객체를 <i>배열</i> 또는 <i>인덱스 배열</i>이라고 부른다면, 보통 모든 키가 1부터 시작해서 연속적으로 증가하는 숫자라는 뜻입니다.<br />
					객체를 <i>연관 배열</i>이라고 부른다면, 키가 문자열(텍스트)이거나 아니면 비-연속 숫자들이라는 뜻입니다. 종종, 그 둘은 혼용됩니다. 연속 숫자도 마찬가지입니다!<br />
					<br />
					키나 값이 무엇인지는 제한이 없습니다. 심지어 다른 배열이 될 수도 있습니다!
					<br />
					값이 또 배열이면, 이것을 <i>내포 배열</i>이라고 부릅니다. 이에 관해서는 나중에 설명드리겠습니다.
					<hr />
					<div>
						객체를 사용하고 싶은 이유가 많이 있습니다. 예를 들면:<br />
						<ol>
							<li>번호 리스트를 사용하고 싶습니다. 예를 들어, 장보기 목록 같은 경우이겠지요 (이것은 인덱스 배열이라고 지칭됩니다)</li>
							<li>격자를 표현하고 싶습니다. 아마도 보드 게임에 사용하실 생각이겠지요 (이것은 내포 객체로 만들 수 있습니다)</li>
							<li>각각에 이름이 있는 물품 목록이 있습니다. 예를 들어 과일의 특징에 맞추어 이름을 적용할 수 있습니다 (이것은 연관 배열이라고 부릅니다)</li>
						</ol>
					</div>
					<h3 id="s71">a. 객체 만들기</h3>
					<div>
						객체를 만들려면 몇 가지 방법이 있습니다. 가장 흔한 방법은 아래와 같습니다.<br />
						<ol>
							<li><code>MyObject := ["one", "two", "three", 17]</code><br />
								<div class="indented" >
									각괄호 구문입니다. 이것으로 "인덱스 배열"을 만들 수 있습니다. 인덱스 배열은 항목 리스트를 1부터 쭈욱 나열해 보여주는 객체입니다. 이 예제에서, 값 <code>"one"</code>은 객체 키<code>1</code>에 저장됩니다 (인덱스 1), 그리고 값 <code>17</code>은 객체 키 <code>4</code>에 저장됩니다 (인덱스 4).
								</div>
							</li>
							<li><code>Banana := {"Shape": "Elongated", "Color": "Yellow", "Taste": "Delicious", "Price": 3}</code><br />
								<div class="indented" >
									활괄호 구문입니다. 이것으로 "연관 배열"을 정의할 수 있습니다. 연관 배열은 각 항목에 이름이 있는 데이터 집합입니다. 이 예제에서 값 <code>"yellow"</code>는 객체 키 <code>"color"</code>에 저장됩니다. 또, 값 <code>3</code>은 객체 키 <code>"Price"</code>에 저장됩니다.
								</div>
							</li>
							<li><code>MyObject := Array("one", "two", "three", 17)</code><br />
								<div class="indented" >
									"배열" 생성 함수입니다. 이 함수는 각괄호 구문과 동등하지만, 함수에 싸여 있습니다.
								</div>
							</li>
							<li><code>Banana := Object("Shape", "Elongated", "Color", "Yellow", "Taste", "Delicious", "Price", 3)</code><br />
								<div class="indented" >
									객체 생성 함수입니다. 이 함수는 활괄호와 동등하지만, 함수에 싸여 있습니다.
								</div>
							</li>
						</ol>

						이 모든 정의가 같은 것(객체)을 만들어 낸다는 것을 기억하는 것이 중요합니다. 단지 키가 다를 뿐입니다.

					</div>

					<h3 id="s72">b. 객체 사용하기</h3>
					객체를 사용하는 방법이 여러가지가 있습니다. 값을 열람하기, 값을 설정하기, 값을 추가하기, 등등이 포함됩니다.
					<div>
						<br />
						<strong>값을 설정하려면:</strong>
						<div class="indented">
							객체에 값을 설정하는 일은 변수에 값을 설정하는 것 만큼이나 단순합니다.<br />
							그냥 (열람 섹션에서 보시듯이) 표현식 할당 심볼 <code>:=</code>의 왼쪽에. 각괄호나 점 표기법을 배치하기만 하면 됩니다.<br />
							<br />
							예를 들어:<br />
							<code>Banana.Consistency := "Mushy"</code><br />
							<code>Banana["Pickled"] := True <em>; 이 바나나는 절인 바나나입니다. 우웩.</em></code>
						</div>
						<br />
						<strong>값을 열람하려면:</strong>
						<ol>
							<li><code>Value := Banana["Color"]</code><br />
								<div class="indented" >각괄호 표기법입니다. 표현식을 키로 사용하여 객체로부터 값을 얻을 수 있습니다. 이 경우, 간단한 표현식 <code>"Color"</code>를 사용했습니다. 이것이 (당연히) 키 <code>Color</code>입니다. 메시지 박스에 "Yellow"라는 단어가 나타날 텐데, 이것은 <a href="#s71">앞 섹션</a>에서 키 <code>Color</code>에 할당했던 값입니다.
								</div>
							</li>
							<li><code>Value := Banana.Color</code><br />
								<div class="indented" >
									점 표기법입니다. 이 방법은 기호 문자열만 키로 사용할 수 있습니다. 변수는 키로 사용할 수 없습니다.
								</div>
							</li>
						</ol>
						<br />
						<strong>새 키와 값을 추가하려면:</strong>
						<ol>
							<li>직접적으로 값을 추가하기
								<div class="indented" >
									직접적으로 키와 값을 추가하려면, 그냥 존재하지 않는 키를 설정하기만 하면 됩니다. 예를 들어:<br />
									<code>MyObject.NewKey := "Shiny"</code><br />
									<code>MyObject["NewerKey"] := 3.1415</code>
								</div>
							</li>
							<li>값을 삽입하기
								<div class="indented" >
									객체에 키와 값을 추가하는 또다른 방법은 다음 방법 중 하나를 사용합니다.<br />
									<br />
									<code>MyObject.InsertAt(Index, Value1, Value2, Value3...)</code><br />
									<i>Index</i>는 정수 키입니다. 이렇게 하면 삽입할 때마다 이 값보다 더 높은 모든 키들이 위로 이동합니다. 틈이 있어도 이동합니다. (예를 들어, 키가 1부터 100 까지만 존재하고, 값을 키 50에 삽입하면, 100은 101로 이동합니다).<br />
									<br />
									<code>MyObject.Push(Value1, Value2, Value3...)</code><br />
									이렇게 하면 <i>MyObject</i>배열의 끝에 값이 "추가됩니다". 다른 말로 해서, 값을 가장 높은 정수키보다 하나 더 큰 위치에 삽입합니다.<br />
								</div>
							</li>
						</ol>
						<br />
						<strong>키와 값을 삭제하려면:</strong>
						<ol>
							<li>값을 제거하기.<br />
								<div class="indented" >
									가장 쉽게 값을 제거하는 방법은 그냥 없애 버리는 것입니다. 그냥 ""로 설정하면 됩니다. <i>빈 문자열</i>이라고 부릅니다. 이것으로는 키가 제거되지 않지만, 값이 설정되지 않은 값과 동일하게 보이도록 만듭니다.<br />
									<code>HasKey</code> 메쏘드를 사용하면 키가 여전히 존재한다고 알려줄 수 있습니다. 그러면 여전히 <code>for</code> 회돌이에 나타날 것입니다. (회돌이에 관해서는 나중에 자세히 말씀드리겠습니다)
								</div>
							</li>
							<li>키를 제거하기<br />
								<div class="indented" >
									키와 값을 제거하는 몇 가지 다른 방법이 있습니다:<i></i> 
								</div>
								<ol>
									<li><code>RemovedValue := MyObject.Delete(AnyKey)</code>
										<div class="indented">
											<code>MyObject[AnyKey]</code>의 이전 값은 <i>RemovedValue</i>에 저장됩니다.
										</div>
									</li>
									<li><code>NumberOfRemovedKeys := MyObject.Delete(FirstKey, LastKey)</code>
										<div class="indented">
											이런식으로 제거하면 FirstKey와 LastKey 사이의 숫자/정수 또는 문자열 키를 몽땅 제거할 수 있습니다.<br />
											<br />
											돌려받는 값은 제거된 키의 개수입니다. 이것은 키 사이에 틈이 있을 때 유용합니다 (예를 들어, 키를 1부터 4까지 지정했지만, 키 2는 존재하지 않는다면, NumberOfRemovedKeys가 3으로 설정되고 세 개의 키만 제거됩니다)
										</div>
									</li>
									<li><code>MyObject.Pop()</code>
										<div class="indented">
											가장 높은 정수 키가 제거되고, 그 값을 돌려줍니다. 영향을 받을 더 높은 키는 전혀 없습니다.
										</div>
									</li>
									<li><code>RemovedValue := MyObject.RemoveAt(Index)</code><br />
									<code>NumberOfRemovedKeys := MyObject.RemoveAt(Index, Length)</code>
										<div class="indented">
											<i>Index</i>부터 <i>Index + Length - 1</i> (포함e)까지 모든 키들이 삭제됩니다. <i>Length</i>를 생략하면 1이 기본값입니다. 키를 제거한 다음 이 보다 높은 모든 숫자/정수 키들을 위로 올려서 틈을 메웁니다. 그래서 값이 <i>Index + Length</i>에 있었다면 이제 그 값은 <i>Index</i>에 있습니다. 이 방식은 여러 값이 지정된 InsertAt 메쏘드의 작동 방식과 비슷합니다.
										</div>
									</li>
								</ol>
							</li>
						</ol>
					</div>

					<!-- PAGE 7 -->
					<!-- PAGE 7 -->
					<!-- PAGE 7 -->
				</div>
				<div id="helpful_goodies" class="section">
					<h2 id="s8">8 - 기타 등등 도움</h2>
					<p>
						이제 여행의 막바지에 다다랐습니다. 모쪼록 무언가를 배웠기를 바랍니다. 그러나 끝내기 전에, 여러분이 꼭 알아야 한다고 생각하는 다른 것들을 여기에 제시합니다. 즐거운 시간 되시기를!
					</p>
					<h3 id="s81">a. 신비한 []</h3>
					<div>
						문서를 통하여, 다음 두 심볼이 보일 겁니다 (<b>[</b> 그리고 <b>]</b>). 거의 모든 페이지 상단에 노란색 구문 박스 안에서 코드를 둘러 싸고 있지요. 이 각활호 안에 든 모든 것들은 <b><i>선택적</i>입니다</b>. 그 안에 든 것들은 필요 없으면 생략해도 된다는 뜻입니다. 코드를 작성할 때, [] 는 <b>절대로 타자하지 않습니다</b>.<br /><br />
						<a href="commands/ControlGetText.htm">ControlGetText</a> 페이지에서 이것을 보실 수 있습니다 (색깔 없이):<br />
						<code>ControlGetText, OutputVar <span style="color:red"><b>[</b></span><span style="color:navy">, Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span><span style="color:red"><b>]</b></span></code><br /><br />
						그래서 그냥 원하다면 이렇게 해도 됩니다:<br />
						<code>ControlGetText, OutputVar</code><br /><br />

						또는 좀 더 세밀하게 이렇게 해도 됩니다:<br />
						<code>ControlGetText, OutputVar, Control, WinTitle</code><br /><br />

						ExcludeTitle를 사용하고 싶지만 WinText나 WinTitle은 채우고 싶지 않다면? 간단합니다!<br />
						<code>ControlGetText, OutputVar, Control,,, ExcludeTitle</code><br /><br />
						<p class="Note">
							매개변수는 무시할 수 없습니다. 그냥 빈 채로 놓아 두는 것은 괜찮습니다.<br />
							"WinTitle, WinText"를 무시해 버리면, 다음과 같이 보일 것이고 문제를 일으킵니다:<br />
							<code>ControlGetText, OutputVar, Control, ExcludeTitle</code><br />
							다음은 유효합니다.<br />
							<code>ControlGetText, OutputVar, Control,,, ExcludeTitle</code>
						</p>
					</div>
					<h3 id="s82">b. AHK 버전 알아내기</h3>
					<div>
						다음 코드를 실행하면 AHK 버전을 볼 수 있습니다:
<pre>
MsgBox, %A_AHKVersion%
</pre>

						또는 "AutoHotkey 도움말 파일" 또는 "AutoHotkey.chm"을 시작 메뉴나 설치 디렉토리에서 찾아 보십시오.
					</div>

					<h3 id="s83">c. 시행 착오</h3>
					<p>
						시행 착오는 배움에서 아주 흔하고 효과적인 방법입니다. 모든 것들에 도움을 구하는 대신에, 좀 혼자만의 시간을 가지고 (몇 시간이나 몇 일 동안) 작동시켜 보려고 시도하는 것이 더 빨리 배우는데 도움이 되실 겁니다.
					</p>
					<p>
						뭔가를 시도해 보고 에러를 맞이해 보면서, 그 에러를 연구합니다. 다음 코드를 수정한 다음, 다시 시도해 봅니다. 여전히 에러를 맞이한다면, 코드를 좀 더 수정합니다. 코드가 더 이상 실패하지 않을 때까지 계속 시도와 실패를 거듭합니다. 문서를 읽고, 에러를 읽고 무엇이 작동하고 무엇이 작동하지 않는지 배우면서 많은 것을 배우실 겁니다. <span class="InlineCode">시도, 실패, 시도, 실패,시도, 실패, 시도, 실패, <b>성공!</b></span>
					</p>
					<p>
						이 방법으로 수 많은 "프로들이" 배웠습니다. 그러나 도움을 구하는 데 두려워하지 마십시오. 면박당하지 않습니다. 배우는 데는 시간이 필요하며, 여러분이 만나는 "프로"가 단 몇 시간 몇 일 만에 배워서 마스터가 된 것이 아닙니다.
					</p>
					<p class="Note">"처음에는 성공하지 못하더라도, 다시 시도, 또 시도, 시도하라." - Hickson, William E.</p>
					<h3 id="s84">d. 들여쓰기</h3>
					<div>
						들여쓰기는 아주 중요합니다! 코드는 완벽하게 실행되지만, 코드를 읽을 때 심각한 두통거리가 될 것입니다. 작은 코드라면 (25 줄 이하) 아마도 들여쓰기가 없더라도 읽는데 문제가 없겠지만, 조만간 어려워질 겁니다. 되도록이면 빠리 들여쓰기를 배우는 편이 제일 좋습니다.<br />
						들여쓰기는 특별한 스타일이 없지만, 일관성을 유지하는 것이 제일 좋습니다.<br />
						"<b>들여쓰기란 무엇인가?</b>" 아마도 이렇게 묻고 싶겠지요? 무엇이 무엇에 속해 있는지 보기 위해 코드를 간격을 두어 쪼개는 것입니다. 사람들은 한 레벨 당 보통 3 이나 4 개의 공백 또는 한 개의 탭을 사용합니다.<br /><br />
						들여쓰기 없음:

<pre>
if (car="old")
{
msgbox, 자동차가 정말 오래되었습니다
if (wheels="flat")
{
msgbox, 이 자동차는 운전하기에 안전하지 않습니다.
Return
}
else
{
msgbox, 주의하세요! 이 구형 자동차는 운전하기에 위험합니다.
}
}
else
{
msgbox, 와우`, 정말 멋진 자동차를 가지셨군요.
}
</pre>

						들여쓰기함:

<pre>
if (car="old")
{
   msgbox, 자동차가 정말 오래되었습니다
   if (wheels="flat")
   {
      msgbox, 이 자동차는 운전하기에 안전하지 않습니다.
      Return
   }
   else
   {
      msgbox, 주의하세요! 이 구형 자동차는 운전하기에 위험합니다.
   }
}
else
{
   msgbox, 와우`, 정말 멋진 자동차를 가지셨군요.
}
</pre>
						Wiki에 다양한 스타일과 예제가 있습니다. 여러분이 읽기에 가장 쉽다고 생각하는 스타일을 골라 들여쓰기 하는 법을 배우십시오.<br />
						<a href="http://en.wikipedia.org/wiki/Indent_style">http://en.wikipedia.org/wiki/Indent_style</a>
					</div>

					<h3 id="s85">e. 도움 요청하기</h3>
					물어보기 전에, 먼저 스스로 연구해 봅니다. 또는 스스로 코드해 봅니다. 결과가 만족스럽지 못하다면, 아래를 읽어 보십시오.
					<ul>
						<li>두려워 하지 말고 도움을 청합니다. 가장 똑똑한 사람들조차 다른 이에게 도움을 구합니다.</li>
						<li>무엇을 시도하고 있는지 두려워 하지 말고 보여줍니다. 심지어 말도 안되는 것이라고 생각할지라도 말입니다.</li>
						<li>시도해 본 것들을 모두 게시합니다.</li>
						<li><i>여러분을 제외하고</i> 누구든 멍청해서 아무것도 모른다고 생각하십시오. 되도록이면 많은 정보를 주어서 바보들에게 무엇을 하려고 하는지 일깨워 주십시오. 우리를 돕는 것이 바로 여러분을 돕는 것입니다.</li>
						<li>인내 하십시오.</li>
						<li>정중 하십시오.</li>
						<li>다음을 여십시오.</li>
						<li>친절 하십시오.</li>
						<li>즐기십시오</li>
					</ul>

					바로 답을 얻지 못하더라도, 적어도 하루 (24 시간)은 기다린 후에 도움을 더 요청합니다. 우리도 기꺼이 도와주고 싶지만, 시간이 나야 도와줄 수 있습니다. 일을 하고 있을 수도 있고, 잠자거나, 게임하거나, 가족과 함께이거나 아니면 그냥 바쁠 수 있습니다.<br />
					도움을 기다리는 동안, 스스로 시도하면서 배울 수 있습니다. 도움없이 스스로 뭔가를 이루면 큰 보람을 느끼실 것입니다.

					<h3 id="s86">f. 기타 링크</h3>
					<p>
						<a href="FAQ.htm">자주 묻는 질문(FAQ)</a>
					</p>
				</div>
			</div>
		</div>
	</body>
</html>
