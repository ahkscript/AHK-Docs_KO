<html>
<head>
<title>Objects</title>
<meta http-equiv="Content-Type" content="text/html; charset=euc-kr">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<style>
ul.list_of_p p { margin: 0.5em 0; }
ul.list_of_p li { margin: 1em 0; }
</style>
</head>
<body>

<h1>객체</h1>

<p>오토핫키에서 객체(<i>object</i>)는 추상 데이터 유형으로서 세 가지 기본 기능을 제공합니다:</p>
<ul>
  <li>GET 값을 얻는다.</li>
  <li>SET 값을 설정한다.</li>
  <li>CALL 메쏘드를 호출한다 (다시 말해, 메쏘드란 대상 객체를 가지고 일을 하는 함수입니다).</li>
</ul>
<p>객체 <i>참조</i>는 특정 객체를 가리키는 포인터 또는 핸들("handle")입니다. 문자열과 숫자처럼, 객체 참조는 변수에 저장하고 함수로부터 반환하며 객체 안에 저장할 수 있습니다. <code>x := y</code> 처럼 참조를 한 변수에서 다른 변수로 복사하고 나면, 두 변수 모두 같은 객체를 가리킵니다.</p>

<p><b>IsObject</b>를 사용하면 값이 객체인지 판별할 수 있습니다:</p>
<pre>Result := IsObject(<i>expression</i>)</pre>

<p>객체의 종류는 다음과 같습니다:</p>
<ul>
  <li><a href="objects/Object.htm"><b>Object</b></a> - 스크립트 가능한 연관배열.</li>
  <li><a href="objects/File.htm">File</a> - 파일 입/출력에 인터페이스를 제공합니다.</li>
  <li><a href="objects/Functor.htm">Function 객체</a> - <a href="objects/Func.htm">Func</a>, <a href="objects/Functor.htm#BoundFunc">BoundFunc</a> 또는 <a href="objects/Functor.htm#User-Defined">사용자-정의</a>.</li>
  <li><a href="commands/ComObjCreate.htm">ComObject</a> - IDispatch 인터페이스를 포장합니다 (COM 또는 "자동화" 객체).</li>
</ul>

<h2>목차</h2>
<ul>
  <li><a href="#Usage">기본 사용법</a> - <a href="#Usage_Simple_Arrays">단순 배열</a>, <a href="#Usage_Associative_Arrays">연관 배열</a>, <a href="#Usage_Objects">객체</a>, <a href="#Usage_Freeing_Objects">객체 풀어주기</a>, <a href="#Usage_Remarks">논평</a></li>
  <li><a href="#Extended_Usage">확장 사용법</a> - <a href="#Function_References">함수 참조</a>, <a href="#Usage_Arrays_of_Arrays">배열의 배열</a>, <a href="#Usage_Arrays_of_Functions">함수 배열</a></li>
  <li><a href="#Custom_Objects">맞춤 객체</a> - <a href="#Custom_Prototypes">프로토타입</a>, <a href="#Custom_Classes">클래스</a>, <a href="#Custom_NewDelete">구성과 파괴</a>, <a href="#Meta_Functions">메타-함수</a></li>
  <li><a href="#Default_Base_Object">기본 베이스 객체</a> - <a href="#Automatic_Var_Init">자동 변수 초기화</a>, <a href="#Pseudo_Properties">의사-특성</a>, <a href="#Default__Warn">디버깅</a></li>
  <li><a href="#Implementation">구현</a> - <a href="#Reference_Counting">참조횟수-세기</a>, <a href="#Implementation_Pointers">객체를 가리키는 포인터</a></li>
</ul>

<a name="Syntax"></a><h2 id="Usage">기본 사용법</h2>

<h3 id="Usage_Simple_Arrays">단순한 배열</h3>
<p>배열을 만듭니다:</p>
<pre>Array := [Item1, Item2, ..., ItemN]
Array := Array(Item1, Item2, ..., ItemN)</pre>
<p>항목을 열람합니다:</p>
<pre>Value := Array[Index]</pre>
<p>항목을 할당합니다:</p>
<pre>Array[Index] := Value</pre>
<p>주어진 인덱스에 항목(들)을 삽입합니다:</p>
<pre>Array.<a href="objects/Object.htm#InsertAt">InsertAt</a>(Index, Value, Value2, ...)</pre>
<p>항목(들)을 추가합니다:</p>
<pre>Array.<a href="objects/Object.htm#Push">Push</a>(Value, Value2, ...)</pre>
<p>항목을 제거합니다:</p>
<pre>RemovedValue := Array.<a href="objects/Object.htm#RemoveAt">RemoveAt</a>(Index)</pre>
<p>마지막 항목을 제거합니다:</p>
<pre>RemovedValue := Array.<a href="objects/Object.htm#Pop">Pop</a>()</pre>
<p>배열이 비어 있지 않으면, <a href="objects/Object.htm#MinMaxIndex">MinIndex</a>와 <a href="objects/Object.htm#MinMaxIndex">MaxIndex</a>/<a href="objects/Object.htm#Length">Length</a>는 배열에서 현재 사용중인 가장 낮은 인덱스와 가장 높은 인덱스를 돌려줍니다. 가장 낮은 인덱스는 거의 대부분 1이므로, MaxIndex는 보통 항목의 개수를 돌려줍니다. 그렇지만, 정수 키가 없다면, MaxIndex는 빈 문자열을 돌려줍니다. 반면에 Length는 0을 돌려줍니다. 배열의 내용은 인덱스 또는  For-loop로 회돌이할 수 있습니다. 예를 들어:</p>
<pre>array := ["one", "two", "three"]

<em>; 1부터 배열의 끝까지 반복합니다:</em>
<a href="commands/Loop.htm">Loop</a> % array.Length()
    MsgBox % array[A_Index]

<em>; 배열의 내용을 열거합니다:</em>
<a href="commands/For.htm">For</a> index, value in array
    MsgBox % "Item " index " is '" value "'"
</pre>

<a name="Arrays"></a><h3 id="Usage_Associative_Arrays">연관 배열</h3>
<p>
연관 배열은 유일한 키 집단과 유일한 값 집단을 포함하는 객체입니다. 각 키는 각 값에 연관되어 있습니다. 키는 문자열이나 정수또는 객체가 될 수 있는 반면, 값은 어떤 유형도 될 수 있습니다. 연관 배열을 다음과 같이 만들 수 있습니다:</p>
<pre>Array := {KeyA: ValueA, KeyB: ValueB, ..., KeyZ: ValueZ}
Array := Object("KeyA", ValueA, "KeyB", ValueB, ..., "KeyZ", ValueZ)</pre>
<p>
<code>{key:value}</code> 표기법을 사용하면, 오직 단어 문자로만 구성된 키에는 인용부호를 생략해도 됩니다. 어떤 표현식도 키로 사용할 수는 있지만, 변수를 키로 사용하려면, 반드시 괄호로 둘러싸야 합니다. 예를 들어, <code>{(KeyVar): Value}</code>과 <code>{GetKey(): Value}</code>는 모두 유효합니다.</p>

<p>항목을 열람합니다:</p>
<pre>Value := Array[Key]</pre>

<p>항목을 할당합니다:</p>
<pre>Array[Key] := Value</pre>

<p>항목을 제거합니다:</p>
<pre>RemovedValue := Array.<a href="objects/Object.htm#Delete">Delete</a>(Key)</pre>

<p>항목을 열거합니다:</p>

<pre>array := {ten: 10, twenty: 20, thirty: 30}
<a href="commands/For.htm">For</a> key, value in array
    MsgBox %key% = %value%</pre>
<p>
연관 배열은 중간 중간 비워서 만들 수 있습니다 - 즉, <code>{1:"a",1000:"b"}</code>는 오직 두 개의 키-값 쌍만 들어 있습니다. 1000개가 아닙니다.</p>
<p id="same_thing">AutoHotkey v1.x에서 단순 배열과 연관 배열은 같은 것입니다. 그렇지만 <code>[]</code>를 단순 배열로 간주하는 것이 그의 목적을 명확하게 보여주는 데 도움이 되고, 미래 버전의 오토핫키에 스크립트가 작동할 가능성을 높여줍니다. 앞으로는 단순 배열과 연관 배열 사이에 차이가 있을 수 있습니다.</p>

<h3 id="Usage_Objects">객체</h3>
<p>
특성을 열람합니다:</p>

<pre>Value := Object.Property</pre>
<p>
특성을 설정합니다:</p>

<pre>Object.Property := Value</pre>
<p>
메쏘드를 호출합니다:</p>

<pre>ReturnValue := Object.Method(Parameters)</pre>
<p>
계산한 메쏘드 이름으로 메쏘드를 호출합니다:</p>

<pre>ReturnValue := Object[MethodName](Parameters)</pre>
<p>
COM 객체의 특성과 사용자-정의 객체는 매개변수를 받을 수 있습니다:</p>

<pre>Value := Object.Property[Parameters]
Object.Property[Parameters] := Value</pre>
<p>
<strong>관련 항목:</strong> <a href="objects/Object.htm">Object</a>, <a href="objects/File.htm">File Object</a>, <a href="objects/Func.htm">Func Object</a>, <a href="commands/ComObjCreate.htm">COM object</a></p>

<p><b>알려진 한계:</b></p>
<ul>
<li>현재 <code><span class="dull">x</span>.y[z]<span class="dull">()</span></code>는 <code><span class="dull">x</span>["y", z]<span class="dull">()</span></code>으로 간주되는데, 이는 지원하지 않습니다. 임시 해결책으로, <code><span class="red">(</span><span class="dull">x.y</span><span class="red">)</span>[z]()</code>는 먼저 <code>x.y</code>를 평가한 다음, 그 결과를 메쏘드 호출의 목표로 사용합니다. <code>x.y[z].Call()</code>에는 이 한계가 없다는 것을 주목하십시오. 왜냐하면 <code>(x.y[z]).Call()</code>과 똑같이 평가되기 때문입니다.</li></ul>

<h3 id="Usage_Freeing_Objects">객체 풀어주기</h3>
<p>
스크립트는 명시적으로 객체를 풀어주지 않습니다. 객체를 가리키는 마지막 참조가 사라지면, 그 객체는 자동으로 해제됩니다. 변수에 저장된 참조는 그 변수가 다른 값에 할당되면 자동으로 해제됩니다. 예를 들어:</p>
<pre>obj := {}  <em>; 객체를 생성합니다.</em>
obj := ""  <em>; 마지막 참조를 해제합니다. 그러므로 객체가 해방됩니다.</em></pre>
<p>
비슷하게, 또다른 객체의 필드에 저장된 참조점은 그 필드가 또다른 값에 할당되거나 그 객체로부터 제거될 때 자동으로 풀어집니다. 이것은 배열에도 적용됩니다. 배열은 실제로 객체입니다.</p>
<pre>arr := [{}]  <em>; 객체를 담고 있는 배열을 생성합니다.</em>
arr[1] := {}  <em>; 두 번째 객체를 생성합니다. 묵시적으로 첫 객체를 풀어주고 있습니다.</em>
arr.Remove(1)  <em>; 두 번째 객체를 제거하고 풀어줍니다.</em></pre>
<p id="Circular_References">한 객체를 가리키는 모든 참조가 해제되어야 비로서 그 객체가 해방될 수 있습니다. 그래서 순환 참조가 있는 객체는 자동으로 풀어지지 않습니다. 예를 들면, <code>x.child</code>가 <code>y</code>를 가리키고 <code>y.parent</code>가 <code>x</code>를 가리킨다면, <code>x</code>와 <code>y</code>를 소거하는 것만으로는 충분하지 않습니다. 왜냐하면 부모 객체에 여전히 자손을 가리키는 참조가 들어있고 그 반대도 마찬가지이기 때문입니다. 이 문제를 해결하려면, 순환 참조를 제거해야 합니다.</p>
<pre>
x := {}, y := {}             <em>; 객체를 두 개 생성합니다.</em>
x.child := y, y.parent := x  <em>; 순환 참조를 생성합니다.</em>

y.parent := ""               <em>; 순환 참조를 먼저 제거해야 객체가 해방될 수 있습니다.</em>
x := "", y := ""             <em>; 위의 줄이 없다면, 이 줄로는 객체를 풀어줄 수 없습니다.</em>
</pre>
<p>더 자세한 내용과 고급 사용법은 <a href="#Reference_Counting">참조 횟수 세기</a>를 보십시오.</p>

<h3 id="Usage_Remarks">논평</h3>

<h4>구문</h4>
<p>모든 유형의 객체는 배열 구문(각괄호)과 객체 구문 (점)을 지원합니다.</p>
<p>게다가, 객체 참조는 표현식에 사용할 수 있습니다:</p>
<ul>
  <li>객체 참조를 <code>= == != &lt;&gt;</code>중의 하나를 사용하여 다른 값과 비교할 때, 두 값 모두 같은 객체를 가리키는 참조점일 경우에만 같다고 간주됩니다.</li>
  <li><code>if obj</code>, <code>!obj</code> 또는 <code>obj ? x : y</code>에서와 같이 불리언 값이 요구될 때, 객체는 언제나 참(<i>true</i>)으로 간주됩니다.</li>
  <li>객체의 주소는 <code>&amp;</code> 주소 연산자를 사용하여 열람할 수 있습니다. 생성 시점부터 마지막 참조가 <a href="#Refs">해제</a>될 때까지 그 객체를 유일하게 식별합니다.</li>
</ul>
<p>객체가 예상치 못한 문맥에서 사용중이면, 그 객체는 빈 문자열로 취급됩니다. 예를 들어, <code>MsgBox %object%</code> 는 빈 MsgBox를 보여주고 <code>object + 1</code>는 빈 문자열을 산출합니다. 이 행위는 바뀔 수 있으므로 여기에 의존하면 안됩니다.</p>
<p>메쏘드-호출 다음에 곧바로 할당 연산자가 오면, 매개변수로 특성을 할당하는 것과 동등합니다. 예를 들어, 다음은 서로 동등합니다:</p>
<pre>obj.item(x) := y
obj.item[x] := y</pre>
<p id="cassign"><code>x.y += 1</code>와 <code>--arr[1]</code>같은 복합 서술문을 지원합니다.</p>
<p><span class="ver">[v1.1.20+]:</span> 특성을 설정하거나 획득할 때 매개변수를 생략할 수 있습니다. 예를 들어, <code>x[,2]</code>. 스크립트는 이를 이용하여 <a href="#Custom_Classes_property">특성</a>과 <a href="#Meta_Functions">메타-함수</a>의  매개변수에 기본 값들을 정의할 수 있습니다. 
메쏘드 이름도 <code>x[](a)</code>처럼 완전히 생략 가능합니다. 스크립트는 이를 이용하여 __Call <a href="#Meta_Functions">메타-함수</a>의 매개변수에 기본 값을 정의할 수 있습니다. 왜냐하면 그렇지 않으면 값이 제공되지 않기 때문입니다.

이것은 <code>x.(a)</code>와 다르며, <code>x[""](a)</code>과 동등한 것에 주목하십시오. COM 객체를 호출할 때 특성이나 메쏘드 이름이 생략되면, 그의 "기본 멤버"가 호출됩니다.</p>

<h4>키</h4>
<p>
<code>[]</code>, <code>{}</code> 또는 <code>new</code> 연산자로 생성된 객체에 어느 값을 사용할 수 있는지는 약간 제한이 있습니다 :</p>
<ul>
  <li>정수 키는 고유의 부호있는 정수 유형으로 저장됩니다. 오토핫키 32-비트 버전은  -2147483648 부터 2147483647까지 범위의 정수키를 지원합니다. 오토핫키는  64-비트 정수를 지원합니다. 그러나 오직 오토핫키 64-비트 버전만 객체에 완전한 범위의 정수를 키로 지원합니다.</li>
  <li>위에 언급한 결과로, 정수 값의 문자열 형식은 유지되지 않습니다. 예를 들어, <code>x[0x10]</code>, <code>x[16]</code> 그리고 <code>x[00016]</code>는 동등합니다. 이것은 또 십진 소수점이 없는 숫치 문자열에도 적용됩니다.</li>
  <li>인용부호 붙은 기호 문자열은 v1.x에서 순수하게 비-숫자로 간주됩니다. 그래서 <code>x[1]</code>과<code>x["1"]</code>는 <i>동등하지 않습니다</i>. 게다가, 인용부호 붙은 기호 문자열은 ( <code>"0x" x</code>에서 처럼) 또다른 값과 결합합니다. 그 결과는 순수하게 비-숫자로 취급됩니다. 그렇지만, 이것은 변수에 적용되지 않습니다. 그래서 <code>x[1]</code>와 <code>x[y:="1"]</code>는 동등합니다. 이 문제는 v2에서 해결될 것입니다. 그래서 스크립트는 인용부호 붙은 숫치 기호를 키로 사용하는 것을 피해야 합니다.</li>
  <li>부동 소수점수는 키로 지원하지 않습니다. - 대신에 문자열로 변환됩니다.  v1.x에서, 부동 소수점 기호는 원래의 형식을 유지하는 반면에 (<code>0+1.0</code>나 <code>Sqrt(y)</code>의 결과 같이) 순수한 부동 소수점 수는 강제로 현재의 <a href="commands/SetFormat.htm">부동 소수점 수 형식</a>으로 변환됩니다. 일관성과 명료함을 위하여, 스크립트는 부동 소수점 기호를 키로 사용하지 말아야 합니다.</li>
  <li>문자열 키로서 <a href="#Custom_Objects">"base"</a>는 <a href="objects/Object.htm#Insert">Insert</a>에 사용될 때를 제외하고 특별한 의미가 있습니다.</li>
</ul>

<h2 id="Extended_Usage">확장 사용법</h2>
<h3 id="Function_References">함수 참조 <span class="ver">[v1.1.00+]</span></h3>
<p>
변수 <i>func</i>에 함수 이름이 들어 있다면, 그 함수는 두 가지 방법으로 호출할 수 있습니다: <code>%func%()</code> 또는 <code>func.()</code>. 그렇지만, 이렇게 하려면 매번 함수 이름을 결정해야 하는데, 함수가 여러번 호출된다면 효율적이지 못합니다. 수행성능을 개선하기 위해, 스크립트는 함수에 대한 참조를 열람해 그것을 저장해 나중에 사용할 수 있습니다:</p>
<pre>Func := Func("MyFunc")</pre>
<p>함수는 다음과 같은 구문을 사용하여 참조로 호출할 수 있습니다:</p>
<pre>
RetVal := %Func%(<i>Params</i>)     <em>; v1.1.07+을 요구합니다</em>
RetVal := Func.Call(<i>Params</i>)  <em>; v1.1.19+을 요구합니다</em>
RetVal := Func.(<i>Params</i>)      <em>; 권장하지 않습니다</em>
</pre>
<p>함수 참조의 추가 특성들에 관한 정보는 <a href="objects/Func.htm">Func Object</a>를 참조하십시오.</p>

<h3 id="Usage_Arrays_of_Arrays"><a name="JaggedArrays"></a>배열의 배열</h3>
<p>오토핫키는  "다-차원" 배열을 지원합니다. 다른 배열 안에 배열을 투명하게 저장하면 됩니다. 예를 들어, 테이블은 행의 배열로 표현할 수 있습니다. 반면에 각 행 자체는 열의 배열입니다. 그 경우, <code>x</code>행 <code>y</code>열의 내용은 아래의 방법중 하나를 사용하여 설정할 수 있습니다:</p>
<pre>table[x][y] := content  <em>; A</em>
table[x, y] := content  <em>; B</em></pre>
<p>
<code>table[x]</code>가 존재하지 않으면, <span class="Code"><em>A</em></span>와 <span class="Code"><em>B</em></span>는 두 가지 점에서 다릅니다:</p>
<ul>
  <li><span class="Code"><em>A</em></span>는 실패하는 반면 <span class="Code"><em>B</em></span>는 자동으로 객체를 만들어 그것을 <code>table[x]</code> 안에 저장합니다.</li>
  <li><code>table</code>의 <a href="#Custom_Objects">base</a>는 <a href="#Meta_Functions">메타-함수</a>를 정의합니다. 다음과 같이 호출합니다:
  <pre>table.base.__Get(table, x)<span class="dull">[y] := content</span>   <em>; A</em>
table.base.__Set(table, x, y, content)     <em>; B</em></pre>

  결과적으로, <span class="Code"><em>B</em></span>는 객체가 전체적인 할당에 대하여 맞춤 행위를 정의하도록 허용합니다.</li>
</ul>
<p><code>table[a, b, c, d] := value</code>와 같은 다-차원 할당은 다음과 같이 처리됩니다:</p>
<ul>
  <li>오직 하나의 키만 남아 있다면,  할당을 수행하고 반환된다. 그렇지 않으면:</li>
  <li>객체에서 목록에 있는 첫 번째 키를 찾는다.</li>
  <li>비-객체가 발견되면, 실패한다.</li>
  <li>객체가 발견되지 않으면, 하나를 만들어 저장한다.</li>
  <li>재귀적으로 하위-객체를 요청하면서, 남아 있는 키와 값을 건넨다. - 위에서 아래로 반복한다.</li>
</ul>
<p>다음 행위는 오직 스크립트로-만든 객체에만 적용됩니다. 좀 더 전문화된 유형의 객체, COM 객체나 COM 배열은 적용되지 않습니다.</p>

<h3 id="Usage_Arrays_of_Functions"><a name="FuncArrays"></a>함수 배열</h3>
<p>함수 배열은 단순히 함수 이름이나 참조를 담고 있는 배열입니다. 예를 들어:</p>
<pre>array := [Func("FirstFunc"), Func("SecondFunc")]

<em>; 각 함수를 호출한다, "foo"를 매개변수로 건넨다:</em>
Loop 2
    array[A_Index].("foo")

<em>; 각 함수를 호출한다. 묵시적으로 배열 자체를 매개변수로 건넨다:</em>
Loop 2
    array[A_Index]()

FirstFunc(param) {
    MsgBox % A_ThisFunc ": " (IsObject(param) ? "object" : param)
}
SecondFunc(param) {
    MsgBox % A_ThisFunc ": " (IsObject(param) ? "object" : param)
}</pre>
<p>하위-호환을 위해, <code>array[A_Index]</code>에 함수 참조가 아니라 함수 이름이 들어 있다면, 두 번째 형태는 배열(<i>array</i>)을 매개변수로 건네지 않습니다. 그렇지만, <code>array[A_Index]</code>가 <code>array.base[A_Index]</code>으로부터 <a href="#Custom_Objects">상속되었다면</a>, 배열(<i>array</i>)이 매개변수로 건네집니다.</p>

<h2 id="Custom_Objects">맞춤 객체</h2>
<p>스크립트로 만든 객체는 미리 정의된 구조를 가질 필요가 없습니다. 대신에, 각 객체는 특성과 메쏘드를 그의 <code>base</code> 객체로부터 상속받아야 합니다 (그렇지 않으면 "프로토타입" 또는 "class"라고 알려진). 특성과 메쏘드는 언제든지 객체에 추가할 수도 (제거할 수도) 있습니다. 이런 변경은 이로부터 파생된 모든 객체에 영향을 미칩니다. 보다 복잡하고 전화된 상황을 위해, 베이스 객체는 자신을 상속받은 객체들의 표준 행위를 오버라이드 할 수 있습니다.  <a href="#Meta_Functions"><i>메타-함수</i></a>를 정의해 오버라이드 합니다.</p>
<p><em>Base</em> 객체는 그냥 평범한 객체이며, 전형적으로 두 가지 방식으로 생성됩니다:</p>
<pre>class baseObject {
    static foo := "bar"
}
<em>; 또는</em>
baseObject := {foo: "bar"}</pre>
<p>
객체를 또다른 객체로부터 파생시켜 생성하기 위해, 스크립트는 <code>base</code> 특성에 할당하거나 <a href="#Custom_NewDelete"><code>new</code> 키워드를 사용할 수 있습니다</a>:</p>
<pre>obj1 := Object(), obj1.base := baseObject
obj2 := {base: baseObject}
obj3 := new baseObject
MsgBox % obj1.foo " " obj2.foo " " obj3.foo</pre>
<p>
언제든지 한 객체의 <code>base</code>를 재할당할 수 있습니다. 객체가 상속받은 모든 특성과 메쏘드를 효과적으로 교체합니다.</p>

<h3 id="Custom_Prototypes">프로토타입</h3>
<p>
프로토타입 또는 <code>base</code> 객체는 다른 객체와 마찬가지로 구성하고 조작합니다. 예를 들어, 특성 하나와 메쏘드 하나를 가진 평범한 객체는 다음과 같이 구성할 수 있습니다:</p>
<pre><em>; 객체를 생성한다.</em>
thing := {}
<em>; Store a value.</em>
thing.foo := "bar"
<em>; 함수 참조를 저장함으로써 메쏘드를 생성한다.</em>
thing.test := Func("thing_test")
<em>; 메쏘드를 호출한다.</em>
thing.test()

thing_test(this) {
   MsgBox % this.foo
}</pre>
<p>
<code>thing.test()</code>가 호출되면, <i>thing</i>는 자동으로 매개변수 리스트의 첫번째로 삽입됩니다. 그렇지만, 하위 호환을 위해, 이런 일은 함수가 (참조가 아니라) 이름으로 (베이스 객체로부터 상속받는 것이 아니라) 직접적으로 객체에 저장될 경우에만 일어납니다. 관례적으로 함수는 객체의 유형과 메쏘드의 이름을 결합해 짓습니다.</p>
<p>
객체는 또다른 객체가 그로부터 파생해 나가면 프로토타입(<i>prototype</i>) 또는 베이스(<i>base</i>)가 됩니다:</p>
<pre>other := {}
other.base := thing
other.test()</pre>
<p>
이 경우, <i>other</i>는 <i>foo</i>를 상속받고 <i>test</i>는 <i>thing</i>으로부터 상속을 받습니다. 이런 상속 관계는 역동적입니다. 그래서 <code>thing.foo</code>가 변경되면, 그 변경이 <code>other.foo</code>에 반영됩니다. 스크립트가  <code>other.foo</code>에 할당하면, 그 값은 <i>other</i>에 저장됩니다. <code>thing.foo</code>에 변경을 더 가하더라도  <code>other.foo</code>에는 영향을 미치지 않습니다. <code>other.test()</code>가 호출되면, 그의 <i>this</i> 매개변수에는  <i>thing</i>이 아니라 <i>other</i>를 가리키는 참조가 들어갑니다.
</p>

<h3 id="Custom_Classes">클래스 <span class="ver">[v1.1.00+]</span></h3>
<p>
어원으로 말하자면 "클래스"란 공통의 특성이나 속성을 가지고 있는 것들의 한 범주 또는 집합입니다. <a href="#Custom_Objects">base</a> 객체나 <a href="#Custom_Prototypes">prototype</a> 객체는 객체 집합에 대하여 특성과 행위를 정의하기 때문에, 클래스(<em>class</em>) 객체라고 부를 수도 있습니다. 편의를 위해, 베이스 객체는 아래에 보여주는 바와 같이 "class" 키워드를 사용하여 정의할 수 있습니다:</p>

<pre>class ClassName extends BaseClassName
{
    InstanceVar := Expression
    static ClassVar := Expression

    class NestedClass
    {
        ...
    }

    Method()
    {
        ...
    }

    Property[]  <em>; 각괄호는 선택적이다</em>
    {
        get {
            return ...
        }
        set {
            return ... := value
        }
    }
}
</pre>
<p>스크립트가 적재될 때, 이 코드는 객체를 하나 구성하고 그것을 전역 변수 (또는 v1.1.05+이라면 <a href="Functions.htm#SuperGlobal">수퍼-전역</a> 변수) <i>ClassName</i>에 저장합니다. v1.1.05 이전이라면, 이 클래스를 함수 안에서 참조하려면, 그 함수가 <a href="Functions.htm#AssumeGlobal">assume-global</a>이 아닌 한, <code>global ClassName</code>와 같은 선언이 필요합니다. <code>extends BaseClassName</code>가 있으면, <i>BaseClassName</i>은 반드시 또다른 클래스의 완전한 이름이어야 합니다 (그러나 v1.1.11에서는 정의된 순서는 문제가 되지 않습니다). 각 클래스의 완전한 이름이 <code><i>object</i>.__Class</code>에 저장됩니다.</p>
<p>
이 문서 안에서 클래스("class")라는 단어는 그 자체로 보통 <code>class</code> 키워드로 구성된 클래스 객체를 의미합니다.</p>
<p>클래스 정의는 변수 선언, 메쏘드 정의, 내포 클래스 정의를 포함할 수 있습니다.</p>

<h4 id="Custom_Classes_var">실체 변수 <span class="ver">[v1.1.01+]</span></h4>
<p>
<em>실체 변수</em>는 클래스의 각 실체가 자신만의 클래스 사본을 가진 것입니다. 보통의 할당처럼 선언되지만, <code>this.</code> 접두사가 생략되어 있습니다 (클래스 몸체 안에서 직접적으로 사용될 경우에만 생략합니다):</p>
<pre>InstanceVar := Expression</pre>
<p>
이런 선언은 클랫의 새 실체가 <a href="#Custom_NewDelete">new</a> 키워드로 생성될 때마다 매번 평가됩니다. 메쏘드 이름 <code>__Init</code>은 이런 목적을 위해 예약되어 있으며, 다른 스크립트에서 사용하면 안됩니다. <a href="#Custom_NewDelete">__New()</a> 메쏘드는 베이스 클래스에 정의된 선언을 포함하여 그 모든 선언이 평가된 후에 호출됩니다. <em>표현식</em>은 다른 실체 변수와 메소드에 <code>this</code>를 통하여 접근할 수 있지만, 모든 다른 변수 참조는 전역적이라고 간주됩니다.</p>
<p>
실체 변수에 접근하려면 (메쏘드 안에서도 마찬가지로), 언제나 목표 객체를 지정합니다; 예를 들어, <code><b>this</b>.InstanceVar</code>.</p>
<p><span class="ver">[v1.1.08+]:</span> 이 클래스에 <code>x</code>가 미리 선언되어 있다면 <code>x.y := z</code>와 같은 선언도 지원됩니다.  예를 들어, <code>x := {}, x.y := 42</code>는 <code>x</code>를 선언하고 또 <code>this.x.y</code>를 초기화합니다.</p>

<h4 id="Custom_Classes_staticvar">정적/클래스 변수 <span class="ver">[v1.1.00.01+]</span></h4>
<p>
정적/클래스 변수는 클래스 자체에 속하지만,  (하위-클래스를 포함하여) 파생 객체가 상속받을 수 있습니다. 실체 변수처럼 선언되지만, static 키워드를 사용합니다:</p>
<pre>static ClassVar := Expression</pre>
<p>
정적 선언은 오직 <a href="Scripts.htm#auto">자동-실행 섹션</a> 전에 한 번만 평가됩니다. 그리고 순서대로 스크립트에 나타납니다. 각 선언은 값을 object 클래스에 저장합니다. <i>표현식</i> 안의 모든 변수 참조는 전역적이라고 간주됩니다.</p>
<p>
클래스 변수에 접근하려면, 언제나 클래스나 파생 객체를 지정합니다. 예를 들어, <code><b>ClassName</b>.ClassVar</code>.</p>
<p><span class="ver">[v1.1.08+]:</span> 이 클래스에 <code>x</code>가 미리 정의되어 있다면 <code>static x.y := z</code>와 같은 표현도 지원합니다. 예를 들어, <code>static x := {}, x.y := 42</code>는 <code>x</code>를 선언하고 또 <code><i>ClassName</i>.x.y</code>를 초기화합니다.</p>

<h4 id="Custom_Classes_class">내포 클래스</h4>
<p>내포 클래스 정의는 클래스 객체를 또다른 전역 변수가 아니라 또다른 클래스 객체 안에 저장되도록 허용합니다. 위의 예제에서, <code>class NestedClass</code>는 객체를 구성하고 그것을 <code>ClassName.NestedClass</code>에 저장합니다. 하위-클래스는 <em>NestedClass</em>를 상속받거나 자신의 내포 클래스로 그것을 오버라이드할 수 있습니다 (이 경우 <code>new this.NestedClass</code>를 사용하여 적절한 클래스를 실체화할 수 있습니다).</p>
<pre>
class NestedClass
{
    ...
}
</pre>

<h4 id="Custom_Classes_method">메쏘드</h4>
<p>메쏘드 정의는 함수 정의와 모습이 똑 같습니다. 각 메쏘드는 숨은 매개변수로 <code>this</code>가 있는데, 이것은 전형적으로 클래스로부터 상속받은 객체를 가리키는 참조점을 담고 있습니다. 그렇지만, 메쏘드가 어떻게 호출되는 가에 따라 클래스 자체나 상속받은 클래스를 가리키는 참조점을 담을 수도 있습니다. 메쏘드는 이 클래스 객체에 <a href="#Function_References">참조</a>로 저장됩니다.</p>
<pre>
Method()
{
    ...
}
</pre>

<p id="Custom_Classes_base">메쏘드 안에서, 의사-키워드 <code>base</code>를 사용하면, 파생 클래스 안에 오버라이드된 수퍼-클래스의 메쏘드나 특성에 접근할 수 있습니다. 
예를 들어, 위에 정의된 클래스에서 <code>base.Method()</code>는 <em>BaseClassName</em>에 정의된 <em>Method</em> 버전을 호출합니다. <a href="#Meta_Functions">메타-함수</a>는 호출되지 않습니다; 
그렇지 않으면, <code>base.Method()</code>는 마치 <code>BaseClassName.Method.(this)</code>처럼 행위합니다. 다시 말해,</p>
<ul>
  <li><code>base.Method()</code>는 언제나 현재 메소드가 정의되어 있는 클래스의 베이스를 요청합니다. <code>this</code>가 전적으로 그 클래스 또는 다른 클래스의 <em>sub-class</em>로부터 파생되었을지라도 말입니다.</li>
  <li><code>base.Method()</code>는 묵시적으로 <code>this</code>를 첫 (숨은) 매개변수로 건넵니다.</li>
</ul>
<p>
<code>base</code>는 다음에 점<code>.</code> 또는 각괄호 <code>[]</code>가 따라오면 특별한 의미를 가집니다. 그래서  <code>obj := base, obj.Method()</code>와 같은 코드는 작동하지 않습니다. 스크립트는 <i>base</i>의 특별한 행위를 불능으로 만들 수 있습니다. 거기에다 비어있지-않은 값을 할당하면 됩니다; 그렇지만, 이것은 권장하지 않습니다. 왜냐하면 변수 <i>base</i>는 꼭 비어 있어야 합니다. 스크립트가 <a href="commands/_NoEnv.htm">#NoEnv</a>를 빼먹으면 수행성능이 저하될 수 있기 때문입니다.</p>

<h4 id="Custom_Classes_property">Properties <span class="ver">[v1.1.16+]</span></h4>
<p>
특성 정의는 스크립트가 특정한 키를 설정하거나 열람할 때마다 메쏘드를 실행하도록 허용합니다.</p>
<pre>Property[]
{
    get {
        return ...
    }
    set {
        return ... := value
    }
}</pre>
<p>
<em>Property</em>는 그냥 호출하는 데 사용되는 특성의 이름일 뿐입니다. 예를 들면, <code>obj.Property</code>는 <em>get</em>을 호출하는 반면에 <code>obj.Property := value</code>는 <em>set</em>을 호출합니다. <em>get</em>이나 <em>set</em> 안에서, <code>this</code>는 요청 중인 객체를 가리킵니다. <em>set</em> 안에서, <code>value</code>에는 할당된 값이 담깁니다.</p>
<p>
매개변수는 특성 이름의 오른쪽에 각괄호로 둘러싸 건넬 수 있습니다.  특성을 정의할 때와 호출할 때 모두 마찬가지입니다. 각괄호를 사용하는 외에도, 특성의 매개변수는 메쏘드의 매개변수와 같은 방식으로 정의됩니다 - 선택적, ByRef 그리고 가변 매개변수를 지원합니다.</p>
<p>
<em>get</em>이나 <em>set</em>의 반환값은 해당 특성을 요청한 하위-표현식의 결과가 됩니다. 예를 들어, <code>val := obj.Property := 42</code>는 <em>set</em>의 반환 값을 <code>val</code>에 저장합니다.</p>
<p>
각 클래스는 특성의 절반만 또는 둘 다 온전하게 정의할 수 있습니다 (특성=속성). 클래스가 특성을 오버라이드 하면 <code><a href="#Custom_Classes_base">base.Property</a></code>를 사용하여 자신의 기본 클래스에 정의된 특성에 접근할 수 있습니다. <em>get</em>이나 <em>set</em>이 정의되어 있지 않으면, 기본 클래스가 처리할 수 있습니다. <em>set</em>이 정의되어 있지 않고 메타-함수나 기본 클래스에 의하여 처리되지 않은 경우, 값을 객체에 저장하면 그 특성이 불능이 되는 효과가 있습니다.</p>
<p>
내부적으로, <em>get</em>과 <em>set</em>은 두 개의 다른 메쏘드입니다. 그래서 변수를 공유할 수 없습니다 (<code>this</code>에 저장한 변수는 가능합니다).</p>
<p><a href="#Meta_Functions">메타-함수</a>는 객체의 메쏘드와 특성에 접근을 보다 넓게 제어합니다. 그러나 더 복잡하고 에러를 일으키는 경향이 더 높습니다.</p>

<h3 id="Custom_NewDelete">구성과 파괴</h3>
<p>
파생 객체가 <code>new</code> 키워드로 생성될 때마다 <span class="ver">[requires v1.1.00+]</span>, 그의 기반 클래스에 정의된 <code>__New</code> 메쏘드가 호출됩니다. 이 메쏘드는 매개변수를 받아, 그 객체를 초기화하고 <code>new</code> 연산자의 결과를 값을 돌려줌으로써 오버라이드할 수 있습니다.

객체가 파괴될 때, <code>__Delete</code>가 호출됩니다. 예를 들어:</p>
<pre>m1 := new GMem(0, 20)
m2 := {base: GMem}.__New(0, 30)

class GMem
{
    __New(aFlags, aSize)
    {
        this.ptr := DllCall("GlobalAlloc", "uint", aFlags, "ptr", aSize, "ptr")
        if !this.ptr
            return ""
        MsgBox % "New GMem of " aSize " bytes at address " this.ptr "."
        return this  <em>; 'new' 연산자를 사용하면 이 줄은 생략할 수 있다.</em>
    }

    __Delete()
    {
        MsgBox % "Delete GMem at address " this.ptr "."
        DllCall("GlobalFree", "ptr", this.ptr)
    }
}</pre>
<p>__Delete는 "__Class"를 키로 가지는 객체에 호출되지 않습니다. <a href="#Custom_Classes">클래스 객체</a>가 이 키를 기본값으로 가집니다.</p>

<h3 id="Meta_Functions">메타-함수</h3>
<pre class="Syntax">
<strong>메쏘드 구문:</strong>
class <i>ClassName</i> {
    __Get([Key, Key2, ...])
    __Set([Key, Key2, ...], Value)
    __Call(Name [, Params...])
}

<strong>함수 구문:</strong>
<i>MyGet</i>(this [, Key, Key2, ...])
<i>MySet</i>(this [, Key, Key2, ...], Value)
<i>MyCall</i>(this, Name [, Params...])

<i>ClassName</i> := { __Get: Func("<i>MyGet</i>"), __Set: Func("<i>MySet</i>"), __Call: Func("<i>MyCall</i>") }
</pre>
<p>
메타-함수는 목표  객체 안에 키를 요청했지만 안에서 발견할 수 없을 때 일어날 행위를 정의합니다. 예를 들어, <code>obj.key</code>에 값이 할당되지 않았다면, <i>__Get</i> 메타-함수를 요청합니다. 비슷하게, <code>obj.key := value</code>는 <i>__Set</i>를 요청하고 <code>obj.key()</code>는 <i>__Call</i>를 호출합니다. 이 메타-함수들 (또는 메쏘드들)은 <code>obj.base</code>, <code>obj.base.base</code> 등등에 정의할 필요가 있습니다.</p>
<p>
스크립트가 목표 객체 안에 존재하지 않는 키를 열람하거나 설정하거나 또는 호출하면, 베이스 객체가 다음과 같이 요청됩니다:</p>
<ul class="list_of_p">
  <li>이 베이스 객체가 적절한 메타-함수를 정의하고 있으면 그것을 호출합니다. 메타-함수가 명시적으로 반환(<code>return</code>)되면, (그 메타-함수가 무엇 때문에 호출되었는지와 상관없이) 그 반환 값을 연산의 결과로 사용합니다 그리고 스크립트에 제어를 반환합니다. 그렇지 않으면, 아래에 기술된 대로 계속 진행합니다.
    <p>
	<i>Set</i>: 메타-함수가 할당을 처리하면, 그 할당 값을 반환해야 합니다. 이렇게 하면 <code>a.x := b.y := z</code>와 같이 할당을 연쇄적으로 할 수 있습니다. 반환 값은 <code>z</code>의 원래 값과 다를 수 있습니다 (예를 들어, 어느 값을 할당할 수 있는지 제한이 부과된 경우).</p></li>
  <li>베이스 객체의 필드에서 일치하는 키를 찾습니다.</li>
  <li><span class="ver">[v1.1.16+]:</span> 특성에 상응하는 키가 발견되고 거기에 <em>get</em>이나 <em>set</em>이 (적절하게) 구현되어 있다면, 그 특성을 요청하고 반환합니다. 이것이 메쏘드 호출이면, <em>get</em>을 요청합니다.</li>
  <li>아무 키도 발견되지 않으면, 재귀적으로 이 베이스 객체의 베이스를 요청합니다 
  (이 리스트의 상단에서 시작해, 차례로 각 단계마다 적용합니다). 
  
  아직 완료하지 못했다면, 키가 메타-함수에 의하여 추가된 경우 이 바탕 객체를 검색해 다시 부합하는 키를 찾습니다.
    <p>
	하위 호환의 문제 때문에, 이 단계는 키가 발견 되었을지라도 <em>set</em> 연산에 대해서만 수행됩니다	
	(단, <em>set</em>을 구현한 특성을 정의했다면 예외입니다).</p></li>
  <li>여러 매개변수가 <i>get</i>이나 <i>set</i>에 주어지고 키가 발견되면, 그의 값을 점검합니다. 그 값이 객체이면, 그것을 요청하여 나머지 매개변수들을 처리합니다. 그리고 더 이상 진행하지 않습니다.</li>
  <li>키가 발견되면,<br>
    <i>Get</i>: 그 값을 돌려줍니다.<br>
    <i>Call</i>: 그 값이 함수 이름이거나 <a href="#Function_References">참조이면</a>, 그것을 호출합니다. 대상 객체를 첫 매개변수로 건넵니다 (<code>this</code>).</p></li>
</ul>
<p>
일치하는 키를 메타-함수가 객체에 저장하지만 반환(<code>return</code>)하지 않으면, 그 행위는 마치 키가 처음부터 그 객체에 존재한 것과 같습니다. __Set을 사용하는 예제는 <a href="#Subclassing_aoa">배열의 배열 서브-클래싱하기</a>를 참조하십시오.</p>
<p>연산이 여전히 처리되지 않았다면, 이것이 내장 함수인지 아니면 내장 특성인지 점검하십시오:</p>
<ul>
  <li><i>Get</i>: 기카 "base"이면, 그 객체의 base를 돌려줍니다.</li>
  <li><i>Set</i>: 키가 "base"이면, 그 객체의 base를 설정합니다 (또는 그 값이 객체가 아니면 제거합니다).</li>
  <li><i>Call</i>: 적용할 수 있으면 <a href="objects/Object.htm">내장 메쏘드</a>를 호출합니다.</li>
</ul>
<p>여전히 연산이 처리되지 않았다면,</p>
<ul>
  <li><i>Get</i> 그리고 <i>Call</i>: 빈 문자열을 돌려줍니다.</li>
  <li><i>Set</i>: 한 개의 키 매개변수만 주어졌다면, 그 키와 값을 목표 객체에 저장하고 할당된 값을 돌려줍니다. 여러 매개변수가 주어지면, 새 객체를 만들고 거기에 첫 번째 매개변수를 키로 사용하여 저장합니다. 그 다음, 그 새 객체를 요청해 나머지 매개변수를 처리합니다. (<a href="#Usage_Arrays_of_Arrays">배열의 배열</a> 참조.)</li>

</ul>

<p><b>알려진 한계:</b></p>
<ul><li>반환값 없이 <code>return</code>을 사용하면 <code>return ""</code>과 동등합니다. 이 행위는 미래 버전에서는 바뀔 수 있습니다. 기본 행위를 오버라이딩하지 않고, 메타-함수로부터 "피신"하기 위하여 <code>return</code>을 사용할 가능성이 있습니다.</li></ul>

<h4 id="Dynamic_Properties">동적 특성</h4>
<p>
<i>__Get</i>과 <i>__Set</i>를 사용하여 값들을 특정 방식으로 계산하거나 제한할 수 있는 특성을 구현할 수 있습니다. 예를 들어, R, G, B 그리고 RGB 특성을 가지고 "Color" 객체를 구현 하는 데 사용할 수 있습니다. 여기에서 오직 RGB 값만 실제로 저장됩니다:</p>
<pre>red  := new Color(0xff0000), red.R -= 5
cyan := new Color(0x00ffff)

MsgBox % "red: " red.R "," red.G "," red.B " = " red.RGB
MsgBox % "cyan: " cyan.R "," cyan.G "," cyan.B " = " cyan.RGB

class Color
{
    __New(aRGB)
    {
        this.RGB := aRGB
    }

    __Get(aName)
    {
        if (aName = "R")
            return (this.RGB &gt;&gt; 16) &amp; 255
        if (aName = "G")
            return (this.RGB &gt;&gt; 8) &amp; 255
        if (aName = "B")
            return this.RGB &amp; 255
    }

    __Set(aName, aValue)
    {
        if aName in R,G,B
        {
            aValue &amp;= 255

            if      (aName = "R")
                this.RGB := (aValue &lt;&lt; 16) | (this.RGB &amp; ~0xff0000)
            else if (aName = "G")
                this.RGB := (aValue &lt;&lt; 8)  | (this.RGB &amp; ~0x00ff00)
            else  <em>; (aName = "B")</em>
                this.RGB :=  aValue        | (this.RGB &amp; ~0x0000ff)

            <em>; 'Return'을 사용하여 새 키-값 쌍이 만들어지지 않았음을 알려야 합니다.
            ; 또한 'x := clr[name] := val'에서 무엇을 'x'에 저장할지 정의합니다:</em>
            return aValue
        }
    }
}</pre>

<h4 id="Objects_as_Functions">함수로서의 객체</h4>
<p>
<code>obj.func(param)</code>와 같이 호출하면, <i>obj.func</i>는 함수 이름이나 객체를 담을 수 있습니다.  <i>obj.func</i>에 객체가 들어 있다면,  그 객체는 그 메쏘드 이름 대신에 <code>(obj.func)[obj]()</code>처럼 <i>obj</i>로 요청할 수 있습니다.

대부분의 경우 <code>obj.func[obj]</code>는 존재하지 않습니다. 대신에 <i>obj.func</i>'s __Call <a href="#Meta_Functions">메타-함수</a>가 요청됩니다. 이를 이용하면 아래 예제에 보여주는 바와 같이 함수 호출의 행위를 추상적인 방식으로 바꿀 수 있습니다:</p>

<pre><em>; 함수 배열을 위한 프로토타입을 생성한다.</em>
FuncArrayType := {__Call: "FuncType_Call"}
<em>; 함수 배열을 생성한다.</em>
funcArray := {1: "One", 2: "Two", base: FuncArrayType}
<em>; 배열을 메쏘드로 사용하는 객체를 생성한다.</em>
obj := {func: funcArray}
<em>; 메쏘드를 호출한다.</em>
obj.func("foo", "bar")

FuncType_Call(func, obj, params*)
{
    <em>; 함수 리스트를 호출한다.</em>
    Loop % ObjMaxIndex(func)
        func[A_Index](params*)
}

One(param1, param2) {
    ListVars
    Pause
}
Two(param1, param2) {
    ListVars
    Pause
}</pre>
<p>
이 테크닉을 사용하면 메타-함수처럼 행위하는 객체를 만들 수 있습니다. 예를 들어, 이전 섹션에서 다룬 특성과 비슷하게 동적 특성들을 정의할 수 있습니다. 
(그렇지만, 이 예제는 <a href="#Custom_Classes_property">특성 지원</a>으로 대체되었음을 주의하십시오.) 예를 들어:</p>
<pre>blue := new Color(0x0000ff)
MsgBox % blue.R "," blue.G "," blue.B

class Properties
{
    __Call(aTarget, aName, aParams*)
    {
        <em>; 이 특성 객체에 이 절반-특성에 대한 정의가 들어 있다면, 그것을 호출합니다. 
        ; this.HasKey(aName)를 사용하지 않도록 주의합니다. 이것을 사용하면 __Call 안으로 재귀가 일어납니다.</em>
        if IsObject(aTarget) &amp;&amp; ObjHasKey(this, aName)
            return this[aName].(aTarget, aParams*)
    }
}

class Color
{
    __New(aRGB)
    {
        this.RGB := aRGB
    }

    class __Get extends Properties
    {
        R() {
            return (this.RGB &gt;&gt; 16) &amp; 255
        }
        G() {
            return (this.RGB &gt;&gt; 8) &amp; 255
        }
        B() {
            return this.RGB &amp; 255
        }
    }

    <em>;...</em>
}</pre>

<h4 id="Subclassing_aoa">배열의 배열을 서브-클래싱하기</h4>
<p>
 <code>table[x, y] := content</code>와 같이 <a href="#Usage_Arrays_of_Arrays">다중-매개변수 할당</a> 때문에 묵시적으로 새로운 객체가 생성될 때, 그 새 객체는 보통 베이스가 없고 그러므로 맞춤 메쏘드도 없고 특별한 행위도 없습니다. <code>__Set</code>는 아래에 보여주는 바와 같이 이런 객체들을 초기화하는 데 사용할 수 있습니다.</p>
<pre>x := {base: {addr: Func("x_Addr"), __Set: Func("x_Setter")}}

<em>; 값을 할당한다. 묵시적으로 x_Setter를 사용하여 하위-객체를 만든다.</em>
x[1,2,3] := "..."

<em>; 값을 열람하고 예제 메쏘드를 호출한다.</em>
MsgBox % x[1,2,3] "`n" x.addr() "`n" x[1].addr() "`n" x[1,2].addr()

x_Setter(x, p1, p2, p3) {
    x[p1] := new x.base
}

x_Addr(x) {
    return &amp;x
}</pre>
<p>
<code>x_Setter</code>는 네 개의 필수 매개변수가 있기 때문에, 두 개 이상의 키가 있을 경우에만 호출됩니다. 위의 할당이 일어날 때, 다음과 같은 일이 일어납니다:</p>
<ul>
  <li><code>x[1]</code>는 존재하지 않습니다. 그래서 <code>x_Setter(x,1,2,3)</code>가 호출됩니다 (<code>"..."</code>는 건네지지 않습니다. 매개변수가 턱없이 모자라기 때문입니다).
  <ul>
    <li><code>x[1]</code>는 <code>x</code>와 베이스가 같은 객체가 새로 할당됩니다.</li>
    <li>반환값은 없습니다 &ndash; 할당은 계속됩니다.</li>
  </ul></li>
  <li><code>x[1][2]</code>는 존재하지 않습니다. 그래서 <code>x_Setter(x[1],2,3,"...")</code>이 호출됩니다.
  <ul>
    <li><code>x[1][2]</code>에 <code>x[1]</code>와 베이스가 같은 객체가 새로 할당됩니다.</li>
    <li>반환값은 없습니다 &ndash; 할당은 계속됩니다.</li>
  </ul></li>
  <li><code>x[1][2][3]</code>은 존재하지 않습니다. 그러나 <code>x_Setter</code>는 네 개의 매개변수를 요구하고 세 개 밖에 없으므로 (<code>x[1][2], 3, "..."</code>),  호출되지 않고 할당은 여느 때처럼 완료됩니다.</li>
</ul>

<h2 id="Default_Base_Object">기본 베이스 객체</h2>
<p>
비-객체 값이 객체 구문과 함께 사용될 때, <i>기본 베이스 객체</i>가 요청됩니다. 
이것은 디버깅에 사용하거나 또는 문자열이나, 숫자, 그리고/또는 변수에 대하여 객체-류의 행위를 전역적으로 정의하는데 사용할 수 있습니다. 기본 베이스는 비-객체 값을 가지고 <code>.base</code>를 사용하여 접근이 가능합니다; 예를 들면, <code>"".base</code>. 

기본 베이스는 <code>"".base := Object()</code>처럼 설정(<i>set</i>)할 수 없지만, 기본 베이스는 <code>"".base.base := Object()</code>처럼 그 자체로 베이스가 있습니다.</p>

<h4 id="Automatic_Var_Init">자동 변수 초기화</h4>
<p>
<i>set</i> 연산의 목표로 빈 변수가 사용될 때, 직접적으로 __Set meta-함수에 건네집니다. 그래서 새 객체를 변수에 삽입할 기회가 있습니다. 간략하게 하기 위해, 다음 예제는 다중 매개변수를 지원하지 않습니다; 물론 <a href="Functions.htm#Variadic">가변 함수</a>를 사용하면 가능합니다.</p>
<pre>"".base.__Set := Func("Default_Set_AutomaticVarInit")

empty_var.foo := "bar"
MsgBox % empty_var.foo

Default_Set_AutomaticVarInit(ByRef var, key, value)
{
    if (var = "")
        var := Object(key, value)
}</pre>

<h4 id="Pseudo_Properties">의사-특성</h4>
<p>
객체의 "사탕 구문"을 문자열과 숫자에 적용할 수 있습니다.</p>
<pre>"".base.__Get := Func("Default_Get_PseudoProperty")
"".base.is    := Func("Default_is")

MsgBox % A_AhkPath.length " == " StrLen(A_AhkPath)
MsgBox % A_AhkPath.length.is("integer")

Default_Get_PseudoProperty(nonobj, key)
{
    if (key = "length")
        return StrLen(nonobj)
}

Default_is(nonobj, type)
{
    if nonobj is %type%
        return true
    return false
}</pre>
<p>내장 함수도 역시 사용할 수 있지만, 이 경우 괄호를 빼먹으면 안됩니다. 주의하십시오:</p>
<pre>"".base.length := Func("StrLen")
MsgBox % A_AhkPath.length() " == " StrLen(A_AhkPath)</pre>

<h4 id="Default__Warn">디버깅</h4>
<p>
값을 객체처럼 취급되도록 허용하면 바람직하지 않습니다. 비-객체 값이 요청될 때마다 경고 상자가 나타날 수 있습니다:</p>
<pre>"".base.__Get := "".base.__Set := "".base.__Call := Func("Default__Warn")

empty_var.foo := "bar"
x := (1 + 1).is("integer")

Default__Warn(nonobj, p1="", p2="", p3="", p4="")
{
    ListLines
    MsgBox 비-객체 값이 부적절하게 요청되었습니다.`n`n특히: %nonobj%
}</pre>

<h2 id="Implementation">구현</h2>
<a name="Refs"></a><h3 id="Reference_Counting">참조횟수-세기</h3>
<p>
오토핫키는 기본적인 참조횟수-세기 매커니즘을 사용하여 한 객체가 사용하는 자원이 더 이상 참조되지 않을 때 자동으로 해제합니다.  스크립트 저자는 이 메커니즘을 명시적으로 요청하면 안됩니다. 단 객체를 가리키는 포인터가 관리되지 않아서 직접 처리할 경우는 제외합니다. 더 자세한 정보는 <a href="commands/ObjAddRef.htm">ObjAddRef</a>를 참조하십시오.</p>

<pre><em>; 객체의 참조 횟수를 증가시켜 "살아 있도록 유지한다":</em>
<a href="commands/ObjAddRef.htm">ObjAddRef</a>(address)
...
<em>; 개체의 참조 횟수를 감소시켜 해제되도록 한다:</em>
ObjRelease(address)
</pre>
<p>
그렇지만, ObjAddRef는 <code><a href="#AddressCast">Object(obj)</a></code>를 통하여 주소를 최초로 획득할 때는 사용할 필요가 없습니다.</p>
<p>
일반적으로 한 객체의 주소의 각 새 사본은 객체 참조로 간주해야 합니다. 단, 그 스크립트가 ObjAddRef 그리고/또는 ObjRelease를 적절하게 호출할 책임이 있는 경우는 예외입니다. 

예를 들면, <code>x := address</code>와 같은 것을 통하여 주소가 복사될 때마다, ObjAddRef 가 호출되어 참조 횟수를 증가시켜야 합니다. 

비슷하게, 스크립트가 그 객체의 주소의 특별한 사본과의 작업이 끝날 때마다, ObjRelease를 호출해야 합니다. 이렇게 하면 그의 마지막 참조가 사라질 때 확실하게 객체가 해제됩니다 - 그 전에는 해제되지 않습니다.</p>
<p>
객체의 마지막 참조가 해제될 때 코드를 실행하려면, <a href="#Custom_NewDelete">__Delete</a> 메타-함수를 구현합니다.</p>

<p><b>알려진 한계:</b></p>
<ul>
  <li>순환 참조를 먼저 깨야 객체를 풀 수 있습니다. 자세한 정보와 예는 <a href="#Circular_References">객체 해제하기</a>를 참조합니다.</li>
  <li>프로그램이 끝날 때 정적 변수와 전역 변수의 참조는 자동으로 해제되지만, 비-정적 지역 변수나 표현식 평가 스택에 있는 참조들을 자동으로 해제되지 않습니다. 이런 참조는 함수나 표현식이 정상으로 끝내도록 허용해야만 해제가 됩니다.</li>
</ul>
<p>프로그램이 종료할 때 객체가 사용하는 메모리를 운영체제가 요구함에도 불구하고, 그 객체를 가리키는 모든 참조가 풀리지 않는 한, <a href="#Custom_NewDelete">__Delete</a>는 호출되지 않습니다. 이것은 임시 파일과 같이, 운영 체제가 자동으로 요구하지 않는 다른 자원을 풀어버리면 문제가 될 수 있기 때문입니다.</p>

<a name="AddressCast"></a><h3 id="Implementation_Pointers">객체를 가리키는 포인터</h3>
<p>
어떤 경우는 DllCall을 통하여 객체를 외부 코드에 건넬 필요가 있습니다. 또는 그것을 이진 데이터 구조로 저장하여 나중에 열람할 필요가 있습니다. 객체의 주소는 <code>x := &amp;obj</code>로 열람할 수 있습니다; 그렇지만, 변수 <i>obj</i>가 소거되면, 그 객체는 일찌기 해제되어 버릴 수 있습니다. 이런 일이 일어나지 않도록 확인하려면, 위에 보여준 바와 같이 ObjAddRef를 사용하거나 아래에 보여주는 바와 같이 <code>Object()</code> 함수를 사용합니다:</p>
<pre>address := Object(object)</pre>
<p>
게다가, 이 함수를 사용하여 주소를 다시 참조로 변환할 수 있습니다:</p>
<pre>object := Object(address)</pre>
<p>
어느 경우든 객체의 <a href="#Refs">참조-횟수</a>는 자동으로 증가됩니다. 그래서 객체는 너무 이르게 해제되지 않습니다.</p>
<p>
이 함수는 예를 들어 <a href="commands/ComObjCreate.htm">COM 객체 래퍼</a>나 <a href="objects/File.htm">파일 객체</a>와 같이 <a href="#Arrays">Object()</a>로 생성되지 않은 객체에도 똑 같이 적용되는 것에 주목하십시오.</p>

</body>
</html>
