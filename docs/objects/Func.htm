<!DOCTYPE HTML>
<html lang="ko">
<head>
<title>Func Object</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Func Object <span class="ver">[v1.1.00+]</span></h1>

<p>스크립트가 호출할 수 있는 사용자-정의 함수나 내장 함수를 가리킵니다.</p>

<p>함수처럼 호출할 수 있는 다른 객체에 관한 정보는 <a href="Functor.htm">함수 객체</a>를 참조합니다.</p>

<p>함수 객체를 가리키는 참조는 <em>함수 참조</em>로 알려져 있습니다. 함수 참조를 열람하려면, 다음 예제와 같이 함수 객체를 사용하십시오:</p>
<pre><em>; "StrLen"이라는 이름의 함수를 가리키는 참조를 열람합니다.</em>
fn := Func("StrLen")

<em>; 함수에 관한 정보를 보여줍니다.</em>
MsgBox % fn.Name "() is " (fn.IsBuiltIn ? "built-in." : "user-defined.")</pre>
<br>

<div class="methodShort" id="Call"><h2>Call</h2>
<p>함수를 호출합니다.</p>
<pre class="Syntax">Func.Call(<i>Parameters</i>)  <em>; v1.1.19+</em>
Func.(<i>Parameters</i>)  <em>; 예전 형식 - 비추천</em></pre>
<p>
매개변수와 반환 값은 함수가 정의합니다.</p>
<p><span class="ver">[v1.1.07+]:</span> <code><a href="../Functions.htm#DynCall">%Func%()</a></code>를 사용하면 이름이나 참조로 함수를 호출할 수 있습니다. 또는 __Call <a href="../Objects.htm#Meta_Functions">메타-함수</a>를 구현한 객체를 호출할 수 있습니다. 가능하면 <code>Func.()</code> 대신에 이것을 사용해야 합니다.</p>
</div>

<div class="methodShort" id="Bind"><h2>Bind <span class="ver">[v1.1.20+]</span></h2>
<p>매개변수를 함수에 묶고  <a href="Functor.htm#BoundFunc">BoundFunc 객체</a>를 돌려줍니다.</p>
<pre class="Syntax">BoundFunc := Func.Bind(<i>Parameters</i>)</pre>
<p><i>Parameters</i>는 개수에 상관이 없습니다.</p>
<p>자세한 정보와 예제는 <a href="Functor.htm#BoundFunc">BoundFunc 객체</a>를 참조하십시오.</p>
</div>

<div class="methodShort" id="Name"><h2>Name</h2>
<p>함수의 이름을 돌려줍니다.</p>
<pre class="Syntax">Func.Name</pre>
</div>

<div class="methodShort" id="IsBuiltIn"><h2>IsBuiltIn</h2>
<p>함수가 내장 함수이면 참(<i>true</i>)을 돌려주고 그렇지 않으면 거짓(<i>false</i>)을 돌려줍니다.</p>
<pre class="Syntax">Func.IsBuiltIn</pre>
</div>

<div class="methodShort" id="IsVariadic"><h2>IsVariadic</h2>
<p>함수가 <a href="../Functions.htm#Variadic">가변 함수</a>이면 참(<i>true</i>)을 돌려주고 그렇지 않으면 거짓(<i>false</i>)을 돌려줍니다.</p>
<pre class="Syntax">Func.IsVariadic</pre>
</div>

<div class="methodShort" id="MinParams"><h2>MinParams</h2>
<p>필수 매개변수의 개수를 돌려줍니다.</p>
<pre class="Syntax">Func.MinParams</pre>
</div>

<div class="methodShort" id="MaxParams"><h2>MaxParams</h2>
<p>사용자 정의 함수에 공식적으로-선언된 매개변수의 개수를 돌려줍니다. 또는 내장 함수의 최대 매개변수 개수를 돌려줍니다.</p>
<pre class="Syntax">Func.MaxParams</pre>
<p>
함수가 <a href="../Functions.htm#Variadic">가변 함수</a>이면, 반환 값은 "variadic*" 매개변수로 흘러 넘치지 않고 함수가 받아 들일 수 있는 매개변수의 최대 개수를 나타냅니다. </p></div>

<div class="methodShort" id="IsByRef"><h2>IsByRef()</h2>
<p>매개변수가 ByRef인지 결정합니다.</p>
<pre class="Syntax">Func.IsByRef(ParamIndex)</pre>
<table class="info">
  <tr><td width="15%">ParamIndex</td><td width="85%">선택적입니다: 매개변수의 1 기반-인덱스. 생략되면, 반환 값은 함수에 ByRef 매개변수가 있는지 알려줍니다.</td></tr>
  <tr><td><b>Returns</b></td><td>함수가 내장 함수이거나 <i>ParamIndex</i>가 유효하지 않으면 빈 문자열을 돌려줍니다; 그렇지 않으면, 매개변수가 ByRef인지 나타내는 불리언 값을 돌려줍니다.</td></tr>
</table>
</div>

<div class="methodShort" id="IsOptional"><h2>IsOptional()</h2>
<p>매개변수가 선택적인지 결정합니다.</p>
<pre class="Syntax">Func.IsOptional(ParamIndex)</pre>
<table class="info">
  <tr><td width="15%">ParamIndex</td><td width="85%">선택적: 매개변수의 1-기반 인덱스. 생략되면, 반환 값은 함수에 선택적 매개변수가 있는지 알려줍니다.</td></tr>
  <tr><td><b>Returns</b></td><td><i>ParamIndex</i>가 유효하지 않으면 빈 문자열을 돌려주고; 그렇지 않으면, 매개변수가 선택적인지 알려주는 불리언 값을 돌려줍니다.</td></tr>
</table>
<p>
가변 함수인 경우 매개변수는 공식적으로 선언할 필요가 없습니다. 내장 함수를 지원합니다.</p></div>

</body>
</html>
