

<html>
<head>
<title>Process</title>
<meta http-equiv="Content-Type" content="text/html; charset=euc-kr">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Process</h1>

<p>
다음 연산 중 하나를 프로세스에 수행합니다: 존재하는가; 우선 순위 변경; 닫기; 닫히기를 기다리기.</p>

<pre class="Syntax">Process, Cmd [, PID-or-Name, Param3]</pre>
<h3>매개변수</h3>
<dl>

  <dt>Cmd</dt>
  <dd><p>다음 단어 중 하나:</p>
    <p>
	<strong>Exist</strong>: 부합하는 프로세스가 존재하면 <a href="../misc/ErrorLevel.htm">ErrorLevel</a>에 Process ID (PID)를 설정합니다. 그렇지 않으면 0이 설정됩니다.  <em>PID-or-Name</em> 매개변수가 비어 있으면, 그 스크립트의 PID가 열람됩니다. 다른 방법으로 스크립트의 PID를 열람하는 한줄 짜리 방법이 있습니다: <code>PID := DllCall(&quot;GetCurrentProcessId&quot;)</code>.</p>
    <p>
	<strong>Close</strong>: 부합하는 프로세스가 성공적으로 종료하면, <a href="../misc/ErrorLevel.htm">ErrorLevel</a>에 그의 이전 Process ID (PID)가 설정됩니다. 그렇지 않으면 (부합하는 프로세스가 없거나 종료에 문제가 있었으면), 0이 설정됩니다. 프로세스는 갑자기 종료하기 때문에 -- 임계 지점에서 그의 작업이 인터럽트 된다거나 그의 창에 데이터를 저장하지 못하고 잃어버린다거나할 가능성이 있기 때문에 -- 이 방법은 그의 창 중에 하나에 <a href="WinClose.htm">WinClose</a>를 사용해서 프로세스를 닫을 수 없을 경우에만 사용해야 합니다.</p>
    <p>
	<strong>List</strong>: <em>List</em>는 아직 지원하지 않지만, <a href="#ListEx">예제 섹션</a>에서 DllCall을 통하여 프로세스 목록을 열람하는 법을 보여줍니다.</p>
    <p>
	<strong><a name="Priority"><em>Param3</em>에 처음 부합하는 프로세스의 </a>Priority</strong>: 우선 순위를 (윈도우즈의 작업 관리자에 보여주는 순위) 변경하고 <a href="../misc/ErrorLevel.htm">ErrorLevel</a>에 그의 Process ID (PID)를 설정합니다. <em>PID-or-Name</em> 매개변수가 비어 있으면, 스크립트의 자신의 우선 순위가 변경됩니다. 부합하는 프로세스가 없거나 우선 순위를 변경하는 데 문제가 있었으면, ErrorLevel은 0이 설정됩니다.</p>
    <p>
	<em>Param3</em>은 다음 기호나 단어중 하나가 되어야 합니다: L (Low), B (BelowNormal), N (Normal), A (AboveNormal), H (High), R (Realtime). <b>주의</b>: 실시간 우선 순위를 가지고 실행되도록 설계되지 않은 프로세스는 시스템의 안정성을 훼손할 수 있습니다.</p>
    <p>
	<strong>Wait</strong>: 부합하는 프로세스가 끝나기를 <em>Param3</em> 초까지 기다립니다 (소수점 포함 가능). <em>Param3</em>을 생략하면, 무한정 기다립니다. 부합하는 프로세스를 발견하면, <a href="../misc/ErrorLevel.htm">ErrorLevel</a>에 그의 Process ID (PID)가 설정됩니다. 명령어가 시간제한에 걸리면, ErrorLevel에 0이 설정됩니다.</p>
    <p>
	<strong>WaitClose</strong>: 부합하는 모든 프로세스가 닫힐 때까지 <em>Param3</em> 초까지 기다립니다 (소수점 포함 가능). <em>Param3</em>을 생략하면, 무한정 기다립니다. 부합하는 프로세스가 모두 닫히면, <a href="../misc/ErrorLevel.htm">ErrorLevel</a>에 0이 설정됩니다. 명령어가 시간 제한에 걸리면, ErrorLevel에 여전히 존재하는 첫 번째 부합 Process ID (PID)가 설정됩니다.</p></dd>

  <dt>PID-or-Name</dt>
  <dd><p>이 매개변수는 아래에 기술하는 것처럼 숫자 (PID)이거나 프로세스 이름일 수 있습니다. 또 비워 두면 스크립트 자체의 우선 순위를 변경할 수도 있습니다.</p>
      <p>PID: Process ID는 특정한 프로세스 하나를 유일하게 식별하는 숫자입니다 (이 숫자는 그 프로세스가 살아 있는 동안에만 유효합니다). 새로 기동된 프로세스의 PID는 <a href="Run.htm">Run</a> 명령어를 통하여 알아낼 수 있습니다. 비슷하게, 창의 PID는 <a href="WinGet.htm">WinGet</a>으로 알아낼 수 있습니다. Process 명령어 자체로도 PID를 알아낼 수 있습니다.</p>
      <p>Name: 프로세스의 이름은 보통 (경로 없이) 실행 파일의 이름과 같습니다. 예, notepad.exe 또는 winword.exe. 이름은 여러 실행 프로세스에 부합할 수 있기 때문에, 첫 번째 프로세스에만 작동합니다. 이름은 대소문자를 구별하지 않습니다.</p></dd>

  <dt>Param3</dt>
  <dd><p>자세한 것은 위에서 <em>Cmd</em>를 참조.</p></dd>

</dl>

<h3>ErrorLevel</h3>
<p>자세한 것은 위에서 <em>Cmd</em>를 참조.</p>

<h3>논평</h3>
<p>
<em>Wait</em> 그리고 <em>WaitClose</em>에 대하여: 프로세스는 100 밀리초마다 점검됩니다; 조건이 만족되는 순간, 명령어는 기다리기를 멈춥니다. 다른 말로, 시간제한이 경과하기를 기다리지 않고, 즉시 <a href="../misc/ErrorLevel.htm">ErrorLevel</a>에 위에 기술한 대로 설정한 다음, 계속해서 스크립트를 실행합니다. 또한, 명령어가 대기 상태에 있은 동안에, <a href="../Hotkeys.htm">핫키</a>, <a href="Menu.htm">맞춤 메뉴 항목</a>, 또는 <a href="SetTimer.htm">타이머</a>를 통하여 새 <a href="../misc/Threads.htm">쓰레드</a>를 기동할 수 있습니다.</p>

<h3>관련 항목</h3>
<p><a href="Run.htm">Run</a>, <a href="WinGet.htm">WinGet</a>, <a href="WinClose.htm">WinClose</a>, <a href="WinKill.htm">WinKill</a>, <a href="WinWait.htm">WinWait</a>, <a href="WinWaitClose.htm">WinWaitClose</a>, <a href="WinExist.htm">IfWinExist</a></p>

<h3>예제</h3>
<pre class="NoIndent"><em>; 예제 #1:</em>

Run Notepad.exe, , , NewPID
Process, priority, %NewPID%, High
MsgBox 새로 기동된 노트패드의 PID는 %NewPID%입니다.</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; 예제 #2:</em>

Process, wait, Notepad.exe, 5.5
NewPID = %ErrorLevel%  <em>; ErrorLevel이 자주 바뀌기 때문에 값을 즉시 저장합니다.</em>
if NewPID = 0
{
    MsgBox 지정한 프로세스가 5.5 초 이내에 나타나지 않았습니다.
    return
}
<em>; 그렇지 않으면:</em>
MsgBox 부합하는 프로세스가 나타났습니다 (프로세스 ID는 %NewPID%입니다).
Process, priority, %NewPID%, Low
Process, priority, , High  <em>; 스크립트 자체에 높은 순위를 설정합니다.</em>
WinClose Untitled - Notepad
Process, WaitClose, %NewPID%, 5
if ErrorLevel <em>; 해당 PID가 여전히 존재합니다.</em>
    MsgBox 프로세스가 5 초 이내에 닫히지 않았습니다.</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; 예제 #3: 활성 창의 프로세스 우선순위를 변경할 핫키:</em>

#z:: <em>; Win+Z 핫키</em>
WinGet, active_pid, PID, A
WinGetTitle, active_title, A
Gui, 5:Add, Text,, 취소하려면 ESCAPE를 누르거나, 다음 창에 대하여 새 우선순위를`n더블 클릭하십시오:`n%active_title%
Gui, 5:Add, ListBox, vMyListBox gMyListBox r5, Normal|High|Low|BelowNormal|AboveNormal
Gui, 5:Add, Button, default, OK
Gui, 5:Show,, Set Priority
return

5GuiEscape:
5GuiClose:
Gui, Destroy
return

MyListBox:
if A_GuiEvent &lt;&gt; DoubleClick
    return
<em>; 그렇지 않으면 다음 라벨로 갑니다:</em>
5ButtonOK:
GuiControlGet, MyListBox
Gui, Destroy
Process, Priority, %active_pid%, %MyListBox%
if ErrorLevel
    MsgBox 성공:  &quot;%MyListBox%&quot;에 우선순위가바뀌었습니다.
else
    MsgBox 에러: &quot;%MyListBox%&quot;에 우선 순위를 바꾸지 못했습니다.
return</pre>
<p>&nbsp;</p>
<pre class="NoIndent" id="ListEx"><em>; 예제 #4: DllCall을 통하여 실행 프로세스 목록을 열람하고 그 목록을 MsgBox에 보여줍니다.</em>

d := "  |  "  <em>; 문자열 가름자</em>
s := 4096  <em>; 버퍼와 배열의 크기 (4 KB)</em>

Process, Exist  <em>; ErrorLevel에 실행중인 스크립트의 PID를 설정합니다</em>
<em>; PROCESS_QUERY_INFORMATION (0x0400)로 이 스크립트의 핸들을 얻습니다</em>
h := DllCall("OpenProcess", "UInt", 0x0400, "Int", false, "UInt", ErrorLevel, "Ptr")
<em>; 다음 프로세스로 조절가능한 접근 토큰을 엽니다 (TOKEN_ADJUST_PRIVILEGES = 32)</em>
DllCall("Advapi32.dll\OpenProcessToken", "Ptr", h, "UInt", 32, "PtrP", t)
VarSetCapacity(ti, 16, 0)  <em>; 특권 구조체</em>
NumPut(1, ti, 0, "UInt")  <em>; 특권 배열에 있는 한 엔트리...</em>
<em>; 디버그 특권의 지역적으로 유일한 식별자를 열람합니다:</em>
DllCall("Advapi32.dll\LookupPrivilegeValue", "Ptr", 0, "Str", "SeDebugPrivilege", "Int64P", luid)
NumPut(luid, ti, 4, "Int64")
NumPut(2, ti, 12, "UInt")  <em>; 다음 특권을 활성 화합니다: SE_PRIVILEGE_ENABLED = 2</em>
<em>; 이 프로세스의 특권을 새 접근 토큰으로 업데이트합니다:</em>
r := DllCall("Advapi32.dll\AdjustTokenPrivileges", "Ptr", t, "Int", false, "Ptr", &amp;ti, "UInt", 0, "Ptr", 0, "Ptr", 0)
DllCall("CloseHandle", "Ptr", t)  <em>; 이 접근 토큰 핸들을 닫아서 메모리를 절약합니다</em>
DllCall("CloseHandle", "Ptr", h)  <em>; 이 프로세스 핸들을 닫아서 메모리를 절약합니다</em>

hModule := DllCall("LoadLibrary", "Str", "Psapi.dll")  <em>; 라이브러리를 미리 적재해 수행성능을 높이니다.</em>
s := VarSetCapacity(a, s)  <em>; 프로세스 식별자의 목록을 받을 배열:</em>
c := 0  <em>; 프로세스 식별자를 위한 카운터</em>
DllCall("Psapi.dll\EnumProcesses", "Ptr", &amp;a, "UInt", s, "UIntP", r)
Loop, % r // 4  <em>; 식별자를 위하여 배열을 DWORD (32 비트)로 분해합니다:</em>
{
   id := NumGet(a, A_Index * 4, "UInt")
   <em>; 다음으로 프로세스를 엽니다: PROCESS_VM_READ (0x0010) | PROCESS_QUERY_INFORMATION (0x0400)</em>
   h := DllCall("OpenProcess", "UInt", 0x0010 | 0x0400, "Int", false, "UInt", id, "Ptr")
   if !h
      continue
   VarSetCapacity(n, s, 0)  <em>; 모듈의 기본 이름을 받을 버퍼:</em>
   e := DllCall("Psapi.dll\GetModuleBaseName", "Ptr", h, "Ptr", 0, "Str", n, "UInt", A_IsUnicode ? s//2 : s)
   if !e    <em>; 32-비트 모드일 때 64-비트 프로세스를 위한 대비 방법:</em>
      if e := DllCall("Psapi.dll\GetProcessImageFileName", "Ptr", h, "Str", n, "UInt", A_IsUnicode ? s//2 : s)
         SplitPath n, n
   DllCall("CloseHandle", "Ptr", h)  <em>; 프로세스 핸들을 닫아 메모리를 절약합니다</em>
   if (n &amp;&amp; e)  <em>; 이미지가 널이 아니면 목록에 추가합니다:</em>
      l .= n . d, c++
}
DllCall("FreeLibrary", "Ptr", hModule)  <em>; 라이브러리를 내려서 메모리를 풀어줍니다</em>
<em>;Sort, l, C  ; 이 줄을 주석 해제하면 리스트를 알파벳 순서로 리스트를 정렬할 수 있습니다</em>
MsgBox, 0, %c% Processes, %l%</pre>
<p>&nbsp;</p>
<pre class="NoIndent" id="ListCom"><em>; 예제 #5: COM을 통하여 현재 실행 중인 프로세스 목록을 열람합니다.</em>

Gui, Add, ListView, x2 y0 w400 h500, Process Name|Command Line
for process in ComObjGet("winmgmts:").ExecQuery("Select * from Win32_Process")
    LV_Add("", process.Name, process.CommandLine)
Gui, Show,, Process List

<em>; Win32_Process: <a href="http://msdn.microsoft.com/en-us/library/aa394372.aspx">http://msdn.microsoft.com/en-us/library/aa394372.aspx</a></em>
</pre>

</body>
</html>
