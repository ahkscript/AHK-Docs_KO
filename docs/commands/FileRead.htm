

<html>
<head>
<title>FileRead</title>
<meta http-equiv="Content-Type" content="text/html; charset=euc-kr">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>FileRead</h1>

<p>파일의 내용을 <a href="../Variables.htm">변수</a> 안으로 읽습니다.</p>

<pre class="Syntax">FileRead, OutputVar, Filename</pre>
<h3>매개변수</h3>
<dl>

  <dt>OutputVar</dt>
  <dd><p>열람된 데이터를 저장할 <a href="../Variables.htm">변수의</a> 이름. 문제가 일어나면 예를 들어 파일이 &quot;사용 중&quot;이거나 존재하지 않으면 (이 경우 <a href="../misc/ErrorLevel.htm">ErrorLevel</a>은 1로 설정됩니다) <em>OutputVar</em>는 비워집니다. <em>Filename</em>이 빈 파일이어도 비워집니다 (이 경우 ErrorLevel은 0이 설정됩니다).</p></dd>

  <dt>Filename</dt>
  <dd><p>읽을 파일의 이름. 절대 경로를 지정하지 않으면 <a href="../Variables.htm#WorkingDir">%A_WorkingDir%</a>에 있다고 간주됩니다.</p>
      <p>
	  <strong>Options</strong>: 파일의 이름 앞에 바로 0 개 이상의 다음 문자열이 나타날 수도 있습니다. 각 옵션은 옵션 사이에 단일 스페이스 또는 탭으로 분리하십시오. 예를 들어: <code>*t *m5000 C:\Log Files\200601.txt</code>.</p>
    <p>
	<strong>*c</strong>: <a href="../misc/Clipboard.htm#ClipboardAll">ClipboardAll</a> 파일 또는 다른 이진 데이터를 적재합니다. <strong>*c</strong> 옵션이 존재하면 다른 모든 옵션은 무시됩니다.</p>
    <p>
	<strong>*m1024</strong>: 이 옵션이 생략되면, 전체 파일은 메모리가 모자라지 않는 한 적재됩니다. 이런 경우 에러 메시지가 나타납니다. 그리고 쓰레드는 종료합니다 (그러나 이를 피하려면 <a href="Try.htm">Try</a>를 사용할 수 있습니다). 그렇지 않으면, 1024를 바이트 개수의 십진수 또는 십육진 수로 교체하십시오.  파일이 이 보다 크면, 오직 그의 앞 부분만 적재됩니다. 주의: 이 때문에 마지막 줄은 `r`n이 아니라 캐리지 리턴 홀로 (`r) 끝나는 결과를 초래할 수 있습니다.</p>    
    <p>
	<strong>*t</strong>: 캐리지 리턴 &amp; 라인피드 (`r`n)가 나타나면 모두 라인피드 (`n)로 바꿉니다. 그렇지만, 이 변환은 수행성능을 줄입니다. 그리고 보통 필요하지 않습니다. 예를 들어, `r`n이 포함된 텍스트는 이미 <a href="StringReplace.htm">Gui Edit 콘트롤</a>에 추가될 올바른 형식입니다. 비슷하게, <a href="FileAppend.htm">FileAppend</a>는 새 파일을 열 때 `r`n이 있는지 탐지합니다; 각 `r`n을 있는 그대로 쓸 줄 압니다. `r`r`n으로 변환하지 않습니다. 마지막으로, 파일 끝이 `r`n로 끝나든 그냥 `n로 끝나든 상관없이 다음 <a href="LoopParse.htm">파싱 회돌이</a>는 올바르게 작동할 것입니다: <code>Loop, parse, MyFileContents, `n, `r</code>.</p>
    <p>
	<strong>*Pnnn</strong>: <span class="ver">[AHK_L 42+]:</span> <a href="FileEncoding.htm">FileEncoding</a>이 설정한 기본 인코딩을 오버라이드 합니다. 여기에서 <em>nnn</em>은 숫치 <a href="http://msdn.microsoft.com/en-us/library/dd317756.aspx">코드 페이지 식별자</a>입니다.</p></dd>

</dl>

<h3>ErrorLevel</h3>
<p><span class="ver">[v1.1.04+]</span> 이 명령어는 실패시 예외를 던질 수 있습니다. 더 자세한 정보는 <a href="Catch.htm#RuntimeErrors">실행시간 에러</a>를 참조하십시오.</p>
<p><a href="../misc/ErrorLevel.htm">ErrorLevel</a>은 적재가 성공하면 0이 설정됩니다. 문제가 일어나면 1이 설정됩니다. 예를 들면: 
<ol>
	<li>파일이 존재하지 않는다;
	<li>파일이 잠겨 있거나 접근이 불가능하다; 
	<li>시스템에 파일을 적재할 메모리가 충분하지 않다
</ol>
</p>
<p>
<a href="../Variables.htm#LastError">A_LastError</a>는 운영 체제의 GetLastError() 함수의 결과가 담깁니다.</p>

<h3 id="Binary">이진 데이터 읽기</h3>
<p>
파일, 매개변수 그리고 기본 설정에 따라, FileRead는 파일 데이터를 텍스트로 이해하고 그것을 스크립트가 사용하는 <a href="../Compat.htm#Format">고유의 인코딩</a>으로 변환합니다. 이 때문에 파일에 이진 데이터가 들어 있을 경우 문제를 야기할 수 있습니다. 다음 경우는 예외입니다:</p>
<ul>
  <li><span class="Syntax">*C</span> 옵션이 존재하면, 모든 코드 페이지와 줄끝 변환은 무조건 무시됩니다.</li>
  <li><span class="Syntax">*P<i>nnn</i></span> 옵션이 존재하고 <i>nnn</i>이 고유의 문자열 인코딩에 상응하면, 코드 페이지 변환이 일어나지 않습니다.</li>
  <li>현재 <a href="FileEncoding.htm">파일 인코딩</a> 설정이 고유의 문자열 인코딩에 상응한다면, 코드 페이지 변환은 일어나지 않습니다.</li>
</ul>
<p>
주목하십시오. 일단 데이터를 <em>OutputVar</em>를 읽어 들였다면, 오토핫키 명령어와 함수에 오직 (존재한다면) 첫 이진 0 앞의 텍스트만 &quot;보여집니다&quot;. 그렇지만, 전체 내용은 여전히 존재하고 <a href="NumGet.htm">NumGet()</a> 같은 고급 방식으로 접근할 수 있습니다.</p>
<p>
마지막으로, <a href="FileOpen.htm">FileOpen()</a> 그리고 <a href="../objects/File.htm#RawRead">File.RawRead()</a> 또는 <a href="../objects/File.htm#ReadNum">File.Read<i>Num</i>()</a> 먼저 전체 파일을 메모리로 읽어 들일 필요 없이 이진 데이터를 읽는 데 사용할 수 있습니다.</p>

<h3>논평</h3>
<p>
목적이 파일의 모든 내용 또는 일부를 메모리로 읽어 들이는 것일 때, <a href="LoopReadFile.htm">파일-읽기 회돌이</a>를 사용하는 것보다 FileRead가 수행성능이 훨씬 더 좋습니다.</p>
<p>
크기가 1 GB가 넘는 파일은 <a href="../misc/ErrorLevel.htm">ErrorLevel</a>에 1이 설정되고 그리고 <em>OutputVar</em>는 비워집니다. 단, <strong>*m</strong> 옵션이 존재하면 예외입니다. 이 경우는 파일의 앞부분이 적재됩니다.</p>
<p>
FileRead는 <a href="_MaxMem.htm">#MaxMem</a>을 준수하지 않습니다. 너무 많은 메모리를 사용할까 걱정이 되면, <a href="FileGetSize.htm">FileGetSize</a>으로 미리 파일 크기를 점검하십시오.</p>
<p>
<a href="FileOpen.htm">FileOpen()</a>은 FileRead보다 고급 기능을 제공합니다. 예를 들어 파일 전체를 메모리로 읽어 들일 필요 없이 특정한 위치에 데이터를 읽고 쓸 수 있습니다. 함수 리스트는 <a href="../objects/File.htm">파일 객체</a>를 참조하십시오.</p>

<h3>관련 항목</h3>
<p><a href="FileEncoding.htm">FileEncoding</a>, <a href="FileOpen.htm">FileOpen</a>/<a href="../objects/File.htm">File Object</a>, <a href="LoopReadFile.htm">file-reading loop</a>, <a href="FileReadLine.htm">FileReadLine</a>, <a href="FileGetSize.htm">FileGetSize</a>, <a href="FileAppend.htm">FileAppend</a>, <a href="IniRead.htm">IniRead</a>, <a href="Sort.htm">Sort</a>, <a href="URLDownloadToFile.htm">UrlDownloadToFile</a></p>

<h3>예제</h3>
<pre class="NoIndent" id="ex1"><em>; 예제 #1: 텍스트 파일을 OutputVar로 읽어 들입니다.</em>
FileRead, OutputVar, C:\My Documents\My File.txt</pre>
<pre class="NoIndent" id="ex2"><em>; 예제 #2: 파일의 내용을 신속하게 정렬합니다.</em>
FileRead, Contents, C:\Address List.txt
if not ErrorLevel  <em>; 성공적으로 적재됨.</em>
{
    <a href="Sort.htm">Sort</a>, Contents
    FileDelete, C:\Address List (alphabetical).txt
    FileAppend, %Contents%, C:\Address List (alphabetical).txt
    Contents =  <em>; 메모리를 풀어줍니다.</em>
}</pre>

</body>
</html>
