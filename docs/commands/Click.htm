<!DOCTYPE HTML>
<html lang="ko">
<head>
<title>Click</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Click <span class="ver">[v1.0.43+]</span></h1>

<p>
지정된 좌표에 마우스 버튼을 클릭합니다. 또 마우스 버튼을 누르고 있을 수 있으며 휠을 돌릴 수 있습니다. 마우스를 이동할 수도 있습니다.</p>
<p>
자주 사용되는 방법입니다 (모든 쉼표는 선택적입니다):</p>
<table class="info">
  <tr>
    <td width="110">Click (단독)</td>
    <td>왼쪽 마우스 버튼을 현재 커서 위치에 한 번 클릭합니다.</td>
  </tr>
  <tr>
    <td>Click 44, 55</td>
    <td>왼버튼을 좌표 44, 55에 한 번 클릭합니다 (<a href="CoordMode.htm">CoordMode</a>에 기반).</td>
  </tr>
  <tr>
    <td>Click right 44, 55</td>
    <td>위와 동등하지만 우버튼을 클릭합니다.</td>
  </tr>
  <tr>
    <td>Click 2</td>
    <td>왼 버튼을 커서의 현재 위치에 두 번 클릭합니다 (즉, 더블-클릭).</td>
  </tr>
  <tr>
    <td>Click down</td>
    <td>왼버튼을 누르고 그대로 있습니다.</td>
  </tr>
  <tr>
    <td>Click up right</td>
    <td>우버튼을 뗍니다.</td>
  </tr>
  <tr>
    <td>Click %x% %y%</td>
    <td>클릭은  <a href="../Variables.htm#Expressions">표현식</a>을 지원하지 않기 때문에, 변수는 퍼센트 사인으로 둘러싸야 합니다.</td>
  </tr>
</table>
<p>
0개 이상의 다음 항목들이 단어 <em>Click</em> 다음에 올 수 있습니다. 각 항목은 다음 항목과 적어도 하나의 스페이스, 탭 또는 쉼표로 분리하십시오. 항목들은 순서에 상관없이 나타날 수 있습니다. <em>ClickCount</em>는 제외하는데, (좌표가 현재 존재한다면) 좌표의 오른쪽 어딘가에 나타나야 하기 때문입니다.</p>
<p>
<strong>X, Y</strong>: 마우스 커서가 클릭하기 전에 이동해야 할 x/y 좌표. 좌표는 활성 창에 상대적입니다.  단, <a href="CoordMode.htm">CoordMode</a>가 사용되어 좌표가 변경된 경우는 제외합니다. 생략하면, 커서의 현재 위치가 사용됩니다.</p>
<p>
<strong>Button Name:</strong> Left (기본값), Right, Middle (또는 그냥 첫 문자); 또는 다섯 여섯 번째 마우스 버튼 (X1 또는 X2). 주의: <a href="MouseClick.htm">MouseClick</a>과 다르게, 왼버튼과 우버튼은 모든 시스템에 걸쳐 행위에 일관성이 있습니다. 사용자가 시스템 제어판을 통하여 버튼을 서로 바꾸었다고 할지라도 말입니다.</p>
<p>
<strong>Mouse Wheel</strong>: WheelUp 또는 WU를 지정해 휠을 위로 돌립니다 (멀어지게);  WheelDown 또는 WD를 지정해 휠을 아래로 돌립니다 (가까워지게). v1.0.48+에서, WheelLeft (WL) 또는 WheelRight (WR)을 지정할 수 있습니다 (그러나 윈도우즈 비스타 이전의 구형 버전에서는 아무 효과도 없습니다). (아래의) <em>ClickCount</em>에 대하여 돌릴 휠의 눈금을 지정합니다. 그렇지만, 어떤 어플리케이션은 마우스 휠에 대하여 1 보다 큰 <em>ClickCount</em>를 존중하지 않습니다. 그런 경우라면 다음과 같이 <a href="Loop.htm">회돌이</a>를 사용합니다:</p>
<pre>Loop 5
    Click WheelUp</pre>
<p>
<strong>ClickCount</strong>: 마우스를 클릭할 횟수 (예제: <code>Click 2</code>, <code>Click 100, 200, 2</code>). 생략하면, 버튼은 한 번 클릭됩니다. 좌표가 지정되면, <em>ClickCount</em>는 그 다음에 나타나야 합니다. 영 (0)을 지정하면 마우스를 클릭하지 않고 이동할 수 있습니다 (예를 들어: <code>Click 100, 200, 0</code>).</p>
<p>
<strong>Down</strong> 또는 <strong>Up:</strong> 이 단어들은 보통 생략됩니다. 이 경우 각 클릭마다 다운-이벤트와 다음에 업-이벤트가 따라옵니다. 그렇지 않으면, <em>Down</em>을  (또는 <em>D</em>) 지정하면 마우스 버튼을  떼지 않고 누르고 있을 수 있습니다. 나중에, <em>Up</em> (또는 <em>U</em>)를 사용하면 마우스 버튼을 뗄 수 있습니다.</p>
<p>
<strong>Relative:</strong> 단어 <em>Rel</em> 또는 <em>Relative</em>는 지정된 X와 Y 좌표를 현재 마우스 위치로부터 상대 거리로 취급합니다. 다른 말로, 커서는 그의 현재 위치로부터  X 픽셀만큼 오른쪽으로 (음의 정수이면 왼쪽으로) 그리고 Y 픽셀만큼 아래로 (음의 정수이면 위로) 이동합니다.</p>

<h3>논평</h3>
<p>
일반적으로 <a href="MouseClick.htm">MouseClick</a>보다 <em>Click</em>을 선호합니다. 왜냐하면 시스템의 제어판을 통하여 사용자가 좌우 마우스 버튼을 바꾸더라도 자동으로 보상해 주기 때문입니다.</p>
<p>
<em>Click</em>은 <a href="SendMode.htm">SendMode</a>가 설정한 전송 메쏘드를 사용합니다. 특정한 클릭에 대하여 이 모드를 오버라이드 하려면, 다음 예제와 같이 구체적인 Send 명령어를 사용하십시오: 

<code><a href="Send.htm#Click">SendEvent {Click, 100, 200}</a></code>.</p>
<p>
왼클릭이나 콘트롤-클릭을 수행하려면, 일반적으로 <code><a href="Send.htm#Click">Send {Click}</a></code> 메쏘드가 가장 쉽습니다. 예를 들어:</p>

<pre>Send +{Click 100, 200}  <em>; Shift+LeftClick</em>
Send ^{Click 100, 200, right}  <em>; Control+RightClick</em></pre>
<p>
<a href="Send.htm">Send</a>와 다르게, <em>Click</em>은 자동으로 수식 키를 떼지 않습니다 (Control, Alt, Shift, 그리고 Win). 예를 들어, Control 키가 현재 눌려 있으면, <em>Click</em>은 control-click을 생산하지만 <code>Send {Click}</code>는 보통의 클릭을 생산합니다.</p>
<p>
<a href="SendMode.htm">SendPlay 모드</a>는 다른 모드들 보다 더 광범위한 게임에 성공적으로 마우스 이벤트를 만들 수 있습니다. 게다가, 어떤 어플리케이션과 게임은 너무 빨리 움직이면 추적에 어려움이 있을 수 있습니다. 그런 경우 <a href="SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>를 사용하면 속도를 줄일 수 있습니다 (그러나 <a href="SendMode.htm">SendEvent 모드</a> 전용입니다).</p>
<p>
<a href="BlockInput.htm">BlockInput</a> 명령어를 사용하면 사용자의 물리적인 마우스 활동 때문에 마우스 명령어로 생산되는 흉내낸 마우스 이벤트들이 어질러지는 것을 막을 수 있습니다. 그렇지만, 이는 일반적으로 <a href="SendMode.htm">SendInput</a> 모드와 <a href="SendMode.htm">SendPlay</a> 모드에 필요하지 않습니다. 왜냐하면 자동으로 사용자의 물리적 마우스 움직임을 뒤로 지연하기 때문입니다.</p>
<p>
마우스를 클릭해서 누르고 뗄 때마다 뒤에 자동으로 지연시간이 있습니다 (<a href="SendMode.htm">SendInput 모드</a>와 마우스 휠 돌리기는 제외합니다). <a href="SetMouseDelay.htm">SetMouseDelay</a>를 사용하면 지연시간을 변경할 수 있습니다.</p>

<h3>관련 항목</h3>
<p><a href="Send.htm#Click">Send {Click}</a>, <a href="SendMode.htm">SendMode</a>, <a href="CoordMode.htm">CoordMode</a>, <a href="SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>, <a href="SetMouseDelay.htm">SetMouseDelay</a>, <a href="MouseClick.htm">MouseClick</a>, <a href="MouseClickDrag.htm">MouseClickDrag</a>, <a href="MouseMove.htm">MouseMove</a>, <a href="ControlClick.htm">ControlClick</a>, <a href="BlockInput.htm">BlockInput</a></p>

<h3>예제</h3>
<pre class="NoIndent">Click  <em>; 왼버튼을 마우스 커서의 현재 위치에 클릭합니다.</em>
Click 100, 200  <em>; 왼버튼을 지정된 좌표에 클릭합니다.</em>
Click 100, 200, 0  <em>; 마우스를 클릭없이 이동합니다.</em>
Click 100, 200 right  <em>; 우버튼을 클릭합니다.</em>
Click 2  <em>; 더블-클릭을 수행합니다.</em>
Click down  <em>; 왼버튼을 누르고 그대로 유지합니다.</em>
Click up right  <em>; 우버튼을 뗍니다.</em></pre>

</body>
</html>
