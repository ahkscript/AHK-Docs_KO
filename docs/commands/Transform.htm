

<html>
<head>
<title>Transform</title>
<meta http-equiv="Content-Type" content="text/html; charset=euc-kr">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Transform</h1>

<p>다양한 수학 기능과 비트별 연산 그리고 ASCII/Unicode 변환 같은 작업을 수행합니다.</p>

<pre class="Syntax">Transform, OutputVar, Cmd, Value1 [, Value2]</pre>
<h3>매개변수</h3>
<dl>

  <dt>OutputVar</dt>
  <dd><p><em>Cmd</em>의 결과를 저장할 변수의 이름. <a href="SetFormat.htm">SetFormat</a>은 정수가 십육진수로 저장될지 아니면 십진수로 저장될지 결정합니다.</p></dd>

  <dt>Cmd, Value1/2</dt>
  <dd><p>아래 리스트 참조.</p></dd>

</dl>

<h3>Cmd, Value1, Value2</h3>
<p>
<em>Cmd</em>, <em>Value1</em> 그리고 <em>Value2</em> 매개변수는 서로 의존적입니다. 그리고 그 사용법은 아래에 기술합니다.</p>
<p>
<strong><a name="Unicode"></a>Unicode [, String]</strong>: <em>(이 명령어는 유니코드 버전의 오토핫키에는 없습니다.)</em> 클립보드의 유니코드 텍스트를 열람하거나 저장합니다. 주의: 전체 클립보드는 <a href="../misc/Clipboard.htm#ClipboardAll">ClipboardAll</a>을 사용하여 열람하고 저장할 수 있습니다. 이렇게 하면 클립보드의 원본 내용의 손실 없이 &quot;Transform Unicode&quot;가 작동할 수 있습니다.</p>
<p>
다음 예제에 보여주는 바와 같이 두 가지 연산 모드가 있습니다:</p>

<pre>Transform, OutputVar, Unicode  <em>; 클립보드의 유니코드 텍스트를 UTF-8 문자열로 열람합니다.</em>
Transform, Clipboard, Unicode, %MyUTF_String%  <em>; 유니코드 텍스트를 클립보드에 배치합니다.</em></pre>
<p>
위의 두 번째 예제에서 %MyUTF_String% 대신에, 기호 그대로의 UTF-8 문자열을 선택적으로 사용할 수 있습니다.</p>
<p>
다음과 같은 핫키를 사용하면 주어진 유니코드 문자열에 상응하는 UTF-8 문자열을 알아낼 수 있습니다:</p>

<pre>^!u::  <em>; Control+Alt+U 핫키.</em>
MsgBox 유니코드 텍스트를 클립보드에 복사한 다음, 이 창으로 돌아옵니다. 계속하려면 OK를 누르십시오.
Transform, ClipUTF, Unicode
Clipboard = Transform, Clipboard, Unicode, %ClipUTF%`r`n
MsgBox 클립보드에 이제 다음 줄이 담겨 있습니다. 스크립트에 붙여 넣을 수 있습니다. 실행하면, 이 줄은 여러분이 복사한 원래의 유니코드 문자열을 클립보드에 배치합니다:`n`n%Clipboard%
return</pre>
<p>
주의: <code><a href="Send.htm#sendu">Send {U+nnnn}</a></code> 명령어는 유니코드 문자를 생산하는 또다른 방법입니다.</p>
<p>
<strong>Asc, String</strong>: <em>String</em>의 첫 문자에 대하여 ASCII 코드를 열람합니다 (1부터 255 사이의 숫자). <em>String</em>이 비어 있으면, <em>OutputVar</em>도 비워집니다. 예를 들어: <code>Transform, OutputVar, Asc, %VarContainingString%</code>. 상응하는 함수: <a href="../Functions.htm#Asc">Asc(String)</a>.</p>
<p>
<strong>Chr, Value1</strong>: <em>Value1</em>로 지정한 ASCII 코드에 상응하는 문자 하나를 열람합니다. <em>Value1</em>이 1과 255 사이에 있지 않으면, <em>OutputVar</em>는 비워져서 문제가 있음을 나타냅니다. 예를 들어: <code>Transform, OutputVar, Chr, 130</code>. 상응하는 함수: <a href="../Functions.htm#Chr">Chr(Number)</a>.</p>
<p>
<strong><a name="Deref"></a>Deref, String</strong>: 변수 참조 그리고 다른 변수 안에 들어 있는 <a href="_EscapeChar.htm">피신 연속열</a>을 확대합니다. 형식이 나쁜 변수 참조는 확대 결과에서 생략됩니다. <em>OutputVar</em>가 자신으로 확대되는 경우에도 마찬가지입니다; 다른 말로, <em>String</em>의 변수 안에서 <em>OutputVar</em>를 참조하면 확대 결과로부터 제외됩니다 (그렇지만 <em>String</em> 자체는 %<em>OutputVar</em>%가 <u>될 수 있습니다</u>). 
다음 예제에서, var1에 문자열 &quot;test&quot;가 담겨 있고 var2에 <u>기호 그대로의</u> 문자열 &quot;%var1%&quot;이 담겨 있다면, <em>OutputVar</em>는 문자열 &quot;test&quot;가 설정될 것입니다: <code>Transform, OutputVar, deref, %var2%</code>. 

<a href="../Functions.htm">함수</a> 안에서, <em>String</em> 안의 각 변수는 언제나 지역 변수로 결정납니다. 단, 그런 변수가 없을 경우는 전역 변수로 결정됩니다 (또는 아무것도 없다면 비워집니다).</p>
<p>
<strong><a name="HTML"></a>HTML, String [, Flags]</strong>:</p>
<p>
<em>ANSI 실행파일에 대하여:</em> 문자열(<em>String</em>)을 그의 HTML 동등물로 변환합니다. ASCII 값이 127이 넘는 문자를 상응하는 HTML 이름으로 변환합니다 (예, &pound;는 &amp;pound;가 됩니다). 게다가, 다음 네 개의 <code>&quot;&amp;&lt;&gt;</code> 문자는 &amp;quot;&amp;amp;&amp;lt;&amp;gt;로 변환됩니다. 마지막으로, 각 라인피드(`n)는 &lt;br&gt;`n으로 변환됩니다 (즉, &lt;br&gt; 다음에 라인피드). <em>Flags</em> 매개변수는 무시됩니다.</p>
<p>
<em>유니코드 실행파일에 대하여:</em> 위의 기능 말고도, <em>Flags</em>는 0이 되거나 아니면 다음 값들이 조합(합)이 될 수 있습니다. 생략하면, 기본값은 1입니다.</p>
<ul>
    <li>1: 어떤 문자들을 이름붙인 표현식으로 변환합니다. 예, &euro;는 <code>&amp;euro;</code>으로 변환됩니다</li>
    <li>2: 어떤 문자들을 번호붙인 표현식으로 변환합니다. 예, &#8364;는 <code>&amp;#8364;</code>으로 변환됩니다</li>
</ul>
<p>
오직 비-ASCII 문자만 영향을 받습니다. <i>Flags</i> = 3이면, 번호붙인 표현식은 이름붙인 표현식이 사용 불가능할 경우에만 사용됩니다. 다음 문자들은 언제나 변환됩니다: <code>&lt;&gt;&quot;&amp;</code> 그리고 <code>`n</code> (라인피드).</p>
<p>
<strong><a name="FromCodePage"></a>FromCodePage</strong> / <strong><a name="ToCodePage"></a>ToCodePage</strong>: 비추천.  대신 <a href="StrPutGet.htm">StrPut() / StrGet()</a>을 사용하십시오.</p>
<p>
<strong>Mod, Dividend, Divisor</strong>: 나뉘는수(<em>Dividend</em>)를 나누는수(<em>Divisor</em>)로 나눈 나머지를 열람합니다. <em>Divisor</em>가 0이면, <em>OutputVar</em>는 비워집니다. <em>Dividend</em>와 <em>Divisor</em>가 모두 소수점을 담을 수 있습니다. 음수이면, <em>Divisor</em>는 계산을 위해 양수로 취급됩니다. 다음 예제에서, 결과는 2입니다: <code>Transform, OutputVar, mod, 5, 3</code>. 상응하는 함수: <a href="../Functions.htm#Mod"><code>Mod(Dividend, Divisor)</code></a>.</p>
<p>
<strong>Pow, Base, Exponent</strong>: 밑수(<em>Base</em>)를 지수(<em>Exponent</em>) 제곱하여 열람합니다. 

<em>Base</em>와 <em>Exponent</em> 모두 소수점을 포함할 수 있습니다. <em>Exponent</em>가 음수이면, <em>OutputVar</em>는 부동 소수점 수로 포맷됩니다. <em>Base</em>와 <em>Exponent</em> 둘 다 정수라도 마찬가지입니다. 1.5와 같이 소수형 지수(<em>Exponent</em>)와 결합된 음의 <em>Base</em>는 지원하지 않습니다; 그러면 <em>OutputVar</em>가 비워집니다. 또 다음도 참조하십시오: <a href="../Variables.htm#pow">** operator</a>.</p>
<p>
<strong>Exp, N</strong>: e를 (대략 2.71828182845905) <em>N</em> 제곱해 열람합니다. <em>N</em>은 음수일 수 있으며 소수 점을 포함할 수 있습니다. 상응하는 함수: <a href="../Functions.htm#Exp">Exp(N)</a>.</p>
<p>
<strong>Sqrt, Value1</strong>:  Value1의 제곱근을 구합니다. <em>Value1</em>가 음수이면, <em>OutputVar</em>는 비워집니다. 상응하는 함수: <a href="../Functions.htm#Sqrt">Sqrt(Number)</a>.</p>
<p>
<strong>Log, Value1</strong>: <em>Value1</em>의 (밑수가 10인) 상용 로그를 구합니다. <em>Value1</em>가 음수이면, <em>OutputVar</em>는 비워집니다. 상응하는 함수: <a href="../Functions.htm#Log">Log(Number)</a>.</p>
<p>
<strong>Ln, Vaue1</strong>: <em>Value1</em>의 (밑수가 e인) 자연 로그를 열람합니다. <em>Value1</em>이 음수이면, <em>OutputVar</em>는 비워집니다. 상응하는 함수: <a href="../Functions.htm#Ln">Ln(Number)</a>.</p>
<p>
<strong>Round, Value1 [, N]</strong>: <em>N</em>을 생략하면, <em>OutputVar</em>는 <em>Value1</em>이 가장 가까운 정수로 반올림되어 설정됩니다. <em>N</em>이 양수이면, <em>Value1</em>은 <em>N</em> 소수점 자리에서 반올림됩니다. <em>N</em>이 음수이면, <em>Value1</em>는 <em>N</em> 자리만큼 소수점 왼쪽에서 반올림됩니다. 예를 들어, -1이면 첫 째 자리에서 반올림되고,  -2이면 10이 자리에서, 그리고 -3이면 백의 자리에서 반올림됩니다. 주의: Round는 소수 자리에서 반올림할 때 뒤에 따르는 0을 제거하지 않습니다. 예를 들어, 12.333을 소수 첫 째 자리에서 반올림하면 12.300000이 됩니다. 이 행위는 연산을 하기 전에<code><a href="SetFormat.htm">SetFormat</a>, Float, 0.1</code>과 같이 설정하면 바꿀 수 있습니다 (실제로, <a href="SetFormat.htm">SetFormat</a>을 사용하면 첫 째 자리에서 Round를 사용할 필요조차 없습니다). 상응하는 함수: <a href="../Functions.htm#Round">Round(Number [, N])</a>.</p>
<p>
<strong>Ceil, Value1</strong>: <em>Value1</em>을 가장 가까운 정수로 올림하여 열람합니다. 상응하는 함수: <a href="../Functions.htm#Ceil">Ceil(Number)</a>.</p>
<p>
<strong>Floor, Value1</strong>: <em>Value1</em>을 가장 가까운 정수로 내림하여 열람합니다. 상응하는 함수: <a href="../Functions.htm#Floor">Floor(Number)</a>.</p>
<p>
<strong>Abs, Value1</strong>: <em>Value1</em>의 절대 값을 열람합니다. <em>Value1</em>에서 마이너스가 앞에 있다면 제거해 버리고 돌려줍니다. 상응하는 함수: <a href="../Functions.htm#Abs">Abs(Number)</a>.</p>
<p>
<strong>Sin, Value1</strong>: <em>Value1</em>의 사인 값을 열람합니다. <em>Value1</em>은 호도로 표현되어야 합니다. 상응하는 함수: <a href="../Functions.htm#Sin">Sin(Number)</a>.</p>
<p>
<strong>Cos, Value1</strong>: <em>Value1</em>의 코사인 값을 열람합니다. <em>Value1</em>은 호도로 표현되어야 합니다. 상응하는 함수: <a href="../Functions.htm#Cos">Cos(Number)</a>.</p>
<p>
<strong>Tan, Value1</strong>: em>Value1</em>의 탄젠트 값을 열람합니다. <em>Value1</em>은 호도로 표현되어야 합니다. 상응하는 함수: <a href="../Functions.htm#Tan">Tan(Number)</a>.</p>
<p>
<strong>ASin, Value1</strong>: 호도 단위로 아크사인 값을 열람합니다 (<em>Value1</em>은 사인 값). 
<em>Value1</em>가 -1보다 작거나 1보다 크면, <em>OutputVar</em>는 비워집니다. 상응하는 함수: <a href="../Functions.htm#ASin">ASin(Number)</a>.</p>
<p>
<strong>ACos, Value1</strong>: 호도 단위로 아크코사인을 열람합니다 (<em>Value1</em>은 코사인 값).
<em>Value1</em>이 -1보다 작거나 1보다 크면, <em>OutputVar</em>는 비워집니다. 상응하는 함수: <a href="../Functions.htm#ACos">ACos(Number)</a>.</p>
<p>
<strong>ATan, Value1</strong>: 호도 단위로 아크탄젠트를 열람합니다 (<em>Value1</em>은 탄젠트 값). 상응하는 함수: <a href="../Functions.htm#ATan">ATan(Number)</a>.</p>
<br>
<p>
<b>주의</b>: 다음의 비트별 연산은 표현식에 사용하기 위해 더 간결한 <a href="../Variables.htm#bitwise">비트별 연산자</a>를 가지고 있습니다.</p>
<p>
<strong>BitNot, Value1</strong>: <em>Value1</em>을 비트별로 뒤집어서 <em>OutputVar</em>에 저장합니다 (<em>Value1</em>이 부동 소수점 수이면, 계산 전에 정수로 잘라냅니다). 

<em>Value1</em>이 0부터 4294967295 (0xffffffff) 사이이면, <u>부호 없는</u> 32-비트 값으로 취급됩니다. 그렇지 않으면 <u>부호 있는</u> 64-비트 값으로 취급됩니다. 다음 예제에서, 그 결과는 0xfffff0f0 (4294963440)입니다: <code>Transform, OutputVar, BitNot, 0xf0f</code>.</p>
<p>
<strong>BitAnd, Value1, Value2</strong>: <em>Value1</em>과 <em>Value2</em>를 비트별-AND한 결과를 열람합니다 (부동 소수점 값은 계산 전에 정수로 잘려 나갑니다). 다음 예제에서, 그 결과는 0xff00 (65280)입니다: <code>Transform, OutputVar, BitAnd, 0xff0f, 0xfff0</code>.</p>
<p>
<strong>BitOr, Value1, Value2</strong>: <em>Value1</em>과 <em>Value2</em>를 비트별-OR한 결과를 열람합니다 (부동 소수점 값은 정수로 잘라 낸 다음 계산합니다). 다음 예제에서 그 결과는 0xf0f0 (61680)입니다: <code>Transform, OutputVar, BitOr, 0xf000, 0x00f0</code>.</p>
<p>
<strong>BitXOr, Value1, Value2</strong>:<em>Value1</em>고 <em>Value2</em>를 비트별-EXCLUSIVE-OR한 결과를 열람합니다 (부동 소수점 값은 정수로 잘라낸 다음 계산합니다). 다음 예제에서 그 결과는 0xff00 (65280)입니다: <code>Transform, OutputVar, BitXOr, 0xf00f, 0x0f0f</code>.</p>
<p>
<strong>BitShiftLeft, Value1, Value2</strong>: <em>Value1</em>을 왼쪽으로 <em>Value2</em> 비트 위치 만큼 이동한 결과를 열람합니다. 이 값은 <em>Value1</em>을 &quot;<em>Value2</em> 제곱만큼 곱한&quot; 것과 동등합니다.
(부동 소수점 값은 정수로 잘라낸 다음 계산합니다). 다음 예제에서 그 결과는 8입니다: <code>Transform, OutputVar, BitShiftLeft, 1, 3</code>.</p>
<p>
<strong>BitShiftRight, Value1, Value2</strong>: <em>Value1</em>을 오른쪽으로 <em>Value2</em> 비트 위치만큼 이동한 결과를 열람합니다. 이 값은 <em>Value1</em>을 &quot; <em>Value2</em> 제곱만큼 나눈&quot; 것과 동등합니다. 나머지는 잘라내 버립니다. 
(부동 소수점 값은 정수로 잘라낸 다음 계산합니다). 다음 예제에서 그 결과는 2입니다: <code>Transform, OutputVar, BitShiftRight, 17, 3</code>.</p>

<h3>논평</h3>
<p>
숫치 매개변수를 받는 부-명령어는 그런 매개변수에 대하여 <a href="../Variables.htm#Expressions">표현식</a>도 받을 수 있습니다.</p>
<p>
<em>Value1</em> 또는 <em>Value2</em>가 부동 소수점 수이면, 다음 명령어(<em>Cmd</em>)들은 정수가 아니라 부동 소수점 수를 열람합니다: Mod, Pow, Round, 그리고 Abs. 열람된 소수 부분의 자리수는 <a href="SetFormat.htm">SetFormat</a>으로 결정됩니다.</p>
<p>
호도 값을 각도로 변환하려면, 180/pi (대략 57.29578)를 곱하십시오. 각도를 호도로 변환하려면 pi/180 (대략 0.01745329252)를 곱하십시오.</p>
<p>
pi의 값은 (대략 3.141592653589793) 1 아크탄젠트의 4 배입니다.</p>

<h3>관련 항목</h3>
<p>
<a href="SetFormat.htm">SetFormat</a>, <a href="../Variables.htm#Expressions">표현식</a>, <a href="EnvMult.htm">EnvMult</a>, <a href="EnvDiv.htm">EnvDiv</a>, <a href="StringLower.htm">StringLower</a>, <a href="IfIs.htm">if var is type</a></p>

<h3>예제</h3>
<pre class="NoIndent">Transform, OutputVar, Asc, A  <em>; 기호 A의 ASCII 코드를 얻습니다.</em></pre>

</body>
</html>
