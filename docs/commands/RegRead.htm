

<html>
<head>
<title>RegRead</title>
<meta http-equiv="Content-Type" content="text/html; charset=euc-kr">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>RegRead</h1>

<p>레지스트리로부터 값을 읽습니다.</p>

<pre class="Syntax">RegRead, OutputVar, RootKey\SubKey [, ValueName]  <em>; v1.1.21+</em>
RegRead, OutputVar, RootKey, SubKey [, ValueName]</pre>
<h3>매개변수</h3>
<dl>

  <dt>OutputVar</dt>
  <dd><p>열람된 값을 저장할 변수의 이름. 변수를 열람할 수 없으면, 변수는 비워지고 <a href="../misc/ErrorLevel.htm">ErrorLevel</a>에 1이 설정됩니다.</p></dd>

  <dt>RootKey</dt>
  <dd><p>다음 HKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CURRENT_USER, HKEY_CLASSES_ROOT, 또는 HKEY_CURRENT_CONFIG 중 하나 (또는 HKLM와 같은 약자). 원격 레지스트리에 접근하려면, 다음 예제와 같이 컴퓨터 이름과 쌍점을 (또는 v1.1.21+이면, 정사선을) 앞에 배치하십시오: <code>\\workstation01:HKEY_LOCAL_MACHINE</code></p></dd>

  <dt>SubKey</dt>
  <dd><p>하위키의 이름 (예, Software\SomeApplication).</p></dd>
  
  <dt>RootKey\SubKey <span class="ver">[v1.1.21+]</span></dt>
  <dd><p><em>RootKey</em> 다음에 정사선이 오면 (<code>\</code>), <em>RootKey</em>와 <em>SubKey</em>는 하나의 매개변수로 합병됩니다.</p></dd>

  <dt>ValueName</dt>
  <dd><p>열람될 값의 이름. 생략하면, <em>Subkey</em>의 기본 값이 열람됩니다. 이 값은 RegEdit이 &quot;(Default)&quot;로 보여주는 값입니다. 기본 값이 없다면 (즉, RegEdit &quot;value not set&quot;이라고 보여주면), <em>OutputVar</em>는 비워지고 ErrorLevel은 1이 설정됩니다.</p></dd>

</dl>
<h3>ErrorLevel</h3>
<p>
<span class="ver">[v1.1.04+]</span> 이 명령어는 실패시 예외를 던질 수 있습니다. 더 자세한 정보는 <a href="Catch.htm#RuntimeErrors">실행시간 에러</a>를 참조하십시오.</p>
<p>
<a href="../misc/ErrorLevel.htm">ErrorLevel</a>은 문제가 있었으면 1이 설정되고 (예를 들어 존재하지 않는 값이나 키) 그렇지 않으면 0이 설정됩니다.</p>
<p>
<a href="../Variables.htm#LastError">A_LastError</a>은 운영 체제의 GetLastError() 함수의 결과가 저장됩니다.</p>

<h3>논평</h3>
<p>
현재 다음의 값 유형만 지원됩니다: REG_SZ, REG_EXPAND_SZ, REG_MULTI_SZ, REG_DWORD, 그리고 REG_BINARY.</p>
<p>
REG_DWORD 값은 언제나 양의 십진수로 표현됩니다.</p>
<p>
REG_BINARY 키를 읽을 때 그 결과는 십육진 문자로 구성된 문자열입니다. 예를 들어 REG_BINARY 값이 01,a9,ff,77이면 문자열 01A9FF77로 읽힙니다.</p>
<p>
REG_MULTI_SZ 키를 읽을 때, 각 구성요소는 라인피드 문자로 끝납니다 (`n). 구성요소가 없다면, <em>OutputVar</em>는 비워집니다. <em>OutputVar</em>로부터 개별적으로 구성요소를 추출하는 방법을 보여주는 예는 <a href="FileSelectFile.htm">FileSelectFile</a>을 참조하십시오.</p>
<p>
REG_BINARY 값이 64K보다 크면 v1.1.10.01 이상에서만 읽을 수 있습니다.</p>
<p>
여러 레지스트리 키나 값을 열람하고 처리하려면, <a href="LoopReg.htm">레지스트리-회돌이</a>의 사용을 고려해 보십시오.</p>
<p>
원격 컴퓨터의 레지스트리에 접근하는 법에 관한 자세한 정보는 <a href="LoopReg.htm">레지스트리-회돌이</a>의 논평을 참조하십시오.</p>
<p>
32-비트 스크립트에서 64-비트 섹션의 레지스트리로부터 엔트리를 또는 그 반대로 읽고 쓰려면, <a href="SetRegView.htm">SetRegView</a>를 사용하십시오.</p>

<h3>관련 항목</h3>
<p><a href="RegDelete.htm">RegDelete</a>, <a href="RegWrite.htm">RegWrite</a>, <a href="LoopReg.htm">Registry-loop</a>, <a href="SetRegView.htm">SetRegView</a>, <a href="IniRead.htm">IniRead</a></p>

<h3>예제</h3>
<pre class="NoIndent"><em>; 예제: 프로그램 파일 디렉토리의 경로를 열람합니다.

; 아래의 줄은 OS는 64-비트인데 스크립트는 그렇지 않을 경우,
; 64-비트 프로그램 파일의 경로가 반환된다는 것을 확인합니다.</em>
<a href="SetRegView.htm">SetRegView</a> 64  <em>; v1.1.08+ 필요</em>

RegRead, OutputVar, HKEY_LOCAL_MACHINE<span class="red">,</span> SOFTWARE\Microsoft\Windows\CurrentVersion, ProgramFilesDir
MsgBox, Program files are in: %OutputVar%

<em>; 다른 구문 (v1.1.21+ 필요):</em>
RegRead, OutputVar, HKEY_LOCAL_MACHINE<span class="red">\</span>SOFTWARE\Microsoft\Windows\CurrentVersion, ProgramFilesDir
MsgBox, Program files are in: %OutputVar%

<em>; 프로그램 파일 디렉토리 경로를 열람하는 또다른 방법:</em>
EnvGet OutputVar, % <a href="../Variables.htm#Is64bitOS">A_Is64bitOS</a> ? "ProgramW6432" : "ProgramFiles"
MsgBox, Program files are in: %OutputVar%
</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; 다음 예제는 레지스트리 값의 유형을 열람합니다 (예, REG_SZ 또는 REG_DWORD).</em>
MsgBox % RegKeyType(&quot;HKCU&quot;, &quot;Environment&quot;, &quot;TEMP&quot;)
return

RegKeyType(RootKey, SubKey, ValueName)  <em>; 이 함수는 지정된 값의 유형을 돌려줍니다.</em>
{
    Loop, %RootKey%, %SubKey%
        if (A_LoopRegName = ValueName)
            return A_LoopRegType
    return &quot;Error&quot;
}</pre>

</body>
</html>
