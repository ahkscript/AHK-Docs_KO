<html>
<head>
<title>WinLIRC Client</title>
<meta http-equiv="Content-Type" content="text/html; charset=euc-kr">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<meta name="description" content="This open-source WinLIRC client can perform keystrokes, mouse clicks, and other actions in response to buttons you press on your remote control.">
</head>
<body>

<h1>WinLIRC 클라이언트</h1>

<p>
이 스크립트는 리모트 콘트롤에 버튼을 누를 때마다 <a href="http://winlirc.sourceforge.net">WinLIRC</a> 로부터 고지를 받습니다. Winamp, Windows Media Player, 등등을 자동화 하는 데 사용할 수 있습니다. 쉽게 환경을 구성할 수 있습니다. 예를 들어 WinLIRC가 리모트 콘트롤에서 이름이 &quot;VolUp&quot;인 버튼을 인지하면, 이름이 VolUp인 라벨을 생성하고 그 아래에 명령어 <code>SoundSet +5</code>를 사용하여 사운드카드의 볼륨을 5%만큼 높입니다.
</p>
<p><a href="WinLIRC.ahk">이 스크립트 내려받기</a> &nbsp;| &nbsp;<a href="index.htm">다른 샘플 스크립트</a> &nbsp;| &nbsp;<a href="../AutoHotkey.htm">홈으로</a></p>

<pre class="NoIndent"><em>; 다음은 이 스크립트를 사용하는 방법입니다:
; 1) 리모트 콘트롤과 버튼을 인식하도록 WinLIRC를 구성합니다.
;    WinLIRC는 다음에 있습니다: <a href="http://winlirc.sourceforge.net">http://winlirc.sourceforge.net</a>
; 2) 아래의 CONFIG 섹션에서 WinLIRC 경로, 주소, 그리고 포트 번호를 편집합니다.
; 3) 이 스크립트를 기동시킵니다. 필요하면 WinLIRC 서버가 자동으로 기동됩니다.
; 4) 리모트 콘트롤에서 버튼을 눌러 봅니다. 버튼을 누를 때마다 
;    작은 창이 나타나 그 버튼의 이름을 보여줍니다.
; 5) 버튼을 구성해 Winamp, Media Player, 등등과 같은 창에
;     키눌림과 마우스 클릭을 전송합니다. 아래 예제를 참조하십시오.</em>

<em>; 이 스크립트는 AutoHotkey 1.0.38.04 이상을 요구합니다.
; 변경 이력
; March 2, 2007:
; - ReceiveData()에 &quot;Critical&quot;를 통하여 신뢰성 개선.
; October 5, 2005:
; - 시스템이 셧다운/로그오프할 때 Winsock 경고 대화상자 &quot;10054&quot;가 나타나는 것을 제거.
; - 반복 속도를 감소시키기 위해 옵션 &quot;DelayBetweenButtonRepeats&quot;를 추가.</em>

<em>; -------------------------------------------------------------
; CONFIGURATION SECTION: 여기에 원하는 대로 설정합니다.
; -------------------------------------------------------------
; 어떤 리모콘은 버튼을 누르고 있는 동안 신호를 빠르게 반복해 보냅니다.
; 이 때문에 리모트 콘트롤이 오직 하나의 신호만 전송하도록 만들기가 어렵습니다
; 다음 설정은  지정된 시간이 경과할 때까지 반복된 신호를 무시함으로써
; 이 문제를 해결합니다. 200이면 보통 좋은 설정입니다.
; 0으로 설정하면 이 특징을 불능으로 만듭니다.</em>
DelayBetweenButtonRepeats = 200

<em>; 경로를 WinLIRC에 지정합니다. 예를 들어 C:\WinLIRC\winlirc.exe</em>
WinLIRC_Path = %A_ProgramFiles%\WinLIRC\winlirc.exe

<em>; WinLIRC의 주소와 포트를 지정합니다. 보통 127.0.0.1 (localhost)과 8765입니다.</em>
WinLIRC_Address = 127.0.0.1
WinLIRC_Port = 8765

<em>; 다음 두 줄은 변경하지 마십시오. 건너뛰고 아래에서 계속하십시오.</em>
Gosub WinLIRC_Init
return

<em>; --------------------------------------------
; ASSIGN ACTIONS TO THE BUTTONS ON YOUR REMOTE
; --------------------------------------------
; 아래에서 리모트 콘트롤 버튼을 구성하십시오. 버튼에 WinLIRC의 이름을 사용합니다.
; 이름은 WinLIRC 환경구성 파일(.cf)에서 보실 수 있습니다.
;  -- 아니면 리모트 콘트롤에 버튼을 마우것나 누르면
; 스크립트가 작은 창에 그 버튼의 이름을 잠시 보여줍니다.
; 
; 아래는 몇 가지 예제입니다.
;  자유롭게 여러분의 기호에 맞게 개조하거나 지원도 됩니다.</em>

VolUp:
SoundSet +5  <em>; 마스터 볼륨을 5%만큼 늘립니다. Vista에서는 이 줄을 다음으로 교체하십시오: Send {Volume_Up}</em>
return

VolDown:
SoundSet -5  <em>; 마스터 볼륨을 5%만큼 줄입니다. Vista에서는 이 줄을 다음으로 교체하십시오: Send {Volume_Down}</em>
return

ChUp:
WinGetClass, ActiveClass, A
if ActiveClass in Winamp v1.x,Winamp PE  <em>; Winamp가 활성화 되어 있습니다.</em>
    Send {right}  <em>; 오른쪽-화살표 키눌림을 전송합니다.</em>
else  <em>; 다른 유형의 창이 활성화 되어 있습니다.</em>
    Send {WheelUp}  <em>; 마우스 휠을 한 눈금 위로 돌립니다.</em>
return

ChDown:
WinGetClass, ActiveClass, A
if ActiveClass in Winamp v1.x,Winamp PE  <em>; Winamp가 활성화 되어 있습니다.</em>
    Send {left}  <em>; 왼쪽-화살표 키눌림을 전송합니다.</em>
else  <em>; 다른 유형의 창이 활성화 되어 있습니다.</em>
    Send {WheelDown}  <em>; 마우스 휠을 한 눈금 아래로 돌립니다.</em>
return

Menu:
IfWinExist, Untitled - Notepad
{
    WinActivate
}
else
{
    Run, Notepad
    WinWait, Untitled - Notepad
    WinActivate
}
Send Here are some keystrokes sent to Notepad.{Enter}
return

<em>; 위의 예제에서 어떻게 일반적인 과업을 달성하는지 감을 잡을 수 있습니다.
; 오토핫키의 기본 지식을 습득하려면 빨지 시작하기 자습서를 찾아 보시기 바랍니다:
; <a href="http://www.autohotkey.com/docs/Tutorial.htm">http://www.autohotkey.com/docs/Tutorial.htm</a></em>

<em>; ----------------------------
; END OF CONFIGURATION SECTION
; ----------------------------
; 이 시점 이후로 변경하지 마십시오.
; 단, 스크립트의 핵심 기능을 바꾸고 싶다면 예외입니다.</em>

WinLIRC_Init:
OnExit, ExitSub  <em>; 접속 청소 목적을 위해.</em>

<em>; 아직 실행되지 않았다면 WinLIRC를 기동합니다:</em>
Process, Exist, winlirc.exe
if not ErrorLevel  <em>; WinLIRC에 대한 PID가 발견되지 않았습니다.</em>
{
    IfNotExist, %WinLIRC_Path%
    {
        MsgBox 파일 &quot;%WinLIRC_Path%&quot;가 존재하지 않습니다. 이 스크립트를 편집해 그 위치를 지정하십시오.
        ExitApp
    }
    Run %WinLIRC_Path%
    Sleep 200  <em>; WinLIRC에 초기화 할 시간을 줍니다 (아마도 거의 필요하지 않을 겁니다. 신경쓰지 마십시오).</em>
}

<em>; WinLIRC에 접속합니다 (또는 그를 대신하면 어떤 종류의 서버이든 접속합니다):</em>
socket := ConnectToAddress(WinLIRC_Address, WinLIRC_Port)
if socket = -1  <em>; 접속 실패 (이미 이유는 보여주었습니다).</em>
    ExitApp

<em>; 이 스크립트의 메인 창을 찾습니다:</em>
Process, Exist  <em>; 이렇게 하면 ErrorLevel에 이 스크립트의 PID가 설정됩니다 (이런식으로 하면 컴파일된 스크립트를 지원할 수 있습니다).</em>
DetectHiddenWindows On
ScriptMainWindowId := WinExist(&quot;ahk_class AutoHotkey ahk_pid &quot; . ErrorLevel)
DetectHiddenWindows Off

<em>; OS가 스크립트에게 들어오는 데이터가 수신되기를 기다리고 있다고 고지할 때,
; 다음은 그 데이터를 읽기 위하여 함수를 기동시킵니다:</em>
NotificationMsg = 0x5555  <em>; 임의의 메시지 번호, 그러나 0x1000 보다는 커야 합니다.</em>
OnMessage(NotificationMsg, &quot;ReceiveData&quot;)

<em>; 접속을 설정해 이 스크립트에게 새로 데이터가 도착할 때마다 메시지를 통하여 고지합니다.
; 이렇게 하면 접속을 폴할 필요가 없으므로, 자원 낭비가 감소합니다.</em>
FD_READ = 1     <em>; 데이터를 읽을 수 있을 때 수신됩니다.</em>
FD_CLOSE = 32   <em>; 접속이 닫힐 때 수신됩니다.</em>
if DllCall(&quot;Ws2_32\WSAAsyncSelect&quot;, &quot;UInt&quot;, socket, &quot;UInt&quot;, ScriptMainWindowId, &quot;UInt&quot;, NotificationMsg, &quot;Int&quot;, FD_READ|FD_CLOSE)
{
    MsgBox % &quot;WSAAsyncSelect() indicated Winsock error &quot; . DllCall(&quot;Ws2_32\WSAGetLastError&quot;)
    ExitApp
}
return



ConnectToAddress(IPAddress, Port)
<em>; 대부분의 유형의 TCP 서버에 접속할 수 있습니다. WinLIRC 만으로 제한되지 않습니다.
; 실패하면 -1 (INVALID_SOCKET)을 돌려주고 성공하면 소켓 ID를 돌려줍니다.</em>
{
    VarSetCapacity(wsaData, 400)
    result := DllCall(&quot;Ws2_32\WSAStartup&quot;, &quot;UShort&quot;, 0x0002, &quot;UInt&quot;, &amp;wsaData) <em>; Winsock 2.0 (0x0002)을 요구합니다</em>
    <em>; WSAStartup()이 이스크립트가 첫 번째로 호출한 Winsock 함수일 가능성이 높으므로,</em>
    <em>; ErrorLevel을 점검해 OS에 Winsock 2.0이 있는지 알아 봅니다:</em>
    if ErrorLevel
    {
        MsgBox WSAStartup() could not be called due to error %ErrorLevel%. Winsock 2.0 or higher is required.
        return -1
    }
    if result  <em>; 0이 아니라면, 실패했다는 뜻입니다 (대부분의 Winsock 함수는 성공하면 0을 돌려줍니다).</em>
    {
        MsgBox % &quot;WSAStartup() indicated Winsock error &quot; . DllCall(&quot;Ws2_32\WSAGetLastError&quot;)
        return -1
    }

    AF_INET = 2
    SOCK_STREAM = 1
    IPPROTO_TCP = 6
    socket := DllCall(&quot;Ws2_32\socket&quot;, &quot;Int&quot;, AF_INET, &quot;Int&quot;, SOCK_STREAM, &quot;Int&quot;, IPPROTO_TCP)
    if socket = -1
    {
        MsgBox % &quot;socket() indicated Winsock error &quot; . DllCall(&quot;Ws2_32\WSAGetLastError&quot;)
        return -1
    }

    <em>; 접속을 준비합니다:</em>
    SizeOfSocketAddress = 16
    VarSetCapacity(SocketAddress, SizeOfSocketAddress)
    InsertInteger(2, SocketAddress, 0, AF_INET)   <em>; sin_family</em>
    InsertInteger(DllCall(&quot;Ws2_32\htons&quot;, &quot;UShort&quot;, Port), SocketAddress, 2, 2)   <em>; sin_port</em>
    InsertInteger(DllCall(&quot;Ws2_32\inet_addr&quot;, &quot;AStr&quot;, IPAddress), SocketAddress, 4, 4)   <em>; sin_addr.s_addr</em>

    <em>; 접속을 시도합니다:</em>
    if DllCall(&quot;Ws2_32\connect&quot;, &quot;UInt&quot;, socket, &quot;UInt&quot;, &amp;SocketAddress, &quot;Int&quot;, SizeOfSocketAddress)
    {
        MsgBox % &quot;connect() indicated Winsock error &quot; . DllCall(&quot;Ws2_32\WSAGetLastError&quot;) . &quot;. Is WinLIRC running?&quot;
        return -1
    }
    return socket  <em>; -1 말고 유효한 소켓 ID를 돌려주어 성공을 알립니다.</em>
}



ReceiveData(wParam, lParam)
<em>; OnMessage()를 수단으로, 이 함수는 새 데이터가 접속에 도착할 때마다
; 자동으로 호출되도록 설정되어 있습니다. 데이터를 WinLIRC로부터 읽어서
; 그 내용에 따라 적절하게 조치를 취합니다.</em>
{
    Critical  <em>; 이미 쓰레드가 실행되어 있기 때문에 또다른 같은 메시지가 폐기되지 않도록 막습니다.</em>
    socket := wParam
    ReceivedDataSize = 4096  <em>; 이전 데이터를 처리하는데 지연 시간이 있어서 많은 데이터가 버퍼에 찰 경우를 대비해 크게 잡습니다.</em>

    VarSetCapacity(ReceivedData, ReceivedDataSize, 0)  <em>; recv()에 사용하기 위해 0을 마지막 매개변수에 지정해 문자열을 종료합니다.</em>
    ReceivedDataLength := DllCall(&quot;Ws2_32\recv&quot;, &quot;UInt&quot;, socket, &quot;Str&quot;, ReceivedData, &quot;Int&quot;, ReceivedDataSize, &quot;Int&quot;, 0)
    if ReceivedDataLength = 0  <em>; 접속이 우아하게 닫혔습니다. 아마도 WinLIRC를 끝냈기 때문일 것입니다.</em>
        ExitApp  <em>; OnExit 루틴이 우리를 대신하여 WSACleanup()을 호출해 줍니다.</em>
    if ReceivedDataLength = -1
    {
        WinsockError := DllCall(&quot;Ws2_32\WSAGetLastError&quot;)
        if WinsockError = 10035  <em>; WSAEWOULDBLOCK, &quot;더 이상 읽을 데이터가 없다&quot;는 뜻입니다.</em>
            return 1
        if WinsockError &lt;&gt; 10054 <em>; WSAECONNRESET, WinLIRC가 시스템 셧다운/로그오프를 통하여 닫힐 때 일어납니다.</em>
            <em>; 예측 하지 못한 에러이므로 보고합니다.  또 무한 회돌이를 피하기 위해 종료합니다.</em>
            MsgBox % &quot;recv() indicated Winsock error &quot; . WinsockError
        ExitApp  <em>; OnExit 루틴이 우리를 대신에 WSACleanup()를 호출합니다.</em>
    }
    <em>; 그렇지 않으면, 수신된 데이터를 처리합니다. 테스트에 의하면 한 번에 한 줄 이상을 얻을 수 있습니다</em>
    <em>; (명시적으로-전송된 IR 신호에 대해서도 마찬가지입니다), 다음 메쏘드가 적절하게 처리합니다.</em>
    <em>; WinLIRC로부터 얻은 데이터는 다음 예제와 비슷합니다 (자세한 것은 WinLIRC 문서를 참조하십시오):</em>
    <em>; 0000000000eab154 00 NameOfButton NameOfRemote</em>
    Loop, parse, ReceivedData, `n, `r
    {
        if A_LoopField in ,BEGIN,SIGHUP,END  <em>; 빈 줄과 WinLIRC의 시작 메시지를 무시합니다.</em>
            continue
        ButtonName =  <em>; 아래에서 3 개 보다 적게 필드가 발견될 경우를 대비해 비워서 초기화합니다.</em>
        Loop, parse, A_LoopField, %A_Space%  <em>; 버튼 이름을 추출합니다. 세 번째 필드입니다.</em>
            if A_Index = 3
                ButtonName := A_LoopField
        global DelayBetweenButtonRepeats  <em>; 전역 변수를 선언해 이 함수에 적용합니다.</em>
        static PrevButtonName, PrevButtonTime, RepeatCount  <em>; 이 변수들은 호출 사이에 값을 기억합니다.</em>
        if (ButtonName != PrevButtonName || A_TickCount - PrevButtonTime &gt; DelayBetweenButtonRepeats)
        {
            if IsLabel(ButtonName)  <em>; 이 버튼에 연관된 서브루틴이 있습니다.</em>
                Gosub %ButtonName%  <em>; 그 서브루틴을 기동시킵니다.</em>
            else <em>; 연관된 서브루틴이 없으므로, 간략하게 어느 버튼이 눌렸는지 보여줍니다.</em>
            {
                if (ButtonName == PrevButtonName)
                    RepeatCount += 1
                else
                    RepeatCount = 1
                SplashTextOn, 150, 20, Button from WinLIRC, %ButtonName% (%RepeatCount%)
                SetTimer, SplashOff, 3000  <em>; 이렇게 하면 창이 보이는 동안에 더 많은 신호를 처리할 수 있습니다.</em>
            }
            PrevButtonName := ButtonName
            PrevButtonTime := A_TickCount
        }
    }
    return 1  <em>; 프로그램에게 더 이상 이 메시지를 처리할 필요가 없다고 알립니다.</em>
}



SplashOff:
SplashTextOff
SetTimer, SplashOff, Off
return



InsertInteger(pInteger, ByRef pDest, pOffset = 0, pSize = 4)
<em>; 호출자는 pDest의 가용 능력이 충분한지 확인해야 합니다. 기존의 내용을 pDest에 보존하기 위해,
; pOffset에서 시작해서 오직 pSize 개수의 바이트만 변경됩니다.</em>
{
    Loop %pSize%  <em>; 각 바이트를 구조체 안으로 날 이진 데이터로 복사합니다.</em>
        DllCall(&quot;RtlFillMemory&quot;, &quot;UInt&quot;, &amp;pDest + pOffset + A_Index-1, &quot;UInt&quot;, 1, &quot;UChar&quot;, pInteger &gt;&gt; 8*(A_Index-1) &amp; 0xFF)
}



ExitSub:  <em>; 이 서브루틴은 스크립트가 어떤 이유로 종료될 때 자동으로 호출됩니다.
; MSDN에 의하면: &quot;WSACleanup이 호출될 때 열린 소켓은 모두 리셋되고 
; 마치 closesocket 이 호출될 것처럼 자동으로 할당이 해제됩니다.&quot;</em>
DllCall(&quot;Ws2_32\WSACleanup&quot;)
ExitApp
</pre>
</body>
</html>
