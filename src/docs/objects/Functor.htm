<html>
<head>
<title>Function Objects</title>
<meta http-equiv="Content-Type" content="text/html; charset=euc-kr">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>함수 객체</h1>

<p>"함수 객체"는 보통 다음을 뜻합니다:</p>
<ul>
  <li><a href="Func.htm">Func object</a>를 가리키는 참조 주소. 실제 <a href="../Functions.htm">함수</a>를 가리킵니다; 내장 함수 또는 스크립트에 정의된 함수.</li>
  <li>함수처럼 호출할 수 있는 사용자-정의 객체. 이는 종종 "functor"라고 지칭되기도 합니다.</li>
  <li>함수처럼 호출할 수 있는 다른 객체. 예를 들어  COM 메쏘드가 반환하는 <a href="#BoundFunc">BoundFunc object</a> 또는 JavaScript 함수 객체.</li>
</ul>
<p>함수 객체는 다음과 함께 사용할 수 있습니다:</p>
<ul>
  <li><a href="../commands/Gui.htm#label">구이 콘트롤 이벤트</a> (g-labels)</li>
  <li><a href="../commands/Hotkey.htm#Functor">핫키</a></li>
  <li><a href="../commands/Menu.htm#Functor">메뉴</a></li>
  <li><a href="../commands/OnClipboardChange.htm">OnClipboardChange()</a></li>
  <li><a href="../commands/OnExit.htm">OnExit()</a></li>
  <li><a href="../commands/OnMessage.htm">OnMessage()</a></li>
  <li><a href="../commands/SetTimer.htm#Functor">SetTimer</a></li>
</ul>

<h2 id="User-Defined">사용자-정의 함수</h2>
<!-- TODO: Explain how a user-defined object could be useful -->
<p>
사용자-정의 함수 객체는 다음 일반 패턴을 따라야 합니다:</p>
<pre>class YourClassName {
    Call(a, b) {  <em>; 필요한 만큼 매개변수를 선언하거나, <a href="../Functions.htm#Variadic">array*</a>를 선언합니다.</em>
        <em>;...</em>
    }
    __Call(method, args*) {
        if (method = "")  <em>; For <a href="../Functions.htm#DynCall">%fn%()</a> or fn.()</em>
            return this.Call(args*)
        if (IsObject(method))  <em>; 이 함수 객체가 메쏘드로 사용되면.</em>
            return this.Call(method, args*)
    }
    <em>;...</em>
}
</pre>
<p>정확하게 어느 부분이 필요한지는 사용법에 따라 다릅니다:</p>
<ul>
  <li>스크립트가 <code><a href="../Functions.htm#DynCall">%this%()</a></code>나 <code>this.()</code>를 사용했다면 <code>method</code>는 빈 문자열입니다.</li>
  <li>이 함수 객체가 메쏘드로 사용중이라면, <code>IsObject(method)</code>는 참이고 <code>method</code>에는 목표 객체를 가리키는 참조 주소가 담깁니다. 예를 들어, <code>x.y</code>가 <code>this</code> 함수 객체를 가리키면, <code>x.y()</code> &rarr; <code>this[x]()</code> &rarr; <code>this.__Call(x)</code> &rarr; <code>this.Call(x)</code>.</li>
  <li><span class="ver">[v1.1.20+]:</span> OnMessage나 SetTimer와 같이 역호출 함수를 받는 내장 함수 중 하나가 이 함수 객체를 사용중이면, Call 메쏘드만 필요합니다.</li>
</ul>
<p>
 __Call으로 직접 같은 일을 할 수 있습니다. 그렇지만, __Call을 Call로 방향전환하기를 권장합니다. 쉽게  AutoHotkey v2로 이전할 수 있습니다. 오토핫키 v2에서 <code>%this%()</code>의 행위와 메쏘드 호출은 직접적으로 Call 메쏘드를 호출하도록 변경되었습니다.</p>

<h2 id="BoundFunc">BoundFunc Object <span class="ver">[v1.1.20+]</span></h2>
<p>
함수처럼 행위합니다. 그러나 그저 미리 정의된 매개변수를 다른 함수로 건네는 역할만 합니다.</p>
<p>
두 가지 방법으로 BoundFunc 객체를 생성할 수 있습니다:</p>
<ul>
  <li><a href="Func.htm#Bind">Func.Bind()</a> 메쏘드를 호출하면, 매개변수 값을 함수에 묶습니다.</li>
  <li><a href="../commands/ObjBindMethod.htm">ObjBindMethod()</a>를 호출하면, 매개변수 값과 메쏘드 이름을 목표 객체에 묶습니다.</li>
</ul>
<p>
BoundFunc 객체는 아래 예제에 보여주는 바와 같이 호출할 수 있습니다. 다른 메쏘드는 지원하지 않습니다. BoundFunc가 호출될 때, 그에 묶인 함수나 메쏘드를 호출하면서, 묶인 매개변수와 그리고 호출자가 건넨 것을 모두 건넵니다. 예를 들어:</p>
<pre>fn := Func("RealFn").Bind(1)

%fn%(2)    <em>; Shows "1, 2"</em>
fn.Call(3) <em>; Shows "1, 3"</em>

RealFn(a, b) {
    MsgBox %a%, %b%
}</pre>
<p>
<a href="../commands/ObjBindMethod.htm">ObjBindMethod()</a>를 사용하면 메쏘드 자체를 가리키는 참조 주소를 열람할 수 없을 때 메쏘드에 묶을 수 있습니다. 예를 들어:</p>

<pre>file := FileOpen(A_ScriptFullPath, "r")
getLine := ObjBindMethod(file, "ReadLine")
MsgBox % %getLine%()  <em>; 이 파일의 첫 줄을 보여줍니다.</em></pre>

</body>
</html>
