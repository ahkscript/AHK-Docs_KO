<html>
<head>
<title>Object</title>
<meta http-equiv="Content-Type" content="text/html; charset=euc-kr">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>객체</h1>

<p>오토핫키의 기본 객체 데이터유형은 연관 배열입니다. 그의 행위를 <a href="../Objects.htm#Custom_Objects">재단할 수 있는</a> 특징이 있습니다. 기본값으로, <code>{}</code>, <code>[]</code>, <code>Object()</code> 그리고 <code>Array()</code>가 생성한 모든 객체는 다음 메쏘드를 지원합니다:</p>
<ul>
  <li><a href="#InsertAt">InsertAt</a> / <a href="#RemoveAt">RemoveAt</a></li>
  <li><a href="#Push">Push</a> / <a href="#Pop">Pop</a></li>
  <li><a href="#Delete">Delete</a></li>
	<li><a href="#MinMaxIndex">MinIndex / MaxIndex</a> / <a href="#Length">Length</a></li>
	<li><a href="#SetCapacity">SetCapacity</a> / <a href="#GetCapacity">GetCapacity</a></li>
	<li><a href="#GetAddress">GetAddress</a></li>
	<li><a href="#NewEnum">_NewEnum</a></li>
	<li><a href="#HasKey">HasKey</a></li>
	<li><a href="#Clone">Clone</a></li>
  <li><a href="#RawSet">ObjRawSet</a> (function)</li>
</ul>
<p><strong>비추천</strong> (사용을 권장하지 않습니다):</p>
<ul>
	<li><a href="#Insert">Insert</a></li>
	<li><a href="#Remove">Remove</a></li>
</ul>
<p>
각 메쏘드 마다 동등한 함수가 있습니다. 이 함수를 사용하면 다른 객체가 구현한 <a href="../Objects.htm#Custom_Objects">맞춤 행위</a>를 우회할 수 있습니다 -- 이 함수들은 꼭 우회의 목적으로만 사용하시기를 권장합니다. 호출하려면, 메쏘드 이름 앞에 "Obj"를 붙인 다음 목표 객체를 첫 번째 매개변수로 건네십시오. 예를 들어:</p>
<pre>array := [1, 2, 3]
MsgBox % ObjMaxIndex(array) " = " array.MaxIndex()</pre>
<p>
Obj 함수가 잘못된 유형의 객체 또는 값으로 호출되면, 빈 문자열을 돌려줍니다.</p>
&nbsp;

<div class="methodShort" id="InsertAt"><h2>InsertAt <span class="ver">[v1.1.21+]</span></h2>
<p>
하나 이상의 값을 선형 배열 안에 주어진 위치에 삽입합니다..</p>
<pre class="Syntax">Object.InsertAt(Pos, Value1 [, Value2, ... Value<i>N</i>])</pre>
<dl>
  <dt>Pos</dt>
  <dd><p><em>Value1</em>을 삽입할 위치. 연이은 값은 Pos+1, Pos+2, 등등에 삽입됩니다.</p></dd>
  <dt>Value1 ...</dt>
  <dd><p>삽입할 하나 이상의 값들. 값 배열을 삽입하려면, 마지막 매개변수로 <code><a href="../Functions.htm#VariadicCall">theArray*</a></code>를 건네십시오.</p></dd>
</dl>
<h3>논평</h3>
<p>
InsertAt은 <a href="#RemoveAt">RemoveAt</a>과 상대적입니다.</p>
<p>
객체는 연관 배열이므로, <em>Pos</em>도 <em>Value1</em> 값과 연관되는 정수 키입니다. 이전에 <em>Pos</em> 위치와 그 오른쪽에 있는 항목들은 정확하게 매개변수의 갯수만큼 오른쪽으로 이동합니다. 그 결과 몇몇 값들이 소실될 수 있습니다 (즉, 이 객체는 희소 배열입니다). 예를 들어:</p>
<pre>x := []
x.InsertAt(1, "A", "B") <em>; =>  ["A", "B"]</em>
x.InsertAt(2, "C")      <em>; =>  ["A", "C", "B"]</em>

<em>; 성긴/할당되지 않은 원소는 보존됩니다:</em>
x := ["A", , "C"]
x.InsertAt(2, "B")      <em>; =>  ["A", "B",    , "C"]</em>

x := ["C"]
x.InsertAt(1, , "B")    <em>; =>  [   , "B", "C"]</em></pre>
<p>
InsertAt은 객체의 정수 키가 선형 배열 안의 위치를 나타내는 경우에만 사용해야 합니다. 그 객체에 ID나 핸들 같이 임의의 정수 키가 담겨 있면, InsertAt은 원치 않은 부작용을 야기할 가능성이 높습니다. 예를 들어:</p>
<pre>x := [], handleX := 0x4321, handleY := 0x1234
x.InsertAt(handleX, "A")
MsgBox % x[handleX]  <em>; A - okay</em>
x.InsertAt(handleY, "B")
MsgBox % x[handleX]  <em>; 비어 있습니다</em>
MsgBox % x[handleX+1]  <em>; 이곳이 "B"의 새 "위치"입니다.</em></pre>
<p>
InsertAt은 문자열이나 객체 키에 영향을 주지 않습니다. 그래서 혼합 키 유형이 담긴 객체와 안전하게 사용할 수 있습니다.</p>
</div>

<div class="methodShort" id="RemoveAt"><h2>RemoveAt <span class="ver">[v1.1.21+]</span></h2>
<p>선형 배열에서 주어진 위치로부터 항목을 제거합니다.</p>
<pre class="Syntax">Object.RemoveAt(Pos [, Length])</pre>
<dl>
  <dt>Pos</dt>
  <dd><p>제거할 값의 위치.</p></dd>
  
  <dt>Length</dt>
  <dd><p>제거할 값의 범위의 길이. <code>Pos</code>부터 <code>Pos+Length-1</code>까지의 항목이 제거됩니다. 생략하면, 하나의 항목만 제거됩니다.</p></dd>
  
  <dt>Return Value</dt>
  <dd><p>만약 <em>Length</em>가 생략되면, <em>Pos</em>으로 제거된 값이 반환됩니다 (없으면 비어 있습니다). 그렇지 않으면, 반환 값은 값을 가진 항목이 제거된 개수입니다. 이것은 희소 배열의  <em>Length</em>와 다르지만, 언제나 0부터<em>Length</em> (포함) 사이입니다.</p></dd>
</dl>
<h3>Remarks</h3>
<p>
RemoveAt은 <a href="#InsertAt">InsertAt</a>에 상대적입니다.</p>
<p>
<em>Pos</em> 오른쪽의 나머지 항목들은 왼쪽으로 <em>Length</em> 만큼 (또는 생략되면 1만큼) 이동합니다. 제거된 범위에서 어떤 항목들은 값이 없더라도 상관이 없습니다. 예를 들어:</p>
<pre>x := ["A", "B"]
MsgBox % x.RemoveAt(1)  <em>; A</em>
MsgBox % x[1]           <em>; B</em>

x := ["A", , "C"]
MsgBox % x.RemoveAt(1, 2)  <em>; 1</em>
MsgBox % x[1]              <em>; C</em></pre>
<p>
RemoveAt은 그 객체의 정수 키가 선형 배열에서 위치를 나타낼 경우에만 사용해야 합니다. 그 객체 안에 ID나 핸들 같이 임의의 정수키가 있다면, RemoveAt은 원하지 않는 부작용을 야기할 가능성이 높습니다. 예를 들어:</p>
<pre>x := {0x4321: "A", 0x1234: "B"}
MsgBox % x.RemoveAt(0x1234) <em>; B</em>
MsgBox % x[0x4321]          <em>; Empty</em>
MsgBox % x[0x4321-1]        <em>; A</em></pre>
<p>
RemoveAt은 문자열이나 객체 키에 영향을 미치지 않습니다. 그래서 혼합 키 유형이 담긴 객체와 안전하게 사용할 수 있습니다.</p>
</div>

<div class="methodShort" id="Push"><h2>Push <span class="ver">[v1.1.21+]</span></h2>
<p>배열의 끝에 값을 추가합니다.</p>
<pre class="Syntax">Object.Push([ Value, Value2, ..., Value<i>N</i> ])</pre>
<dl>
  <dt>Value ...</dt>
  <dd><p>삽입할 하나 이상의 값. 값 배열을 삽입하려면, 마지막 매개변수로 <code><a href="../Functions.htm#VariadicCall">theArray*</a></code>를 건네십시오.</p></dd>
  <dt>Return Value</dt>
  <dd>
  <p>가장 마지막으로 삽입된 값의 위치, 배열이 음수 지표에 원소를 가지고 있다면 음의 정수일 수 있습니다.</p></dd>
</dl>
<h3>Remarks</h3>
<p>
배열이 비어 있거 또는 오직 문자열이나 객체 키만 담겨 있다면 첫 번째 값은 위치 1에 삽입됩니다.</p>
<p>
그렇지 않으면, 첫 번째 값은 <code>Object.MaxIndex() + 1</code>에 삽입됩니다. 그 위치가 음수 또는 0이라도 상관없습니다. 이 위치가 마음에 안들고 객체에 음수 키가 들어 있을 수 있다면, 대신에 <code>Object.InsertAt(Object.Length() + 1, ...)</code>를 사용할 수 있습니다.</p>
</div>

<div class="methodShort" id="Pop"><h2>Pop <span class="ver">[v1.1.21+]</span></h2>
<p>마지막 배열 원소를 제거하고 돌려줍니다.</p>
<pre class="Syntax">Value := Object.Pop()</pre>
<p>
배열 원소가 없다면, 반환 값은 빈 문자열입니다. 그렇지 않으면, 다음과 동등합니다:</p>
<pre>Value := Object.RemoveAt(Object.Length())</pre>
</div>

<div class="methodShort" id="Delete"><h2>Delete <span class="ver">[v1.1.21+]</span></h2>
<p>키-값 쌍을 객체로부터 제거합니다.</p>
<pre class="Syntax" style="margin-top:15px">Object.Delete(Key)
Object.Delete(FirstKey, LastKey)</pre>
<dl>
  <dt>Key</dt>
  <dd><p>Any single key.</p></dd>
  <dt>FirstKey, LastKey</dt>
  <dd><p>유효한 범위의 정수나 문자키. <em>FirstKey</em> &lt;= <em>LastKey</em>. 두 키 모두 유형이 같아야 합니다.</p></dd>
  <dt>Return Value</dt>
  <dd><p>정확하게 매개변수가 하나만 있다면, 제거된 값이 반환됩니다 (없다면 비어 빈 값을 돌려줍니다). 그렇지 않으면 반환 값은 발견되거나 제거된 키의 개수입니다.</p></dd>
</dl>
<h3>Remarks</h3>
<p>
<a href="#RemoveAt">RemoveAt</a>와 다르게, Delete는 제거하지 않은 키-값 쌍에 영향을 주지 않습니다. 예를 들어:</p>
<pre>x := ["A", "B"]
MsgBox % x.RemoveAt(1)  <em>; A</em>
MsgBox % x[1]           <em>; B</em>

x := ["A", "B"]
MsgBox % x.Delete(1)    <em>; A</em>
MsgBox % x[1]           <em>; Empty</em></pre>
</div>

<div class="methodShort" id="MinMaxIndex"><h2>MinIndex / MaxIndex <span class="ver">[AHK_L 31+]</span></h2>
<pre class="Syntax">MinIndex := Object.MinIndex()
MaxIndex := Object.MaxIndex()</pre>
<p>
정수 키가 존재하면, MinIndex는 가장 낮은 값을 돌려주고 MaxIndex는 가장 높은 값을 돌려줍니다. 그렇지 않으면 빈 문자열을 돌려줍니다.</p></div>

<div class="methodShort" id="Length"><h2>Length <span class="ver">[v1.1.21+]</span></h2>
<pre class="Syntax">Length := Object.Length()</pre>
<p>
위치 1에서 시작하여 선형 배열의 길이를 돌려줍니다; 즉, 객체 안에서 가장 높은 양의 정수 키를 돌려주고, 그게 없다면 0을 돌려줍니다.</p>
<pre>
MsgBox % ["A", "B", "C"].Length()  <em>;  3</em>
MsgBox % ["A",    , "C"].Length()  <em>;  3</em>
MsgBox % {-10: 0, 10: 0}.Length()  <em>; 10</em>
MsgBox % {-10: 0, -1: 0}.Length()  <em>;  0</em>
</pre></div>

<div class="methodShort" id="SetCapacity"><h2>SetCapacity <span class="ver">[AHK_L 31+]</span></h2>
<p>객체의 또는 객체 필드의 가용 능력을 조정합니다.</p>
<pre class="Syntax">Object.SetCapacity(MaxItems)
Object.SetCapacity(Key, ByteSize)</pre>
<table class="info">
  <tr>
  <td width="15%">MaxItems</td><td width="85%">객체가 담을 수 있는키-값 쌍의 최대 개수. 이 값을 넘어서면 자동으로 확대됩니다. 키-값 쌍의 현재 개수보다 작으면, 대신에 현재 개수가 사용되고, 사용되지 않는 공간은 모두 해제됩니다.</td></tr>
  <tr><td>Key</td><td>유효한 키면 모두.</td></tr>
  <tr><td>ByteSize</td><td>필드의 문자열 버퍼의 바이트 단위로 새 크기. 널 종료 문자는 제외합니다. 필드가 존재하지 않으면, 새로 생성됩니다. <i>ByteSize</i>가 0이면, 버퍼가 해제되지만 빈 필드는 제거되지 않습니다.  <i>ByteSize</i>가 현재 크기보다 작으면, 초과된 데이터는 잘려 나갑니다; 그렇지 않으면 기존의 모든 데이터가 보존됩니다.</td></tr>
  <tr><td><b>Returns</b></td><td>성공하면 새 가용 능력, 그렇지 않으면 빈 문자열을 돌려줍니다.</td></tr>
</table></div>

<div class="methodShort" id="GetCapacity"><h2>GetCapacity <span class="ver">[AHK_L 31+]</span></h2>
<pre class="Syntax">MaxItems := Object.GetCapacity()
ByteSize := Object.GetCapacity(Key)</pre>
<p>객체나 객체 필드의 현재 가용 능력을 돌려줍니다.</p></div>

<div class="methodShort" id="GetAddress"><h2>GetAddress <span class="ver">[AHK_L 31+]</span></h2>
<pre class="Syntax">Ptr := Object.GetAddress(Key)</pre>
<p>있다면, 필드의 문자열 버퍼의 현재 주소를 돌려줍니다.</p></div>

<div class="methodShort" id="NewEnum"><h2>NewEnum <span class="ver">[AHK_L 49+]</span></h2>
<pre class="Syntax">Enum := Object._NewEnum()</pre>
<p>새 열거자(<a href="Enumerator.htm">enumerator</a>)를 돌려주어 이 객체의 키-값 쌍을 열거합니다. 이 메쏘드는 보통 직접 호출되지 않고, <a href="../commands/For.htm">for-회돌이</a> 안에서 사용됩니다.</p></div>

<div class="methodShort" id="HasKey"><h2>HasKey <span class="ver">[AHK_L 53+]</span></h2>
<pre class="Syntax">Object.HasKey(Key)</pre>
<p><i>Key</i>가 <i>Object</i>안의 값 (even "")에 연관되어 있으면 참을, 그렇지 않으면 거짓을 돌려줍니다.</p></div>

<div class="methodShort" id="Clone"><h2>Clone <span class="ver">[AHK_L 60+]</span></h2>
<pre class="Syntax">Clone := Object.Clone()</pre>
<p>객체의 얕은 사본을 돌려줍니다.</p></div>

<div class="methodShort" id="RawSet"><h2>ObjRawSet</h2>
<p>키-값 쌍을 객체에 저장하거나 덮어씁니다.</p>
<pre class="Syntax">ObjRawSet(Object, Key, Value)</pre>
<p>
이 함수로 스크립트는 __Set <a href="../Objects.htm#Meta_Functions">메타-함수</a>를 우회할 수 있습니다. 필요하지 않으면, 대신에 정상적인 할당을 사용해야 합니다. 예를 들어: <code>Object[Key] := Value</code></p>
<p>
메타-함수를 우회하는 것이 목적이므로, 메쏘드가 아니라 함수입니다. 내장 메쏘드를 호출하면 일반적으로 __Call meta-함수가 호출됩니다.</p></div>

<div class="methodShort" id="Insert"><h2>Insert <span class="ver">[AHK_L 31+]</span></h2>
<div class="warning"><strong>비추천:</strong> Insert는 새 스크립트에 사용을 추천하지 않습니다. 대신에 <a href="#InsertAt">InsertAt</a>, <a href="#Push">Push</a>, <a href="#RawSet">ObjRawSet</a> 또는 그냥 단순하게 할당을 사용하십시오.</div>
<p>
키-값 쌍을 객체에 삽입합니다. 정수 키가 주어지면 자동으로 기존의 키를 조정합니다.</p>
<pre class="Syntax">Object.Insert(Pos, Value1 [, Value2, ... Value<i>N</i> ])
Object.Insert(Value)
Object.Insert(StringOrObjectKey, Value)</pre>
<p>Insert의 행위는 매개변수의 개수 그리고 유형에 따라 달라집니다:</p>
<ul>
  <li>매개변수가 여러 개이고 첫 매개변수가 정수이면, Insert는 <a href="#InsertAt">InsertAt</a>처럼 행위합니다.</li>
  <li>맥개변수가 여러 개이고 첫 배개변수가 정수가 아니면, Insert는 <a href="#RawSet">ObjRawSet</a>처럼 행위합니다.</li>
  <li>매개변수가 하나만 있으면, Insert는 <a href="#Push">Push</a>처럼 행위합니다.</li>
</ul>
<p>Insert는 <i>true</i>를 돌려줍니다. v1.1.21 이후에서, 메모리 할당이 실패하면 예외가 던져집니다. 이전 버전에서는 그 경우 빈 문자열을 돌려주었습니다.</p>
</div>

<div class="methodShort" id="Remove"><h2>Remove <span class="ver">[AHK_L 31+]</span></h2>
<div class="warning"><strong>비추천:</strong> Remove는 새 스크립트에 사용을 추천하지 않습니다. 대신에 <a href="#RemoveAt">RemoveAt</a>, <a href="#Delete">Delete</a> 또는 <a href="#Pop">Pop</a>을 사용하십시오.</div>
<p>객체로부터 키-값 쌍을 제거합니다.</p>
<pre class="Syntax">Object.Remove(FirstKey, LastKey)</pre>
<p>Remove의 행위는 매개변수의 개수와 유형에 따라 달라집니다:</p>
<ul>
  <li><code>Object.Remove(Integer)</code>는 <code>Object.<a href="#RemoveAt">RemoveAt</a>(Integer)</code>처럼 행위합니다.</li>
  <li><code>Object.Remove(Integer, "")</code>는 <code>Object.<a href="#Delete">Delete</a>(Integer)</code>처럼 행위합니다.</li>
  <li><code>Object.Remove(Integer1, Integer2)</code>는 <code>Object.<a href="#RemoveAt">RemoveAt</a>(Integer1, Integer2 - Integer1 + 1)</code>처럼 행위합니다.</li>
  <li><code>Object.Remove()</code>는 <code>Object.<a href="#Pop">Pop</a>()</code>처럼 행위합니다.</li>
  <li>다른 모든 매개변수 조합은 <a href="#Delete">Delete</a>처럼 행위합니다.</li>
</ul>
</div>

</body>
</html>
