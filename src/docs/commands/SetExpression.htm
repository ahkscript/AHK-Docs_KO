

<html>
<head>
<title>Var := expression</title>
<meta http-equiv="Content-Type" content="text/html; charset=euc-kr">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Var := expression</h1>

<p>표현식을 평가해 그 결과를 <a href="../Variables.htm">변수</a>에 저장합니다.</p>

<pre class="Syntax">Var := expression</pre>
<h3>매개변수</h3>
<dl>

  <dt>Var</dt>
  <dd><p><em>표현식</em>의 결과를 저장할 <a href="../Variables.htm">변수</a>의 이름.</p></dd>

  <dt>Expression</dt>
  <dd><p>자세한 것은 <a href="../Variables.htm#Expressions">표현식</a>과 아래의 예제를 참조하십시오.</p></dd>

</dl>

<h3>논평</h3>
<p> := 연산자는 다음과 같이 간단한 경우에  = 연산자처럼 똑같이 빠르게 수행되도록 최적화 됩니다:</p>
<pre>x := y  <em>; 수행성능은 x = %y%와 같음</em>
x := 5  <em>; 수행성능은 x = 5와 같음.</em>
x := &quot;literal string&quot;  <em>; 수행성은 x = literal string과 같음.</em></pre>
<p>
단어 <code>true</code>와 <code>false</code>는 내장 상수로서 각각 1과 0을 담고 있습니다. 다음 예제와 같이 스크립트를 더 읽기 쉽게 만들 수 있습니다:</p>

<pre>CaseSensitive := false
ContinueSearch := true</pre>
<p>
이 명령어와 그리고 <em>OuputVar</em>를 받는 다른 명령어로 <a href="../misc/Arrays.htm#pseudo">의사-배열</a>을 만들 수 있습니다. <em>OutputVar</em>에 또다른 변수를 가리키는 참조를 담도록 만들면 됩니다. 예, <code>Array%i% := Var/100 + 5</code>. 더 자세한 정보는 <a href="../misc/Arrays.htm">배열</a>을 참조하십시오.</p>

<h3>관련 항목</h3>
<p>
<a href="../Variables.htm#Expressions">표현식</a>, <a href="IfExpression.htm">IF (표현식)</a>, <a href="../Functions.htm">Functions</a>, <a href="SetEnv.htm">SetEnv</a>, <a href="EnvSet.htm">EnvSet</a>, <a href="EnvAdd.htm">EnvAdd</a>, <a href="EnvSub.htm">EnvSub</a>, <a href="EnvMult.htm">EnvMult</a>, <a href="EnvDiv.htm">EnvDiv</a>, <a href="IfEqual.htm">If</a>, <a href="../misc/Arrays.htm">배열</a></p>

<h3>예제</h3>
<pre class="NoIndent">Var := 3
Var := &quot;literal string&quot;
Var := Price * (1 - Discount/100)

Finished := not Done or A_Index &gt; 100
if not Finished
{
    FileAppend, %NewText%`n, %TargetFile%
    return
}
else
    ExitApp</pre>

</body>
</html>
