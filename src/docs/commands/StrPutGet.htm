

<html>
<head>
<title>StrPut / StrGet</title>
<meta http-equiv="Content-Type" content="text/html; charset=euc-kr">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>StrPut() / StrGet() <span class="ver">[AHK_L 46+]</span></h1>

<p>문자열을 메모리 주소에 또는 메모리 주소로부터 복사합니다. 선택적으로 주어진 코드 페이지 사이에 변환합니다.</p>

<pre class="Syntax">StrPut(String [, Encoding = <i>None</i> ] )
StrPut(String, Address [, Length] [, Encoding = <i>None</i> ] )
StrGet(Address [, Length] [, Encoding = <i>None</i> ] )</pre>
<h3>매개변수</h3>
<dl>

  <dt>String</dt>
  <dd><p>문자열, 숫자도 받을 수 있습니다.</p></dd>

  <dt>Address</dt>
  <dd><p>문자열을 읽고/쓸 주소.</p></dd>

  <dt>Length</dt>
  <dd><p>읽고/쓸 문자의 최대 개수, 필요하면 널-종료 문자 포함. <a href="">반환 값</a>을 참조하십오.</p></dd>

  <dt>Encoding</dt>
  <dd><p>StrGet에 대한 소스 인코딩 또는 StrPut에 대한 타겟 인코딩; 예를 들어, "UTF-8", "UTF-16" or "CP936".  <em>Address</em>와 <em>Length</em>를 지정하지 않으면, 숫치 식별자 앞에 "CP"를 붙여야 하니다.  빈 문자열이나 "CP0"을 지정하면 시스템 기본 ANSI 코드 페이지를 사용합니다.</p></dd>

</dl>

<h3>반환 값</h3>
<p>
각 함수에 대하여, 무효한 매개변수는 빈 문자열을 돌려줍니다.</p>
<p>
StrPut은 씌여진 문자의 개수를 돌려줍니다. <i>Address</i>가 주어지지 않으면 문자단위로 필요한 버퍼 크기를 돌려주고 에러가 일어나면 0을 돌려줍니다. <em>Length</em>가 소스 문자열이 길이보다 작으면, 함수는 실패하고 0을 돌려줍니다.  <em>Length</em>가 정확하게 소스 문자열의 길이이면, 문자열은 널-문자로 종료하지 않습니다; 그렇지 않으면 반환된 개수는 널 문자를 포함합니다.</p>
<p>
StrGet은 필요한 변환을 수행한 후 요청된 문자열을 길이를 돌려줍니다.</p>

<h3>논평</h3>
<p>StrPut의 <i>String</i> 매개변수와 StrGet의 반환값은 언제나 현재 실행 파일의 <a href="../Compat.htm#Format">고유 인코딩</a>을 따릅니다. 반면에 <i>Encoding</i>은 주어진 <i>Address</i>에 읽고 쓸 문자열의 인코딩을 지정합니다. <em>Encoding</em>을 지정하지 않으면, 그 문자열은 그냥 아무 변환도 일어나지 않고 그대로 복사되거나 측정됩니다.</p>
<p>
코드 페이지 사이의 변환이 필요하면, 필요한 버퍼 크기는 소스 <em>String</em>의 크기에 따라 달라질 수 있습니다.</p>
<p>스크립트가 AutoHotkey Basic과의 호환을 필요로 하면 여전히 StrPut과 StrGet을 사용할 수 있습니다. 단 <a href="http://www.autohotkey.com/forum/topic59738.html">적절한 스크립트 파일들</a>이 <a href="../Functions.htm#lib">함수 라이브러리</a>에 설치되어 있어야 합니다. 이런 스크립트들은  <a href="http://www.autohotkey.com/forum/">오토핫키 공동체 포럼</a>에서 발견할 수 있습니다.</p>

<h3>관련 항목</h3>
<p><a href="../Compat.htm">스크립트 호환성</a>, <a href="FileEncoding.htm">FileEncoding</a>, <a href="VarSetCapacity.htm">VarSetCapacity()</a></p>

<h3>예제</h3>
<p><em>Length</em>나 <em>Encoding</em>을 <em>Address</em> 다음에 직접적으로 지정할 수 있습니다. 그러나 그런 경우 <em>Encoding</em>은 절대로 숫치형이 되면 안됩니다:</p>
<pre class="NoIndent">strA := StrGet(addressA, "cp0")     <em>; OK</em>
strA := StrGet(addressA, length, 0) <em>; OK</em>
strA := StrGet(addressA, 0)         <em>; Error</em></pre>

<p>
StrPut은 특정한 인코딩으로 문자열에 대하여 필요한 버퍼 크기를 계산하기 위하여 한 번 호출이 가능합니다. 다음,  그 문자열을 인코드해서 버퍼 안으로 써 넣을 수 있습니다. 자주 변수를 StrPut과 함께 사용한다면, 다음과 같은 함수를 여러분의 <a href="../Functions.htm#lib">라이브러리</a>에 넣어 보십시오:</p>
<pre class="NoIndent">StrPutVar(string, ByRef var, encoding)
{
    <em>; 가용능력을 확인합니다.</em>
    VarSetCapacity( var, StrPut(string, encoding)
        <em>; StrPut은 문자 개수를 돌려주지만, VarSetCapacity는 바이트를 필요로 합니다.</em>
        * ((encoding="utf-16"||encoding="cp1200") ? 2 : 1) )
    <em>; 그 문자열을 복사하거나 변환합니다.</em>
    return StrPut(string, &amp;var, encoding)
}</pre>

</body>
</html>
