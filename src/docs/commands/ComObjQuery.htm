

<html>
<head>
<title>ComObjQuery()</title>
<meta http-equiv="Content-Type" content="text/html; charset=euc-kr">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>ComObjQuery() <span class="ver">[v1.0.96.00+]</span></h1>
<p>COM 객체에 인터페이스나 서비스가 있는지 질의합니다.</p>

<pre class="Syntax">InterfacePointer := ComObjQuery(ComObject, [SID,] IID)</pre>

<h3>매개변수</h3>
<dl>

  <dt>ComObject</dt>
  <dd><p>COM 포장 객체 또는 날 인터페이스 포인터.</p></dd>

  <dt>IID</dt>
  <dd><p>인터페이스 식별자 (GUID). 형식 "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}".</p></dd>

  <dt>SID</dt>
  <dd><p>서비스 식별자. IID와 형식이 값습니다. 이 매개변수가 생략되면, 쉼표도 생략됩니다.</p></dd>

</dl>

<h3>총평</h3>
<p>
그의 두-매개변수 모드에서, 이 함수는 <a href="http://msdn.microsoft.com/en-us/library/ms682521.aspx">IUnknown::QueryInterface</a>와 동등합니다. SID와 IID 모두 지정되면, 내부적으로 <a href="http://msdn.microsoft.com/en-us/library/cc678965.aspx">IServiceProvider</a> 인터페이스에 질의한 다음, <a href="http://msdn.microsoft.com/en-us/library/cc678966.aspx">IServiceProvider::QueryService</a>를 호출합니다. 어느 경우든, 반환 값은 0 이거나 아니면 요청된 인터페이스를 가리키는 포인터입니다. 일반적으로 이 포인터는 반드시 스크립트가 일을 마칠 때 <a href="ObjAddRef.htm">해제</a>되어야 합니다.</p>

<h3>관련 항목</h3>
<a href="ObjAddRef.htm">ObjRelease</a>, <a href="ComObjCreate.htm">ComObjCreate</a>, <a href="ComObjGet.htm">ComObjGet</a>, <a href="ComObjActive.htm">ComObjActive</a>, <a href="ComObjError.htm">ComObjError</a>

<h3>예제</h3>

<pre id="ExClassName" class="NoIndent"><em>; 예제: 객체의 클래스 이름을 알아냅니다</em>

obj := ComObjCreate("Scripting.Dictionary")

MsgBox % "Interface name: " ComObjType(obj, "name")

IID_IProvideClassInfo := "{B196B283-BAB4-101A-B69C-00AA00341D07}"

<em>; 그 객체의 IProvideClassInfo 인터페이스를 가리키는 포인터를 요구합니다.</em>
if !(pci := ComObjQuery(obj, IID_IProvideClassInfo))
{
    MsgBox IProvideClassInfo interface not supported.
    return
}

<em>; GetClassInfo를 호출해 ITypeInfo 인터페이스를 가리키는 포인터를 열람합니다.</em>
DllCall(vtable(pci, 3), "ptr", pci, "ptr*", ti)

<em>; GetDocumentation을 호출하여 그 객체의 완전한 유형 이름을 얻습니다.</em>
DllCall(vtable(ti, 12), "ptr", ti, "int", -1, "ptr*", name, "ptr", 0, "ptr", 0, "ptr", 0)

<em>; BSTR 포인터를 쓸모있는 문자열로 변환합니다.</em>
name := StrGet(name, "UTF-16")

<em>; 날 인터페이스 포인터들을 해제합니다.</em>
ObjRelease(ti)
ObjRelease(pci)

<em>; 유형 이름을 보여줍니다!</em>
MsgBox % "Class name: " name

vtable(ptr, n) {
    <em>; NumGet(ptr+0)은 그 객체의 가상 함수 테이블의 (약자로 vtable)
    ; 주소를 돌려줍니다. 표현식의 나머지는 n번째 함수의 주소를
    ; vtable로부터 열람합니다.</em>
    return NumGet(NumGet(ptr+0), n*A_PtrSize)
}
</pre>

<pre id="ExIE" class="NoIndent"><em>; 예제: 기존의 인터넷 익스플로러 창을 자동화하기.</em>

sURL := "http://ahkscript.org/boards/"
if webBrowser := GetWebBrowser()
   webBrowser.Navigate(sURL)
return

GetWebBrowser()
{
    <em>; 최상위 IE 창의 문서 객체를 가리키는 날 포인터를 얻습니다.</em>
    static msg := DllCall("RegisterWindowMessage", "str", "WM_HTML_GETOBJECT")
    SendMessage msg, 0, 0, Internet Explorer_Server1, ahk_class IEFrame
    if ErrorLevel = FAIL
        return  <em>; IE가 발견되지 않음.</em>
    lResult := ErrorLevel
    DllCall("oleacc\ObjectFromLresult", "ptr", lResult
        , "ptr", GUID(IID_IHTMLDocument2,"{332C4425-26CB-11D0-B483-00C04FD90119}")
        , "ptr", 0, "ptr*", pdoc)
    
    <em>; WebBrowserApp 서비스에 질의합니다. 이 특별한 경우는
    ; SID와 IID가 같습니다. 그러나 언제나 이런 것은 아닙니다.</em>
    static IID_IWebBrowserApp := "{0002DF05-0000-0000-C000-000000000046}"
    static SID_SWebBrowserApp := IID_IWebBrowserApp
    pweb := ComObjQuery(pdoc, SID_SWebBrowserApp, IID_IWebBrowserApp)
    
    <em>; 문서 객체 포인터를 풀어줍니다.</em>
    ObjRelease(pdoc)
    
    <em>; WebBrowser 객체를, 사용을 위해 포장해서, 반환합니다:</em>
    static VT_DISPATCH := 9, F_OWNVALUE := 1
    return ComObject(VT_DISPATCH, pweb, F_OWNVALUE)
}

GUID(ByRef GUID, sGUID) <em>; 문자열을 이진 GUID로 변환하고 그의 주소를 돌려줍니다.</em>
{
    VarSetCapacity(GUID, 16, 0)
    return DllCall("ole32\CLSIDFromString", "wstr", sGUID, "ptr", &amp;GUID) >= 0 ? &amp;GUID : ""
}
</pre>

</body>
</html>
